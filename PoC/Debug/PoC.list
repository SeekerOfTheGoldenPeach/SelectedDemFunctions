
PoC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fbc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800a150  0800a150  0000b150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a93c  0800a93c  0000c288  2**0
                  CONTENTS
  4 .ARM          00000008  0800a93c  0800a93c  0000b93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a944  0800a944  0000c288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a944  0800a944  0000b944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a948  0800a948  0000b948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800a94c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c288  2**0
                  CONTENTS
 10 .bss          000015c0  20000288  20000288  0000c288  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001848  20001848  0000c288  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c288  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010461  00000000  00000000  0000c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b62  00000000  00000000  0001c719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  0001f280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae0  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fb3  00000000  00000000  00020b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001416d  00000000  00000000  00045b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db6b0  00000000  00000000  00059c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135330  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a28  00000000  00000000  00135374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00139d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000288 	.word	0x20000288
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a134 	.word	0x0800a134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000028c 	.word	0x2000028c
 80001cc:	0800a134 	.word	0x0800a134

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <DLT_RB_Receive_GetNextMessageAddress>:
 * \details Function used to work with DMA - direct write to ring buffer by DMA
 * \param in Buf -
 * \param in WriteAddress -
 ************************************************************************************************/
static RB_Status DLT_RB_Receive_GetNextMessageAddress(BluRingBufferReceive_t *Buf, uint8_t **WriteAddress)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
	static uint8_t DefaultBlindBuffer[20];

	/*Mark previous message as ready to read*/
	Buf->ReadyToRead[Buf->Head] = true;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4413      	add	r3, r2
 8000e70:	2201      	movs	r2, #1
 8000e72:	719a      	strb	r2, [r3, #6]

	// Calculate new Head pointer value
	uint16_t HeadTmp = (Buf->Head + 1) % DLT_RECEIVE_RING_BUFFER_SIZE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	bfb8      	it	lt
 8000e82:	425b      	neglt	r3, r3
 8000e84:	81fb      	strh	r3, [r7, #14]

	// Check if there is one free space ahead the Head buffer
	if (HeadTmp == Buf->Tail)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	885b      	ldrh	r3, [r3, #2]
 8000e8a:	89fa      	ldrh	r2, [r7, #14]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d104      	bne.n	8000e9a <DLT_RB_Receive_GetNextMessageAddress+0x3e>
	{
		/*Even if buffer is full data must be received somewhere to don't crush application/ dma*/
		*WriteAddress = DefaultBlindBuffer;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	4a10      	ldr	r2, [pc, #64]	@ (8000ed4 <DLT_RB_Receive_GetNextMessageAddress+0x78>)
 8000e94:	601a      	str	r2, [r3, #0]
		// There is no space in the buffer - return an error
		return RB_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e015      	b.n	8000ec6 <DLT_RB_Receive_GetNextMessageAddress+0x6a>
	}

	Buf->ReadyToRead[HeadTmp] = false;
 8000e9a:	89fb      	ldrh	r3, [r7, #14]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	719a      	strb	r2, [r3, #6]
	Buf->MessageSize[HeadTmp] = DLT_RECEIVE_RING_BUFFER_SIZE;
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2202      	movs	r2, #2
 8000eac:	711a      	strb	r2, [r3, #4]
	Buf->Head = HeadTmp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	89fa      	ldrh	r2, [r7, #14]
 8000eb2:	801a      	strh	r2, [r3, #0]

	*WriteAddress = &BluMainReceiveMessagesTab[HeadTmp][0];
 8000eb4:	89fa      	ldrh	r2, [r7, #14]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <DLT_RB_Receive_GetNextMessageAddress+0x7c>)
 8000ebe:	441a      	add	r2, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	601a      	str	r2, [r3, #0]

	// Everything is ok - return OK status
	return RB_OK;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000150c 	.word	0x2000150c
 8000ed8:	2000130c 	.word	0x2000130c

08000edc <DLT_RB_Receive_Read>:
 * \param out MessageSize - size of the "BleLogData" (return value)
 * \param out MessagePointer - pointer to the message stored in RingBuffer (return value)
 *
 * */
static RB_Status DLT_RB_Receive_Read(BluRingBufferReceive_t *Buf, uint8_t *MessageSize, uint8_t **MessagePointer)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]

	if (Buf->ReadyToRead[Buf->Tail] == false)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	885b      	ldrh	r3, [r3, #2]
 8000eec:	461a      	mov	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	799b      	ldrb	r3, [r3, #6]
 8000ef4:	f083 0301 	eor.w	r3, r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <DLT_RB_Receive_Read+0x26>
	{
		/*Any message in ring buffer isn't ready to read*/
		return RB_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e02c      	b.n	8000f5c <DLT_RB_Receive_Read+0x80>
	}
	/*Mark again as not ready to read*/
	Buf->ReadyToRead[Buf->Tail] = false;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	885b      	ldrh	r3, [r3, #2]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	719a      	strb	r2, [r3, #6]

	// Check if Tail hit Head
	if (Buf->Head == Buf->Tail)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	881a      	ldrh	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	885b      	ldrh	r3, [r3, #2]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d101      	bne.n	8000f20 <DLT_RB_Receive_Read+0x44>
	{
		// If yes - there is nothing to read
		return RB_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e01d      	b.n	8000f5c <DLT_RB_Receive_Read+0x80>
	}

	// Write current value from buffer to pointer from argument
	*MessageSize = Buf->MessageSize[Buf->Tail];
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	885b      	ldrh	r3, [r3, #2]
 8000f24:	461a      	mov	r2, r3
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4413      	add	r3, r2
 8000f2a:	791a      	ldrb	r2, [r3, #4]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	701a      	strb	r2, [r3, #0]
	*MessagePointer = &BluMainReceiveMessagesTab[Buf->Tail][0];
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	885b      	ldrh	r3, [r3, #2]
 8000f34:	461a      	mov	r2, r3
 8000f36:	4613      	mov	r3, r2
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <DLT_RB_Receive_Read+0x8c>)
 8000f3e:	441a      	add	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	601a      	str	r2, [r3, #0]

	// Calculate new Tail pointer
	Buf->Tail = (Buf->Tail + 1) % DLT_RECEIVE_RING_BUFFER_SIZE;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	885b      	ldrh	r3, [r3, #2]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	bfb8      	it	lt
 8000f52:	425b      	neglt	r3, r3
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	805a      	strh	r2, [r3, #2]

	// Everything is ok - return OK status
	return RB_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	2000130c 	.word	0x2000130c

08000f6c <DLT_RB_TransmitRead>:
 * \param out MessageSize - size of the "DltLogData" (return value)
 * \param out MessagePointer - pointer to the message stored in RingBuffer (return value)
 *
 * */
static RB_Status DLT_RB_TransmitRead(DltRingBufferTransmit_t *Buf, uint8_t *MessageSize, uint8_t **MessagePointer)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	// Check if Tail hit Head
	if (Buf->Head == Buf->Tail)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	881a      	ldrh	r2, [r3, #0]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	885b      	ldrh	r3, [r3, #2]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d101      	bne.n	8000f88 <DLT_RB_TransmitRead+0x1c>
	{
		// If yes - there is nothing to read
		return RB_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e023      	b.n	8000fd0 <DLT_RB_TransmitRead+0x64>
	}

	// Write current value from buffer to pointer from argument
	*MessageSize = Buf->Buffer[Buf->Tail];
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	885b      	ldrh	r3, [r3, #2]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	791a      	ldrb	r2, [r3, #4]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	701a      	strb	r2, [r3, #0]
	*MessagePointer = &DltTrsmtMessagesTab[Buf->Tail][0];
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	885b      	ldrh	r3, [r3, #2]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <DLT_RB_TransmitRead+0x70>)
 8000fa6:	441a      	add	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	601a      	str	r2, [r3, #0]

	// Calculate new Tail pointer
	Buf->Tail = (Buf->Tail + 1) % DLT_TRANSMIT_RING_BUFFER_SIZE;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	885b      	ldrh	r3, [r3, #2]
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <DLT_RB_TransmitRead+0x74>)
 8000fb4:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb8:	4413      	add	r3, r2
 8000fba:	10d9      	asrs	r1, r3, #3
 8000fbc:	17d3      	asrs	r3, r2, #31
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	1a5b      	subs	r3, r3, r1
 8000fc6:	1ad1      	subs	r1, r2, r3
 8000fc8:	b28a      	uxth	r2, r1
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	805a      	strh	r2, [r3, #2]

	// Everything is ok - return OK status
	return RB_OK;
 8000fce:	2300      	movs	r3, #0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	20000410 	.word	0x20000410
 8000fe0:	88888889 	.word	0x88888889

08000fe4 <DLT_RB_TransmitWrite>:
 * \param in RingBuffer_t *Buf - pointer to Ring Buffer structure
 * \param in DltLogData - pointer to the data stored in RingBuffer
 * \param in MessageSize - size of the "DltLogData"
 ************************************************************************************************/
static RB_Status DLT_RB_TransmitWrite(DltRingBufferTransmit_t *Buf, uint8_t *DltLogData, uint8_t MessageSize)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b087      	sub	sp, #28
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t ActualWriteIndex;

	DLTuc_OS_CRITICAL_START();
	// Calculate new Head pointer value
	uint8_t HeadTmp = (Buf->Head + 1) % DLT_TRANSMIT_RING_BUFFER_SIZE;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	1c5a      	adds	r2, r3, #1
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <DLT_RB_TransmitWrite+0x94>)
 8000ffa:	fb83 1302 	smull	r1, r3, r3, r2
 8000ffe:	4413      	add	r3, r2
 8001000:	10d9      	asrs	r1, r3, #3
 8001002:	17d3      	asrs	r3, r2, #31
 8001004:	1ac9      	subs	r1, r1, r3
 8001006:	460b      	mov	r3, r1
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	1a5b      	subs	r3, r3, r1
 800100c:	1ad1      	subs	r1, r2, r3
 800100e:	460b      	mov	r3, r1
 8001010:	74fb      	strb	r3, [r7, #19]

	// Check if there is one free space ahead the Head buffer
	if (HeadTmp == Buf->Tail)
 8001012:	7cfb      	ldrb	r3, [r7, #19]
 8001014:	b29a      	uxth	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	885b      	ldrh	r3, [r3, #2]
 800101a:	429a      	cmp	r2, r3
 800101c:	d101      	bne.n	8001022 <DLT_RB_TransmitWrite+0x3e>
	{
		DLTuc_OS_CRITICAL_END();
		// There is no space in the buffer - return an error
		return RB_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e024      	b.n	800106c <DLT_RB_TransmitWrite+0x88>
	}
	ActualWriteIndex = Buf->Head;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	74bb      	strb	r3, [r7, #18]
	Buf->Head = HeadTmp;
 8001028:	7cfb      	ldrb	r3, [r7, #19]
 800102a:	b29a      	uxth	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	801a      	strh	r2, [r3, #0]
	DLTuc_OS_CRITICAL_END();

	// Store a value into the buffer
	Buf->Buffer[ActualWriteIndex] = MessageSize;
 8001030:	7cbb      	ldrb	r3, [r7, #18]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	79fa      	ldrb	r2, [r7, #7]
 8001038:	711a      	strb	r2, [r3, #4]

	/*Copy the values to new buffer*/
	for (int i = 0; i < MessageSize; i++)
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e010      	b.n	8001062 <DLT_RB_TransmitWrite+0x7e>
	{
		DltTrsmtMessagesTab[ActualWriteIndex][i] = DltLogData[i];
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	4413      	add	r3, r2
 8001046:	7cba      	ldrb	r2, [r7, #18]
 8001048:	7818      	ldrb	r0, [r3, #0]
 800104a:	490c      	ldr	r1, [pc, #48]	@ (800107c <DLT_RB_TransmitWrite+0x98>)
 800104c:	4613      	mov	r3, r2
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	18ca      	adds	r2, r1, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	4413      	add	r3, r2
 8001058:	4602      	mov	r2, r0
 800105a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MessageSize; i++)
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3301      	adds	r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	429a      	cmp	r2, r3
 8001068:	dbea      	blt.n	8001040 <DLT_RB_TransmitWrite+0x5c>
	}
	// Everything is ok - return OK status
	return RB_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	88888889 	.word	0x88888889
 800107c:	20000410 	.word	0x20000410

08001080 <PrepareHoleHeader>:
 * \brief PrepareHoleHeader
 * \details A very lazy implementation of DLT Header - but it works fine
 * Please refer to: https://www.autosar.org/fileadmin/user_upload/standards/foundation/1-0/AUTOSAR_PRS_DiagnosticLogAndTraceProtocol.pdf
 ************************************************************************************************/
static void PrepareHoleHeader(uint8_t Level, uint32_t AppId, uint32_t ContextId, uint16_t size)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	461a      	mov	r2, r3
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	4613      	mov	r3, r2
 8001092:	81bb      	strh	r3, [r7, #12]
	uint32_t ActualTime = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

	if (GetSystemTimeMs != NULL)
 8001098:	4b4b      	ldr	r3, [pc, #300]	@ (80011c8 <PrepareHoleHeader+0x148>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <PrepareHoleHeader+0x32>
	{
		ActualTime = GetSystemTimeMs() * 10;
 80010a0:	4b49      	ldr	r3, [pc, #292]	@ (80011c8 <PrepareHoleHeader+0x148>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4798      	blx	r3
 80010a6:	4602      	mov	r2, r0
 80010a8:	4613      	mov	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
		/*Multiply by 10 to get value in MS also in DLTViewer
		 *Reson: Resolution in DLT Viewer is equal: 10^-4
		 */
	}

	if (size > (254 - 32))
 80010b2:	89bb      	ldrh	r3, [r7, #12]
 80010b4:	2bde      	cmp	r3, #222	@ 0xde
 80010b6:	d901      	bls.n	80010bc <PrepareHoleHeader+0x3c>
	{
		/*Error to handle or please develop this function */
		while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <PrepareHoleHeader+0x38>
			/*For develop phase lock the app*/
		}
	}

	/*START HEADER*/
	DltDebugTmpBuf[0] = 0x44; /*'D'*/
 80010bc:	4b43      	ldr	r3, [pc, #268]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80010be:	2244      	movs	r2, #68	@ 0x44
 80010c0:	701a      	strb	r2, [r3, #0]
	DltDebugTmpBuf[1] = 0x4c; /*'L'*/
 80010c2:	4b42      	ldr	r3, [pc, #264]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80010c4:	224c      	movs	r2, #76	@ 0x4c
 80010c6:	705a      	strb	r2, [r3, #1]
	DltDebugTmpBuf[2] = 0x53; /*'S'*/
 80010c8:	4b40      	ldr	r3, [pc, #256]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80010ca:	2253      	movs	r2, #83	@ 0x53
 80010cc:	709a      	strb	r2, [r3, #2]
	DltDebugTmpBuf[3] = 0x01; /*'0x01'*/
 80010ce:	4b3f      	ldr	r3, [pc, #252]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	70da      	strb	r2, [r3, #3]

	DltDebugTmpBuf[4] = 0x35; /*'Dlt base header config
 80010d4:	4b3d      	ldr	r3, [pc, #244]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80010d6:	2235      	movs	r2, #53	@ 0x35
 80010d8:	711a      	strb	r2, [r3, #4]
   * With Seesion ID - false
   * With time stamp - true
   * version number -random
   '*/

	DltDebugTmpBuf[5] = ActDltMessageCounter++; /*'Message counter value '*/
 80010da:	4b3d      	ldr	r3, [pc, #244]	@ (80011d0 <PrepareHoleHeader+0x150>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	b2d1      	uxtb	r1, r2
 80010e2:	4a3b      	ldr	r2, [pc, #236]	@ (80011d0 <PrepareHoleHeader+0x150>)
 80010e4:	7011      	strb	r1, [r2, #0]
 80010e6:	4a39      	ldr	r2, [pc, #228]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80010e8:	7153      	strb	r3, [r2, #5]

	/*TODO: - it must be fixed!!!! - Length*/
	DltDebugTmpBuf[6] = 0x00;	   /*Message length general*/
 80010ea:	4b38      	ldr	r3, [pc, #224]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	719a      	strb	r2, [r3, #6]
								   //	DltDebugTmpBuf[7] =  0x37; /*'Message length general '*/
	DltDebugTmpBuf[7] = 28 + size; /*General size */
 80010f0:	89bb      	ldrh	r3, [r7, #12]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	331c      	adds	r3, #28
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b34      	ldr	r3, [pc, #208]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80010fa:	71da      	strb	r2, [r3, #7]

	uint32_t TempEcuId = DLT_LOG_ECUID_VALUE;
 80010fc:	2375      	movs	r3, #117	@ 0x75
 80010fe:	061a      	lsls	r2, r3, #24
 8001100:	2343      	movs	r3, #67	@ 0x43
 8001102:	041b      	lsls	r3, r3, #16
 8001104:	431a      	orrs	r2, r3
 8001106:	2349      	movs	r3, #73	@ 0x49
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	4313      	orrs	r3, r2
 800110c:	2244      	movs	r2, #68	@ 0x44
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
	/*ECU ID*/
	DltDebugTmpBuf[8] = ((uint8_t *)&TempEcuId)[3];
 8001112:	7cfa      	ldrb	r2, [r7, #19]
 8001114:	4b2d      	ldr	r3, [pc, #180]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001116:	721a      	strb	r2, [r3, #8]
	DltDebugTmpBuf[9] = ((uint8_t *)&TempEcuId)[2];
 8001118:	7cba      	ldrb	r2, [r7, #18]
 800111a:	4b2c      	ldr	r3, [pc, #176]	@ (80011cc <PrepareHoleHeader+0x14c>)
 800111c:	725a      	strb	r2, [r3, #9]
	DltDebugTmpBuf[10] = ((uint8_t *)&TempEcuId)[1];
 800111e:	7c7a      	ldrb	r2, [r7, #17]
 8001120:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001122:	729a      	strb	r2, [r3, #10]
	DltDebugTmpBuf[11] = ((uint8_t *)&TempEcuId)[0];
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	781a      	ldrb	r2, [r3, #0]
 800112a:	4b28      	ldr	r3, [pc, #160]	@ (80011cc <PrepareHoleHeader+0x14c>)
 800112c:	72da      	strb	r2, [r3, #11]

	/*Time stamp*/
	DltDebugTmpBuf[12] = ((uint8_t *)&ActualTime)[3];
 800112e:	7dfa      	ldrb	r2, [r7, #23]
 8001130:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001132:	731a      	strb	r2, [r3, #12]
	DltDebugTmpBuf[13] = ((uint8_t *)&ActualTime)[2];
 8001134:	7dba      	ldrb	r2, [r7, #22]
 8001136:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001138:	735a      	strb	r2, [r3, #13]
	DltDebugTmpBuf[14] = ((uint8_t *)&ActualTime)[1];
 800113a:	7d7a      	ldrb	r2, [r7, #21]
 800113c:	4b23      	ldr	r3, [pc, #140]	@ (80011cc <PrepareHoleHeader+0x14c>)
 800113e:	739a      	strb	r2, [r3, #14]
	DltDebugTmpBuf[15] = ((uint8_t *)&ActualTime)[0];
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	781a      	ldrb	r2, [r3, #0]
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001148:	73da      	strb	r2, [r3, #15]

	/*Extended header --verbose | type serial*/
	//	DltDebugTmpBuf[16]= 0x41; /**/
	DltDebugTmpBuf[16] = (Level << 4) | 1;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	011b      	lsls	r3, r3, #4
 800114e:	b25b      	sxtb	r3, r3
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	b25b      	sxtb	r3, r3
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b1c      	ldr	r3, [pc, #112]	@ (80011cc <PrepareHoleHeader+0x14c>)
 800115a:	741a      	strb	r2, [r3, #16]

	/*Number of arguments*/
	DltDebugTmpBuf[17] = 0x01; /**/
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <PrepareHoleHeader+0x14c>)
 800115e:	2201      	movs	r2, #1
 8001160:	745a      	strb	r2, [r3, #17]

	/*App id */
	DltDebugTmpBuf[18] = ((uint8_t *)&AppId)[3];
 8001162:	7afa      	ldrb	r2, [r7, #11]
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001166:	749a      	strb	r2, [r3, #18]
	DltDebugTmpBuf[19] = ((uint8_t *)&AppId)[2];
 8001168:	7aba      	ldrb	r2, [r7, #10]
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <PrepareHoleHeader+0x14c>)
 800116c:	74da      	strb	r2, [r3, #19]
	DltDebugTmpBuf[20] = ((uint8_t *)&AppId)[1];
 800116e:	7a7a      	ldrb	r2, [r7, #9]
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001172:	751a      	strb	r2, [r3, #20]
	DltDebugTmpBuf[21] = ((uint8_t *)&AppId)[0];
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <PrepareHoleHeader+0x14c>)
 800117c:	755a      	strb	r2, [r3, #21]

	/*Contex ID  (4 bajty*/
	DltDebugTmpBuf[22] = ((uint8_t *)&ContextId)[3];
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001182:	759a      	strb	r2, [r3, #22]
	DltDebugTmpBuf[23] = ((uint8_t *)&ContextId)[2];
 8001184:	79ba      	ldrb	r2, [r7, #6]
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001188:	75da      	strb	r2, [r3, #23]
	DltDebugTmpBuf[24] = ((uint8_t *)&ContextId)[1];
 800118a:	797a      	ldrb	r2, [r7, #5]
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <PrepareHoleHeader+0x14c>)
 800118e:	761a      	strb	r2, [r3, #24]
	DltDebugTmpBuf[25] = ((uint8_t *)&ContextId)[0];
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <PrepareHoleHeader+0x14c>)
 8001196:	765a      	strb	r2, [r3, #25]

	/*Type info*/
	DltDebugTmpBuf[26] = 0x01; /**/
 8001198:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <PrepareHoleHeader+0x14c>)
 800119a:	2201      	movs	r2, #1
 800119c:	769a      	strb	r2, [r3, #26]
	DltDebugTmpBuf[27] = 0x82; /**/
 800119e:	4b0b      	ldr	r3, [pc, #44]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80011a0:	2282      	movs	r2, #130	@ 0x82
 80011a2:	76da      	strb	r2, [r3, #27]
	DltDebugTmpBuf[28] = 0x00; /**/
 80011a4:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	771a      	strb	r2, [r3, #28]
	DltDebugTmpBuf[29] = 0x00; /**/
 80011aa:	4b08      	ldr	r3, [pc, #32]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	775a      	strb	r2, [r3, #29]

	/*Argument 1*/
	DltDebugTmpBuf[30] = size; /*the size of the load in simplified form, but not exactly but generally yes*/
 80011b0:	89bb      	ldrh	r3, [r7, #12]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80011b6:	779a      	strb	r2, [r3, #30]
	DltDebugTmpBuf[31] = 0x00; /**/
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <PrepareHoleHeader+0x14c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	77da      	strb	r2, [r3, #31]
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200002b0 	.word	0x200002b0
 80011cc:	200002fc 	.word	0x200002fc
 80011d0:	200003fb 	.word	0x200003fb

080011d4 <DLTuc_RawDataReceiveDone>:
 * exported functions description is added in header file
 *****************************************************************************************************
 */

void DLTuc_RawDataReceiveDone(uint16_t Size)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b08d      	sub	sp, #52	@ 0x34
 80011d8:	af02      	add	r7, sp, #8
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
	static uint8_t *MessageReceiveBufferAddress;
	DLT_RB_Receive_GetNextMessageAddress(&BleMainReceiveRingBuffer, &MessageReceiveBufferAddress);
 80011de:	4994      	ldr	r1, [pc, #592]	@ (8001430 <DLTuc_RawDataReceiveDone+0x25c>)
 80011e0:	4894      	ldr	r0, [pc, #592]	@ (8001434 <DLTuc_RawDataReceiveDone+0x260>)
 80011e2:	f7ff fe3b 	bl	8000e5c <DLT_RB_Receive_GetNextMessageAddress>
	if (ExtSerialRecDataFunctionCb != NULL)
 80011e6:	4b94      	ldr	r3, [pc, #592]	@ (8001438 <DLTuc_RawDataReceiveDone+0x264>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d006      	beq.n	80011fc <DLTuc_RawDataReceiveDone+0x28>
	{
		ExtSerialRecDataFunctionCb(MessageReceiveBufferAddress, DLT_REC_SINGLE_MESSAGE_MAX_SIZE);
 80011ee:	4b92      	ldr	r3, [pc, #584]	@ (8001438 <DLTuc_RawDataReceiveDone+0x264>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a8f      	ldr	r2, [pc, #572]	@ (8001430 <DLTuc_RawDataReceiveDone+0x25c>)
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	21ff      	movs	r1, #255	@ 0xff
 80011f8:	4610      	mov	r0, r2
 80011fa:	4798      	blx	r3
	}

	uint8_t *MessageToRead_p = NULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
	uint8_t MessageToReadSize = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	72fb      	strb	r3, [r7, #11]
	 * The receive buffer isn't handled fully correctly, it require deeper investigation
	 * However, it is possible to receive the Injection messages, and base commands if are transmitted with breakes..
	 * Received DTL messages are divided by the "IDLE" irq for now.., not by the size and etc...
	 *
	 */
	if (DLT_RB_Receive_Read(&BleMainReceiveRingBuffer, &MessageToReadSize, &MessageToRead_p) == RB_OK)
 8001204:	f107 020c 	add.w	r2, r7, #12
 8001208:	f107 030b 	add.w	r3, r7, #11
 800120c:	4619      	mov	r1, r3
 800120e:	4889      	ldr	r0, [pc, #548]	@ (8001434 <DLTuc_RawDataReceiveDone+0x260>)
 8001210:	f7ff fe64 	bl	8000edc <DLT_RB_Receive_Read>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	f040 8106 	bne.w	8001428 <DLTuc_RawDataReceiveDone+0x254>
	{
		if (MessageToRead_p[4] == 53)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3304      	adds	r3, #4
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b35      	cmp	r3, #53	@ 0x35
 8001224:	f040 8100 	bne.w	8001428 <DLTuc_RawDataReceiveDone+0x254>
			[18-21] - AppId
			[22-25] - ContexId
			[26-29] - ServiceId
			[30-33] - Size*/

			uint32_t AppId = MessageToRead_p[21] << 24 | MessageToRead_p[20] << 16 | MessageToRead_p[19] << 8 | MessageToRead_p[18] << 0;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3315      	adds	r3, #21
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	061a      	lsls	r2, r3, #24
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3314      	adds	r3, #20
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	041b      	lsls	r3, r3, #16
 8001238:	431a      	orrs	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3313      	adds	r3, #19
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	4313      	orrs	r3, r2
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	3212      	adds	r2, #18
 8001248:	7812      	ldrb	r2, [r2, #0]
 800124a:	4313      	orrs	r3, r2
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
			uint32_t RecContexId = MessageToRead_p[25] << 24 | MessageToRead_p[24] << 16 | MessageToRead_p[23] << 8 | MessageToRead_p[22] << 0;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3319      	adds	r3, #25
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	061a      	lsls	r2, r3, #24
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3318      	adds	r3, #24
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	041b      	lsls	r3, r3, #16
 800125e:	431a      	orrs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	3317      	adds	r3, #23
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	4313      	orrs	r3, r2
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	3216      	adds	r2, #22
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	4313      	orrs	r3, r2
 8001272:	623b      	str	r3, [r7, #32]
			uint32_t RecServiceId = MessageToRead_p[29] << 24 | MessageToRead_p[28] << 16 | MessageToRead_p[27] << 8 | MessageToRead_p[26] << 0;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	331d      	adds	r3, #29
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	061a      	lsls	r2, r3, #24
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	331c      	adds	r3, #28
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	431a      	orrs	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	331b      	adds	r3, #27
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	4313      	orrs	r3, r2
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	321a      	adds	r2, #26
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	4313      	orrs	r3, r2
 8001298:	61fb      	str	r3, [r7, #28]

			if (RecServiceId >= DLT_SERVICE_ID_CALLSW_CINJECTION)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d925      	bls.n	80012f0 <DLTuc_RawDataReceiveDone+0x11c>
			{
				if (NULL != ExtInfoInjectionDataRcvdCb)
 80012a4:	4b65      	ldr	r3, [pc, #404]	@ (800143c <DLTuc_RawDataReceiveDone+0x268>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 80bd 	beq.w	8001428 <DLTuc_RawDataReceiveDone+0x254>
				{
					/*MSB LSB, wtf..?, it is somehow mixed? */
					uint32_t DltDatSize = MessageToRead_p[33] << 24 | MessageToRead_p[32] << 16 | MessageToRead_p[31] << 8 | MessageToRead_p[30] << 0;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3321      	adds	r3, #33	@ 0x21
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	061a      	lsls	r2, r3, #24
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3320      	adds	r3, #32
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	041b      	lsls	r3, r3, #16
 80012be:	431a      	orrs	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	331f      	adds	r3, #31
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	4313      	orrs	r3, r2
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	321e      	adds	r2, #30
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]

					ExtInfoInjectionDataRcvdCb(AppId, RecContexId, RecServiceId, &MessageToRead_p[34], (uint16_t)DltDatSize);
 80012d4:	4b59      	ldr	r3, [pc, #356]	@ (800143c <DLTuc_RawDataReceiveDone+0x268>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	4613      	mov	r3, r2
 80012e6:	69fa      	ldr	r2, [r7, #28]
 80012e8:	6a39      	ldr	r1, [r7, #32]
 80012ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80012ec:	47a0      	blx	r4
			{
				LOG("Default log level: %d", DLT_LOG_ENABLE_LEVEL);
			}
		}
	}
}
 80012ee:	e09b      	b.n	8001428 <DLTuc_RawDataReceiveDone+0x254>
			else if (RecServiceId == DLT_SERVICE_ID_SET_LOG_LEVEL)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d11f      	bne.n	8001336 <DLTuc_RawDataReceiveDone+0x162>
				uint32_t NewLogLevel = MessageToRead_p[30];
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	331e      	adds	r3, #30
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	617b      	str	r3, [r7, #20]
				LOG("Set new log level request: %d How you triggered it?? , not supported", NewLogLevel);
 80012fe:	2330      	movs	r3, #48	@ 0x30
 8001300:	061a      	lsls	r2, r3, #24
 8001302:	2330      	movs	r3, #48	@ 0x30
 8001304:	041b      	lsls	r3, r3, #16
 8001306:	431a      	orrs	r2, r3
 8001308:	2330      	movs	r3, #48	@ 0x30
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	4313      	orrs	r3, r2
 800130e:	2230      	movs	r2, #48	@ 0x30
 8001310:	ea43 0102 	orr.w	r1, r3, r2
 8001314:	2344      	movs	r3, #68	@ 0x44
 8001316:	061a      	lsls	r2, r3, #24
 8001318:	2346      	movs	r3, #70	@ 0x46
 800131a:	041b      	lsls	r3, r3, #16
 800131c:	431a      	orrs	r2, r3
 800131e:	234c      	movs	r3, #76	@ 0x4c
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	4313      	orrs	r3, r2
 8001324:	2254      	movs	r2, #84	@ 0x54
 8001326:	431a      	orrs	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	4b44      	ldr	r3, [pc, #272]	@ (8001440 <DLTuc_RawDataReceiveDone+0x26c>)
 800132e:	2004      	movs	r0, #4
 8001330:	f000 f956 	bl	80015e0 <DLTuc_LogOutVarArgs>
}
 8001334:	e078      	b.n	8001428 <DLTuc_RawDataReceiveDone+0x254>
			else if (RecServiceId == DLT_SERVICE_ID_SET_DEFAULT_LOG_LEVEL)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	2b11      	cmp	r3, #17
 800133a:	d138      	bne.n	80013ae <DLTuc_RawDataReceiveDone+0x1da>
				uint32_t NewLogLevel = MessageToRead_p[30];
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	331e      	adds	r3, #30
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	61bb      	str	r3, [r7, #24]
				LOG("Set default log level request: %d", NewLogLevel);
 8001344:	2330      	movs	r3, #48	@ 0x30
 8001346:	061a      	lsls	r2, r3, #24
 8001348:	2330      	movs	r3, #48	@ 0x30
 800134a:	041b      	lsls	r3, r3, #16
 800134c:	431a      	orrs	r2, r3
 800134e:	2330      	movs	r3, #48	@ 0x30
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	4313      	orrs	r3, r2
 8001354:	2230      	movs	r2, #48	@ 0x30
 8001356:	ea43 0102 	orr.w	r1, r3, r2
 800135a:	2344      	movs	r3, #68	@ 0x44
 800135c:	061a      	lsls	r2, r3, #24
 800135e:	2346      	movs	r3, #70	@ 0x46
 8001360:	041b      	lsls	r3, r3, #16
 8001362:	431a      	orrs	r2, r3
 8001364:	234c      	movs	r3, #76	@ 0x4c
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	4313      	orrs	r3, r2
 800136a:	2254      	movs	r2, #84	@ 0x54
 800136c:	431a      	orrs	r2, r3
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <DLTuc_RawDataReceiveDone+0x270>)
 8001374:	2004      	movs	r0, #4
 8001376:	f000 f933 	bl	80015e0 <DLTuc_LogOutVarArgs>
				LOG("Not supported yet, I'm too lazy :)");
 800137a:	2330      	movs	r3, #48	@ 0x30
 800137c:	061a      	lsls	r2, r3, #24
 800137e:	2330      	movs	r3, #48	@ 0x30
 8001380:	041b      	lsls	r3, r3, #16
 8001382:	431a      	orrs	r2, r3
 8001384:	2330      	movs	r3, #48	@ 0x30
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	4313      	orrs	r3, r2
 800138a:	2230      	movs	r2, #48	@ 0x30
 800138c:	ea43 0102 	orr.w	r1, r3, r2
 8001390:	2344      	movs	r3, #68	@ 0x44
 8001392:	061a      	lsls	r2, r3, #24
 8001394:	2346      	movs	r3, #70	@ 0x46
 8001396:	041b      	lsls	r3, r3, #16
 8001398:	431a      	orrs	r2, r3
 800139a:	234c      	movs	r3, #76	@ 0x4c
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	4313      	orrs	r3, r2
 80013a0:	2254      	movs	r2, #84	@ 0x54
 80013a2:	431a      	orrs	r2, r3
 80013a4:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <DLTuc_RawDataReceiveDone+0x274>)
 80013a6:	2004      	movs	r0, #4
 80013a8:	f000 f91a 	bl	80015e0 <DLTuc_LogOutVarArgs>
}
 80013ac:	e03c      	b.n	8001428 <DLTuc_RawDataReceiveDone+0x254>
			else if (DLT_SERVICE_ID_GET_SOFTWARE_VERSION == RecServiceId)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	2b13      	cmp	r3, #19
 80013b2:	d11b      	bne.n	80013ec <DLTuc_RawDataReceiveDone+0x218>
				LOG("ECU_SW_VERSION: %d", DLT_ECU_SW_VER);
 80013b4:	2330      	movs	r3, #48	@ 0x30
 80013b6:	061a      	lsls	r2, r3, #24
 80013b8:	2330      	movs	r3, #48	@ 0x30
 80013ba:	041b      	lsls	r3, r3, #16
 80013bc:	431a      	orrs	r2, r3
 80013be:	2330      	movs	r3, #48	@ 0x30
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	4313      	orrs	r3, r2
 80013c4:	2230      	movs	r2, #48	@ 0x30
 80013c6:	ea43 0102 	orr.w	r1, r3, r2
 80013ca:	2344      	movs	r3, #68	@ 0x44
 80013cc:	061a      	lsls	r2, r3, #24
 80013ce:	2346      	movs	r3, #70	@ 0x46
 80013d0:	041b      	lsls	r3, r3, #16
 80013d2:	431a      	orrs	r2, r3
 80013d4:	234c      	movs	r3, #76	@ 0x4c
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	4313      	orrs	r3, r2
 80013da:	2254      	movs	r2, #84	@ 0x54
 80013dc:	431a      	orrs	r2, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <DLTuc_RawDataReceiveDone+0x278>)
 80013e4:	2004      	movs	r0, #4
 80013e6:	f000 f8fb 	bl	80015e0 <DLTuc_LogOutVarArgs>
}
 80013ea:	e01d      	b.n	8001428 <DLTuc_RawDataReceiveDone+0x254>
			else if (DLT_SERVICE_ID_GET_DEFAULT_LOG_LEVEL == RecServiceId)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d11a      	bne.n	8001428 <DLTuc_RawDataReceiveDone+0x254>
				LOG("Default log level: %d", DLT_LOG_ENABLE_LEVEL);
 80013f2:	2330      	movs	r3, #48	@ 0x30
 80013f4:	061a      	lsls	r2, r3, #24
 80013f6:	2330      	movs	r3, #48	@ 0x30
 80013f8:	041b      	lsls	r3, r3, #16
 80013fa:	431a      	orrs	r2, r3
 80013fc:	2330      	movs	r3, #48	@ 0x30
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	4313      	orrs	r3, r2
 8001402:	2230      	movs	r2, #48	@ 0x30
 8001404:	ea43 0102 	orr.w	r1, r3, r2
 8001408:	2344      	movs	r3, #68	@ 0x44
 800140a:	061a      	lsls	r2, r3, #24
 800140c:	2346      	movs	r3, #70	@ 0x46
 800140e:	041b      	lsls	r3, r3, #16
 8001410:	431a      	orrs	r2, r3
 8001412:	234c      	movs	r3, #76	@ 0x4c
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	4313      	orrs	r3, r2
 8001418:	2254      	movs	r2, #84	@ 0x54
 800141a:	431a      	orrs	r2, r3
 800141c:	2306      	movs	r3, #6
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <DLTuc_RawDataReceiveDone+0x27c>)
 8001422:	2004      	movs	r0, #4
 8001424:	f000 f8dc 	bl	80015e0 <DLTuc_LogOutVarArgs>
}
 8001428:	bf00      	nop
 800142a:	372c      	adds	r7, #44	@ 0x2c
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	20001520 	.word	0x20001520
 8001434:	20001304 	.word	0x20001304
 8001438:	200002a8 	.word	0x200002a8
 800143c:	200002ac 	.word	0x200002ac
 8001440:	0800a150 	.word	0x0800a150
 8001444:	0800a198 	.word	0x0800a198
 8001448:	0800a1bc 	.word	0x0800a1bc
 800144c:	0800a1e0 	.word	0x0800a1e0
 8001450:	0800a1f4 	.word	0x0800a1f4

08001454 <DLTuc_RegisterInjectionDataReceivedCb>:

void DLTuc_RegisterInjectionDataReceivedCb(
	void InjectionDataRcvd(uint32_t AppId, uint32_t ConId, uint32_t ServId, uint8_t *Data, uint16_t Size))
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	ExtInfoInjectionDataRcvdCb = InjectionDataRcvd;
 800145c:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <DLTuc_RegisterInjectionDataReceivedCb+0x1c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200002ac 	.word	0x200002ac

08001474 <DLTuc_RegisterReceiveSerialDataFunction>:

void DLTuc_RegisterReceiveSerialDataFunction(void LLSerialRecDataFunctionC(uint8_t *DltLogData, uint16_t Size))
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	ExtSerialRecDataFunctionCb = LLSerialRecDataFunctionC;
 800147c:	4a07      	ldr	r2, [pc, #28]	@ (800149c <DLTuc_RegisterReceiveSerialDataFunction+0x28>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]

	if (ExtSerialRecDataFunctionCb != NULL)
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <DLTuc_RegisterReceiveSerialDataFunction+0x28>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <DLTuc_RegisterReceiveSerialDataFunction+0x20>
	{
		ExtSerialRecDataFunctionCb(&BluMainReceiveMessagesTab[0][0], DLT_REC_SINGLE_MESSAGE_MAX_SIZE);
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <DLTuc_RegisterReceiveSerialDataFunction+0x28>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	21ff      	movs	r1, #255	@ 0xff
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <DLTuc_RegisterReceiveSerialDataFunction+0x2c>)
 8001492:	4798      	blx	r3
	}
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200002a8 	.word	0x200002a8
 80014a0:	2000130c 	.word	0x2000130c

080014a4 <DLTuc_RegisterTransmitSerialDataFunction>:

void DLTuc_RegisterTransmitSerialDataFunction(void LLSerialTrDataFunctionC(uint8_t *DltLogData, uint8_t Size))
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	ExtSerialTrDataFunctionCb = LLSerialTrDataFunctionC;
 80014ac:	4a19      	ldr	r2, [pc, #100]	@ (8001514 <DLTuc_RegisterTransmitSerialDataFunction+0x70>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]

	/*Preapre LOG DROPPED Info Log*/
	PrepareHoleHeader(DL_ERROR, 0x444C5443, 0x444C5443, sizeof(DltLogDroppedInfo));
 80014b2:	230f      	movs	r3, #15
 80014b4:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <DLTuc_RegisterTransmitSerialDataFunction+0x74>)
 80014b6:	4918      	ldr	r1, [pc, #96]	@ (8001518 <DLTuc_RegisterTransmitSerialDataFunction+0x74>)
 80014b8:	2002      	movs	r0, #2
 80014ba:	f7ff fde1 	bl	8001080 <PrepareHoleHeader>

	/*Payload!!!*/
	/*Copy payload text temporary*/
	for (int i = DLT_ACT_HOLE_HEADER_SIZE; i < (sizeof(DltLogDroppedInfo) + DLT_ACT_HOLE_HEADER_SIZE); i++)
 80014be:	2320      	movs	r3, #32
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	e00b      	b.n	80014dc <DLTuc_RegisterTransmitSerialDataFunction+0x38>
	{
		DltDebugTmpBuf[i] = DltLogDroppedInfo[i - DLT_ACT_HOLE_HEADER_SIZE];
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3b20      	subs	r3, #32
 80014c8:	4a14      	ldr	r2, [pc, #80]	@ (800151c <DLTuc_RegisterTransmitSerialDataFunction+0x78>)
 80014ca:	5cd1      	ldrb	r1, [r2, r3]
 80014cc:	4a14      	ldr	r2, [pc, #80]	@ (8001520 <DLTuc_RegisterTransmitSerialDataFunction+0x7c>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	460a      	mov	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	for (int i = DLT_ACT_HOLE_HEADER_SIZE; i < (sizeof(DltLogDroppedInfo) + DLT_ACT_HOLE_HEADER_SIZE); i++)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3301      	adds	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b2e      	cmp	r3, #46	@ 0x2e
 80014e0:	d9f0      	bls.n	80014c4 <DLTuc_RegisterTransmitSerialDataFunction+0x20>
	}

	for (int i = 0; i < sizeof(DltLogDroppedInfoBuffer); i++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	e00b      	b.n	8001500 <DLTuc_RegisterTransmitSerialDataFunction+0x5c>
	{
		DltLogDroppedInfoBuffer[i] = DltDebugTmpBuf[i];
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <DLTuc_RegisterTransmitSerialDataFunction+0x7c>)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	7819      	ldrb	r1, [r3, #0]
 80014f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001524 <DLTuc_RegisterTransmitSerialDataFunction+0x80>)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4413      	add	r3, r2
 80014f6:	460a      	mov	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < sizeof(DltLogDroppedInfoBuffer); i++)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3301      	adds	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b3b      	cmp	r3, #59	@ 0x3b
 8001504:	d9f0      	bls.n	80014e8 <DLTuc_RegisterTransmitSerialDataFunction+0x44>
	}

	DLtLogDroppedSize = DLT_ACT_HOLE_HEADER_SIZE + sizeof(DltLogDroppedInfo);
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <DLTuc_RegisterTransmitSerialDataFunction+0x84>)
 8001508:	222f      	movs	r2, #47	@ 0x2f
 800150a:	701a      	strb	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200002a4 	.word	0x200002a4
 8001518:	444c5443 	.word	0x444c5443
 800151c:	20000000 	.word	0x20000000
 8001520:	200002fc 	.word	0x200002fc
 8001524:	200002bc 	.word	0x200002bc
 8001528:	200002f8 	.word	0x200002f8

0800152c <DLTuc_MessageTransmitDone>:
/******************************************************************************************/
void DLTuc_MessageTransmitDone(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
	uint8_t TmpMessageSize = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	72fb      	strb	r3, [r7, #11]
	uint8_t *TmpMessagePointer = NULL;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
	uint32_t ActualSysTime = 0u;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]

	if (GetSystemTimeMs != NULL)
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <DLTuc_MessageTransmitDone+0x94>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <DLTuc_MessageTransmitDone+0x22>
	{
		ActualSysTime = GetSystemTimeMs();
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <DLTuc_MessageTransmitDone+0x94>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4798      	blx	r3
 800154c:	60f8      	str	r0, [r7, #12]
	}

	if (LogDroppedFlag == true && (ActualSysTime - PrevLogDropSendTime > 200))
 800154e:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <DLTuc_MessageTransmitDone+0x98>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d017      	beq.n	8001586 <DLTuc_MessageTransmitDone+0x5a>
 8001556:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <DLTuc_MessageTransmitDone+0x9c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2bc8      	cmp	r3, #200	@ 0xc8
 8001560:	d911      	bls.n	8001586 <DLTuc_MessageTransmitDone+0x5a>
	{
		/* If DLTuc will always send the DROP Message info,
		 * then will not read any message from RB..*/
		PrevLogDropSendTime = ActualSysTime;
 8001562:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <DLTuc_MessageTransmitDone+0x9c>)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6013      	str	r3, [r2, #0]
		LogDroppedFlag = false;
 8001568:	4b16      	ldr	r3, [pc, #88]	@ (80015c4 <DLTuc_MessageTransmitDone+0x98>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]

		if (ExtSerialTrDataFunctionCb != NULL)
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <DLTuc_MessageTransmitDone+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d020      	beq.n	80015b8 <DLTuc_MessageTransmitDone+0x8c>
		{
			ExtSerialTrDataFunctionCb(DltLogDroppedInfoBuffer, DLtLogDroppedSize);
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <DLTuc_MessageTransmitDone+0xa0>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <DLTuc_MessageTransmitDone+0xa4>)
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	4611      	mov	r1, r2
 8001580:	4814      	ldr	r0, [pc, #80]	@ (80015d4 <DLTuc_MessageTransmitDone+0xa8>)
 8001582:	4798      	blx	r3
 8001584:	e019      	b.n	80015ba <DLTuc_MessageTransmitDone+0x8e>
		}
		return;
	}
	DLTuc_OS_CRITICAL_START();
	if (DLT_RB_TransmitRead(&DltTrsmtRingBuffer, &TmpMessageSize, &TmpMessagePointer) == RB_OK)
 8001586:	1d3a      	adds	r2, r7, #4
 8001588:	f107 030b 	add.w	r3, r7, #11
 800158c:	4619      	mov	r1, r3
 800158e:	4812      	ldr	r0, [pc, #72]	@ (80015d8 <DLTuc_MessageTransmitDone+0xac>)
 8001590:	f7ff fcec 	bl	8000f6c <DLT_RB_TransmitRead>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10a      	bne.n	80015b0 <DLTuc_MessageTransmitDone+0x84>
	{
		if (ExtSerialTrDataFunctionCb != NULL)
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <DLTuc_MessageTransmitDone+0xa0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <DLTuc_MessageTransmitDone+0x8e>
		{
			DLTuc_OS_CRITICAL_END();
			ExtSerialTrDataFunctionCb(TmpMessagePointer, TmpMessageSize);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <DLTuc_MessageTransmitDone+0xa0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	7af9      	ldrb	r1, [r7, #11]
 80015aa:	4610      	mov	r0, r2
 80015ac:	4798      	blx	r3
 80015ae:	e004      	b.n	80015ba <DLTuc_MessageTransmitDone+0x8e>
		}
	}
	else
	{
		TransmitReadyStateFlag = true;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <DLTuc_MessageTransmitDone+0xb0>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	e000      	b.n	80015ba <DLTuc_MessageTransmitDone+0x8e>
		return;
 80015b8:	bf00      	nop
	}
	DLTuc_OS_CRITICAL_END();
}
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200002b0 	.word	0x200002b0
 80015c4:	200002b4 	.word	0x200002b4
 80015c8:	200002b8 	.word	0x200002b8
 80015cc:	200002a4 	.word	0x200002a4
 80015d0:	200002f8 	.word	0x200002f8
 80015d4:	200002bc 	.word	0x200002bc
 80015d8:	200003fc 	.word	0x200003fc
 80015dc:	2000000f 	.word	0x2000000f

080015e0 <DLTuc_LogOutVarArgs>:

/******************************************************************************************/
void DLTuc_LogOutVarArgs(DltLogLevel_t Level, uint32_t AppId, uint32_t ContextId, uint8_t *Payload, ...)
{
 80015e0:	b408      	push	{r3}
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b089      	sub	sp, #36	@ 0x24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	4603      	mov	r3, r0
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	73fb      	strb	r3, [r7, #15]
	va_list ap;
	uint16_t Size;

	va_start(ap, Payload);
 80015f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015f4:	61bb      	str	r3, [r7, #24]
	Size = vsprintf((char *)DltDebugTmpBuf + DLT_ACT_HOLE_HEADER_SIZE, (char *)Payload, ap);
 80015f6:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <DLTuc_LogOutVarArgs+0xc4>)
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 fa01 	bl	8007a04 <vsiprintf>
 8001602:	4603      	mov	r3, r0
 8001604:	83fb      	strh	r3, [r7, #30]
	va_end(ap);

	/*Additional zero on the end of message - thanks to that it works with more stability */
	Size++;
 8001606:	8bfb      	ldrh	r3, [r7, #30]
 8001608:	3301      	adds	r3, #1
 800160a:	83fb      	strh	r3, [r7, #30]
	DltDebugTmpBuf[DLT_ACT_HOLE_HEADER_SIZE + Size] = 0x00;
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	3320      	adds	r3, #32
 8001610:	4a25      	ldr	r2, [pc, #148]	@ (80016a8 <DLTuc_LogOutVarArgs+0xc8>)
 8001612:	2100      	movs	r1, #0
 8001614:	54d1      	strb	r1, [r2, r3]
	Size++;
 8001616:	8bfb      	ldrh	r3, [r7, #30]
 8001618:	3301      	adds	r3, #1
 800161a:	83fb      	strh	r3, [r7, #30]
	DltDebugTmpBuf[DLT_ACT_HOLE_HEADER_SIZE + Size] = 0x00;
 800161c:	8bfb      	ldrh	r3, [r7, #30]
 800161e:	3320      	adds	r3, #32
 8001620:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <DLTuc_LogOutVarArgs+0xc8>)
 8001622:	2100      	movs	r1, #0
 8001624:	54d1      	strb	r1, [r2, r3]

	PrepareHoleHeader(Level, AppId, ContextId, Size);
 8001626:	8bfb      	ldrh	r3, [r7, #30]
 8001628:	7bf8      	ldrb	r0, [r7, #15]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	f7ff fd27 	bl	8001080 <PrepareHoleHeader>
	Size = Size + DLT_ACT_HOLE_HEADER_SIZE;
 8001632:	8bfb      	ldrh	r3, [r7, #30]
 8001634:	3320      	adds	r3, #32
 8001636:	83fb      	strh	r3, [r7, #30]

	if (DLT_RB_TransmitWrite(&DltTrsmtRingBuffer, DltDebugTmpBuf, Size) != RB_OK)
 8001638:	8bfb      	ldrh	r3, [r7, #30]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	461a      	mov	r2, r3
 800163e:	491a      	ldr	r1, [pc, #104]	@ (80016a8 <DLTuc_LogOutVarArgs+0xc8>)
 8001640:	481a      	ldr	r0, [pc, #104]	@ (80016ac <DLTuc_LogOutVarArgs+0xcc>)
 8001642:	f7ff fccf 	bl	8000fe4 <DLT_RB_TransmitWrite>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <DLTuc_LogOutVarArgs+0x72>
	{
		DLTuc_OS_CRITICAL_START();
		LogDroppedFlag = true;
 800164c:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <DLTuc_LogOutVarArgs+0xd0>)
 800164e:	2201      	movs	r2, #1
 8001650:	701a      	strb	r2, [r3, #0]
		DLTuc_OS_CRITICAL_END();
	}

	uint8_t TmpMessageSize = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
	uint8_t *TmpMessagePointer = NULL;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]

	DLTuc_OS_CRITICAL_START();
	if (TransmitReadyStateFlag == true)
 800165a:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <DLTuc_LogOutVarArgs+0xd4>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d117      	bne.n	8001694 <DLTuc_LogOutVarArgs+0xb4>
	{
		if (DLT_RB_TransmitRead(&DltTrsmtRingBuffer, &TmpMessageSize, &TmpMessagePointer) == RB_OK)
 8001664:	f107 0210 	add.w	r2, r7, #16
 8001668:	f107 0317 	add.w	r3, r7, #23
 800166c:	4619      	mov	r1, r3
 800166e:	480f      	ldr	r0, [pc, #60]	@ (80016ac <DLTuc_LogOutVarArgs+0xcc>)
 8001670:	f7ff fc7c 	bl	8000f6c <DLT_RB_TransmitRead>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10c      	bne.n	8001694 <DLTuc_LogOutVarArgs+0xb4>
		{
			TransmitReadyStateFlag = false;
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <DLTuc_LogOutVarArgs+0xd4>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
			DLTuc_OS_CRITICAL_END(); /*Log transmission must be started in this contex...*/
									 /*It's important to be aware of this fact!!*/
									 /*In this library, for sure you may find some bugs..*/
			if (ExtSerialTrDataFunctionCb != NULL)
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <DLTuc_LogOutVarArgs+0xd8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <DLTuc_LogOutVarArgs+0xb4>
			{
				ExtSerialTrDataFunctionCb(TmpMessagePointer, TmpMessageSize);
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <DLTuc_LogOutVarArgs+0xd8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	7df9      	ldrb	r1, [r7, #23]
 8001690:	4610      	mov	r0, r2
 8001692:	4798      	blx	r3
				// while(1); /*Please Register the callback...*/
			}
		}
	}
	DLTuc_OS_CRITICAL_END();
}
 8001694:	bf00      	nop
 8001696:	3724      	adds	r7, #36	@ 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800169e:	b001      	add	sp, #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	2000031c 	.word	0x2000031c
 80016a8:	200002fc 	.word	0x200002fc
 80016ac:	200003fc 	.word	0x200003fc
 80016b0:	200002b4 	.word	0x200002b4
 80016b4:	2000000f 	.word	0x2000000f
 80016b8:	200002a4 	.word	0x200002a4

080016bc <DLTuc_RegisterGetTimeStampMsCallback>:

/******************************************************************************************/
void DLTuc_RegisterGetTimeStampMsCallback(uint32_t GetSysTime(void))
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	GetSystemTimeMs = GetSysTime;
 80016c4:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <DLTuc_RegisterGetTimeStampMsCallback+0x1c>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6013      	str	r3, [r2, #0]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	200002b0 	.word	0x200002b0

080016dc <Dem_SetEventStatus>:
#include "Dem.h"

Std_ReturnType Dem_SetEventStatus(Dem_EventIdType EventId, Dem_EventStatusType EventStatus)
{
 80016dc:	b5b0      	push	{r4, r5, r7, lr}
 80016de:	b0cc      	sub	sp, #304	@ 0x130
 80016e0:	af06      	add	r7, sp, #24
 80016e2:	4602      	mov	r2, r0
 80016e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80016e8:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 80016ec:	801a      	strh	r2, [r3, #0]
 80016ee:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80016f2:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 80016f6:	460a      	mov	r2, r1
 80016f8:	701a      	strb	r2, [r3, #0]
    LOGF(DL_DEBUG, "Operation started!");
 80016fa:	2330      	movs	r3, #48	@ 0x30
 80016fc:	061a      	lsls	r2, r3, #24
 80016fe:	2330      	movs	r3, #48	@ 0x30
 8001700:	041b      	lsls	r3, r3, #16
 8001702:	431a      	orrs	r2, r3
 8001704:	2330      	movs	r3, #48	@ 0x30
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	4313      	orrs	r3, r2
 800170a:	2230      	movs	r2, #48	@ 0x30
 800170c:	ea43 0102 	orr.w	r1, r3, r2
 8001710:	2344      	movs	r3, #68	@ 0x44
 8001712:	061a      	lsls	r2, r3, #24
 8001714:	2345      	movs	r3, #69	@ 0x45
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	431a      	orrs	r2, r3
 800171a:	234d      	movs	r3, #77	@ 0x4d
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	4313      	orrs	r3, r2
 8001720:	2200      	movs	r2, #0
 8001722:	431a      	orrs	r2, r3
 8001724:	4b86      	ldr	r3, [pc, #536]	@ (8001940 <Dem_SetEventStatus+0x264>)
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	4b86      	ldr	r3, [pc, #536]	@ (8001944 <Dem_SetEventStatus+0x268>)
 800172a:	2005      	movs	r0, #5
 800172c:	f7ff ff58 	bl	80015e0 <DLTuc_LogOutVarArgs>
    struct event event;
    const void *pointerToData;
    uint8_t data[4] = {0};
 8001730:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001734:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
    if (EventStatus == DEM_EVENT_STATUS_FAILED)
 800173c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001740:	f2a3 1313 	subw	r3, r3, #275	@ 0x113
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	f040 80d5 	bne.w	80018f6 <Dem_SetEventStatus+0x21a>
    {
        switch (EventId)
 800174c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001750:	f5a3 7389 	sub.w	r3, r3, #274	@ 0x112
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <Dem_SetEventStatus+0x84>
 800175a:	2b01      	cmp	r3, #1
 800175c:	d00d      	beq.n	800177a <Dem_SetEventStatus+0x9e>
 800175e:	e019      	b.n	8001794 <Dem_SetEventStatus+0xb8>
        {
        case OVER_VOLTAGE_ID:
        	event = overVoltage;
 8001760:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001764:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001768:	4a77      	ldr	r2, [pc, #476]	@ (8001948 <Dem_SetEventStatus+0x26c>)
 800176a:	4618      	mov	r0, r3
 800176c:	4611      	mov	r1, r2
 800176e:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001772:	461a      	mov	r2, r3
 8001774:	f006 f9cb 	bl	8007b0e <memcpy>
        	break;
 8001778:	e00c      	b.n	8001794 <Dem_SetEventStatus+0xb8>

        case UNDER_VOLTAGE_ID:
        	event = underVoltage;
 800177a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800177e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001782:	4a72      	ldr	r2, [pc, #456]	@ (800194c <Dem_SetEventStatus+0x270>)
 8001784:	4618      	mov	r0, r3
 8001786:	4611      	mov	r1, r2
 8001788:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800178c:	461a      	mov	r2, r3
 800178e:	f006 f9be 	bl	8007b0e <memcpy>
        	break;
 8001792:	bf00      	nop
        }
        LOGF(DL_DEBUG, "Got %s notification!", event.EventName);
 8001794:	2330      	movs	r3, #48	@ 0x30
 8001796:	061a      	lsls	r2, r3, #24
 8001798:	2330      	movs	r3, #48	@ 0x30
 800179a:	041b      	lsls	r3, r3, #16
 800179c:	431a      	orrs	r2, r3
 800179e:	2330      	movs	r3, #48	@ 0x30
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	4313      	orrs	r3, r2
 80017a4:	2230      	movs	r2, #48	@ 0x30
 80017a6:	ea43 0102 	orr.w	r1, r3, r2
 80017aa:	2344      	movs	r3, #68	@ 0x44
 80017ac:	061a      	lsls	r2, r3, #24
 80017ae:	2345      	movs	r3, #69	@ 0x45
 80017b0:	041b      	lsls	r3, r3, #16
 80017b2:	431a      	orrs	r2, r3
 80017b4:	234d      	movs	r3, #77	@ 0x4d
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	4313      	orrs	r3, r2
 80017ba:	2200      	movs	r2, #0
 80017bc:	431a      	orrs	r2, r3
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001940 <Dem_SetEventStatus+0x264>)
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	4b61      	ldr	r3, [pc, #388]	@ (8001950 <Dem_SetEventStatus+0x274>)
 80017ca:	2005      	movs	r0, #5
 80017cc:	f7ff ff08 	bl	80015e0 <DLTuc_LogOutVarArgs>
        event.EventStatus = EventStatus;
 80017d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017d4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017d8:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80017dc:	f2a2 1213 	subw	r2, r2, #275	@ 0x113
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
        data[0] = event.EventId;
 80017e6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017ee:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80017f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80017fc:	701a      	strb	r2, [r3, #0]
        data[1] = event.EventStatus;
 80017fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001802:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001806:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 800180a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800180e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001812:	705a      	strb	r2, [r3, #1]
        data[2] = 0xff;
 8001814:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001818:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800181c:	22ff      	movs	r2, #255	@ 0xff
 800181e:	709a      	strb	r2, [r3, #2]
        data[3] = 0xff;
 8001820:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001824:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001828:	22ff      	movs	r2, #255	@ 0xff
 800182a:	70da      	strb	r2, [r3, #3]
        pointerToData = &data;
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        LOGF(DL_DEBUG, "Operation succeeded! Data passed to write: %x %x %x %x", data[0], data[1], data[2], data[3]);
 8001834:	2330      	movs	r3, #48	@ 0x30
 8001836:	061a      	lsls	r2, r3, #24
 8001838:	2330      	movs	r3, #48	@ 0x30
 800183a:	041b      	lsls	r3, r3, #16
 800183c:	431a      	orrs	r2, r3
 800183e:	2330      	movs	r3, #48	@ 0x30
 8001840:	021b      	lsls	r3, r3, #8
 8001842:	4313      	orrs	r3, r2
 8001844:	2230      	movs	r2, #48	@ 0x30
 8001846:	ea43 0102 	orr.w	r1, r3, r2
 800184a:	2344      	movs	r3, #68	@ 0x44
 800184c:	061a      	lsls	r2, r3, #24
 800184e:	2345      	movs	r3, #69	@ 0x45
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	431a      	orrs	r2, r3
 8001854:	234d      	movs	r3, #77	@ 0x4d
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	4313      	orrs	r3, r2
 800185a:	2200      	movs	r2, #0
 800185c:	431a      	orrs	r2, r3
 800185e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001862:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800186e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	461c      	mov	r4, r3
 8001876:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800187a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800187e:	789b      	ldrb	r3, [r3, #2]
 8001880:	461d      	mov	r5, r3
 8001882:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001886:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800188a:	78db      	ldrb	r3, [r3, #3]
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	9503      	str	r5, [sp, #12]
 8001890:	9402      	str	r4, [sp, #8]
 8001892:	9001      	str	r0, [sp, #4]
 8001894:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <Dem_SetEventStatus+0x264>)
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	4b2e      	ldr	r3, [pc, #184]	@ (8001954 <Dem_SetEventStatus+0x278>)
 800189a:	2005      	movs	r0, #5
 800189c:	f7ff fea0 	bl	80015e0 <DLTuc_LogOutVarArgs>
        LOGF(DL_DEBUG, "Start writing to NvM");
 80018a0:	2330      	movs	r3, #48	@ 0x30
 80018a2:	061a      	lsls	r2, r3, #24
 80018a4:	2330      	movs	r3, #48	@ 0x30
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	431a      	orrs	r2, r3
 80018aa:	2330      	movs	r3, #48	@ 0x30
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	4313      	orrs	r3, r2
 80018b0:	2230      	movs	r2, #48	@ 0x30
 80018b2:	ea43 0102 	orr.w	r1, r3, r2
 80018b6:	2344      	movs	r3, #68	@ 0x44
 80018b8:	061a      	lsls	r2, r3, #24
 80018ba:	2345      	movs	r3, #69	@ 0x45
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	431a      	orrs	r2, r3
 80018c0:	234d      	movs	r3, #77	@ 0x4d
 80018c2:	021b      	lsls	r3, r3, #8
 80018c4:	4313      	orrs	r3, r2
 80018c6:	2200      	movs	r2, #0
 80018c8:	431a      	orrs	r2, r3
 80018ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <Dem_SetEventStatus+0x264>)
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <Dem_SetEventStatus+0x27c>)
 80018d0:	2005      	movs	r0, #5
 80018d2:	f7ff fe85 	bl	80015e0 <DLTuc_LogOutVarArgs>
        if (NvM_WriteBlock(event.blockId, pointerToData) == E_OK)
 80018d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80018da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018de:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80018e2:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fb48 	bl	8001f7c <NvM_WriteBlock>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <Dem_SetEventStatus+0x21a>
        {
            return E_OK;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e01f      	b.n	8001936 <Dem_SetEventStatus+0x25a>
        }
    }
    LOGFF(DL_FATAL, "Operation failed!");
 80018f6:	2330      	movs	r3, #48	@ 0x30
 80018f8:	061a      	lsls	r2, r3, #24
 80018fa:	2330      	movs	r3, #48	@ 0x30
 80018fc:	041b      	lsls	r3, r3, #16
 80018fe:	431a      	orrs	r2, r3
 8001900:	2330      	movs	r3, #48	@ 0x30
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	4313      	orrs	r3, r2
 8001906:	2230      	movs	r2, #48	@ 0x30
 8001908:	ea43 0102 	orr.w	r1, r3, r2
 800190c:	2344      	movs	r3, #68	@ 0x44
 800190e:	061a      	lsls	r2, r3, #24
 8001910:	2345      	movs	r3, #69	@ 0x45
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	431a      	orrs	r2, r3
 8001916:	234d      	movs	r3, #77	@ 0x4d
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	4313      	orrs	r3, r2
 800191c:	2200      	movs	r2, #0
 800191e:	431a      	orrs	r2, r3
 8001920:	4b07      	ldr	r3, [pc, #28]	@ (8001940 <Dem_SetEventStatus+0x264>)
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	2323      	movs	r3, #35	@ 0x23
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <Dem_SetEventStatus+0x280>)
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <Dem_SetEventStatus+0x284>)
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff fe56 	bl	80015e0 <DLTuc_LogOutVarArgs>
    return E_NOK;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800193c:	46bd      	mov	sp, r7
 800193e:	bdb0      	pop	{r4, r5, r7, pc}
 8001940:	0800a644 	.word	0x0800a644
 8001944:	0800a20c 	.word	0x0800a20c
 8001948:	20000010 	.word	0x20000010
 800194c:	20000118 	.word	0x20000118
 8001950:	0800a22c 	.word	0x0800a22c
 8001954:	0800a250 	.word	0x0800a250
 8001958:	0800a294 	.word	0x0800a294
 800195c:	0800a2e8 	.word	0x0800a2e8
 8001960:	0800a2b8 	.word	0x0800a2b8

08001964 <Dem_GetStatusOfDTC>:


Std_ReturnType Dem_GetStatusOfDTC(uint8_t ClientId, uint8_t *DTCStatus)
{
 8001964:	b5b0      	push	{r4, r5, r7, lr}
 8001966:	b0ca      	sub	sp, #296	@ 0x128
 8001968:	af06      	add	r7, sp, #24
 800196a:	4602      	mov	r2, r0
 800196c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001970:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001974:	6019      	str	r1, [r3, #0]
 8001976:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800197a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800197e:	701a      	strb	r2, [r3, #0]
    LOGF(DL_DEBUG, "Operation started!");
 8001980:	2330      	movs	r3, #48	@ 0x30
 8001982:	061a      	lsls	r2, r3, #24
 8001984:	2330      	movs	r3, #48	@ 0x30
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	431a      	orrs	r2, r3
 800198a:	2330      	movs	r3, #48	@ 0x30
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	4313      	orrs	r3, r2
 8001990:	2230      	movs	r2, #48	@ 0x30
 8001992:	ea43 0102 	orr.w	r1, r3, r2
 8001996:	2344      	movs	r3, #68	@ 0x44
 8001998:	061a      	lsls	r2, r3, #24
 800199a:	2345      	movs	r3, #69	@ 0x45
 800199c:	041b      	lsls	r3, r3, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	234d      	movs	r3, #77	@ 0x4d
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	4313      	orrs	r3, r2
 80019a6:	2200      	movs	r2, #0
 80019a8:	431a      	orrs	r2, r3
 80019aa:	4b6c      	ldr	r3, [pc, #432]	@ (8001b5c <Dem_GetStatusOfDTC+0x1f8>)
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001b60 <Dem_GetStatusOfDTC+0x1fc>)
 80019b0:	2005      	movs	r0, #5
 80019b2:	f7ff fe15 	bl	80015e0 <DLTuc_LogOutVarArgs>
    struct event event;

    switch (ClientId)
 80019b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019ba:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <Dem_GetStatusOfDTC+0x66>
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d00d      	beq.n	80019e4 <Dem_GetStatusOfDTC+0x80>
 80019c8:	e019      	b.n	80019fe <Dem_GetStatusOfDTC+0x9a>
    {
    case OVER_VOLTAGE_ID:
    	event = overVoltage;
 80019ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019d2:	4a64      	ldr	r2, [pc, #400]	@ (8001b64 <Dem_GetStatusOfDTC+0x200>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	4611      	mov	r1, r2
 80019d8:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80019dc:	461a      	mov	r2, r3
 80019de:	f006 f896 	bl	8007b0e <memcpy>
    	break;
 80019e2:	e00c      	b.n	80019fe <Dem_GetStatusOfDTC+0x9a>

    case UNDER_VOLTAGE_ID:
    	event = underVoltage;
 80019e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80019ec:	4a5e      	ldr	r2, [pc, #376]	@ (8001b68 <Dem_GetStatusOfDTC+0x204>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	4611      	mov	r1, r2
 80019f2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80019f6:	461a      	mov	r2, r3
 80019f8:	f006 f889 	bl	8007b0e <memcpy>
    	break;
 80019fc:	bf00      	nop
    }

	LOGF(DL_DEBUG, "Requesting status: %s", event.EventName);
 80019fe:	2330      	movs	r3, #48	@ 0x30
 8001a00:	061a      	lsls	r2, r3, #24
 8001a02:	2330      	movs	r3, #48	@ 0x30
 8001a04:	041b      	lsls	r3, r3, #16
 8001a06:	431a      	orrs	r2, r3
 8001a08:	2330      	movs	r3, #48	@ 0x30
 8001a0a:	021b      	lsls	r3, r3, #8
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	2230      	movs	r2, #48	@ 0x30
 8001a10:	ea43 0102 	orr.w	r1, r3, r2
 8001a14:	2344      	movs	r3, #68	@ 0x44
 8001a16:	061a      	lsls	r2, r3, #24
 8001a18:	2345      	movs	r3, #69	@ 0x45
 8001a1a:	041b      	lsls	r3, r3, #16
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	234d      	movs	r3, #77	@ 0x4d
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	4313      	orrs	r3, r2
 8001a24:	2200      	movs	r2, #0
 8001a26:	431a      	orrs	r2, r3
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b5c <Dem_GetStatusOfDTC+0x1f8>)
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	4b4e      	ldr	r3, [pc, #312]	@ (8001b6c <Dem_GetStatusOfDTC+0x208>)
 8001a34:	2005      	movs	r0, #5
 8001a36:	f7ff fdd3 	bl	80015e0 <DLTuc_LogOutVarArgs>
    if (NvM_ReadBlock(event.blockId, DTCStatus) == E_OK)
 8001a3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001a42:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 8001a46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a4a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a4e:	6819      	ldr	r1, [r3, #0]
 8001a50:	4610      	mov	r0, r2
 8001a52:	f000 fa13 	bl	8001e7c <NvM_ReadBlock>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d15a      	bne.n	8001b12 <Dem_GetStatusOfDTC+0x1ae>
    {
        LOGL(DL_INFO, "DEM: %s status: %x %x %x %x",event.EventName, DTCStatus[0], DTCStatus[1], DTCStatus[2], DTCStatus[3]);
 8001a5c:	2330      	movs	r3, #48	@ 0x30
 8001a5e:	061a      	lsls	r2, r3, #24
 8001a60:	2330      	movs	r3, #48	@ 0x30
 8001a62:	041b      	lsls	r3, r3, #16
 8001a64:	431a      	orrs	r2, r3
 8001a66:	2330      	movs	r3, #48	@ 0x30
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	2230      	movs	r2, #48	@ 0x30
 8001a6e:	ea43 0102 	orr.w	r1, r3, r2
 8001a72:	2344      	movs	r3, #68	@ 0x44
 8001a74:	061a      	lsls	r2, r3, #24
 8001a76:	2345      	movs	r3, #69	@ 0x45
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	234d      	movs	r3, #77	@ 0x4d
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	4313      	orrs	r3, r2
 8001a82:	2200      	movs	r2, #0
 8001a84:	431a      	orrs	r2, r3
 8001a86:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a8a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461c      	mov	r4, r3
 8001aa4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001aa8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461d      	mov	r5, r3
 8001ab4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ab8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3303      	adds	r3, #3
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	9304      	str	r3, [sp, #16]
 8001ac4:	9503      	str	r5, [sp, #12]
 8001ac6:	9402      	str	r4, [sp, #8]
 8001ac8:	9001      	str	r0, [sp, #4]
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <Dem_GetStatusOfDTC+0x20c>)
 8001ad2:	2004      	movs	r0, #4
 8001ad4:	f7ff fd84 	bl	80015e0 <DLTuc_LogOutVarArgs>
        LOGF(DL_DEBUG, "Operation finished!");
 8001ad8:	2330      	movs	r3, #48	@ 0x30
 8001ada:	061a      	lsls	r2, r3, #24
 8001adc:	2330      	movs	r3, #48	@ 0x30
 8001ade:	041b      	lsls	r3, r3, #16
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	2330      	movs	r3, #48	@ 0x30
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	2230      	movs	r2, #48	@ 0x30
 8001aea:	ea43 0102 	orr.w	r1, r3, r2
 8001aee:	2344      	movs	r3, #68	@ 0x44
 8001af0:	061a      	lsls	r2, r3, #24
 8001af2:	2345      	movs	r3, #69	@ 0x45
 8001af4:	041b      	lsls	r3, r3, #16
 8001af6:	431a      	orrs	r2, r3
 8001af8:	234d      	movs	r3, #77	@ 0x4d
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	4313      	orrs	r3, r2
 8001afe:	2200      	movs	r2, #0
 8001b00:	431a      	orrs	r2, r3
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <Dem_GetStatusOfDTC+0x1f8>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <Dem_GetStatusOfDTC+0x210>)
 8001b08:	2005      	movs	r0, #5
 8001b0a:	f7ff fd69 	bl	80015e0 <DLTuc_LogOutVarArgs>

        return E_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e01f      	b.n	8001b52 <Dem_GetStatusOfDTC+0x1ee>
    }

    LOGFF(DL_FATAL, "Operation failed!");
 8001b12:	2330      	movs	r3, #48	@ 0x30
 8001b14:	061a      	lsls	r2, r3, #24
 8001b16:	2330      	movs	r3, #48	@ 0x30
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	2330      	movs	r3, #48	@ 0x30
 8001b1e:	021b      	lsls	r3, r3, #8
 8001b20:	4313      	orrs	r3, r2
 8001b22:	2230      	movs	r2, #48	@ 0x30
 8001b24:	ea43 0102 	orr.w	r1, r3, r2
 8001b28:	2344      	movs	r3, #68	@ 0x44
 8001b2a:	061a      	lsls	r2, r3, #24
 8001b2c:	2345      	movs	r3, #69	@ 0x45
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	431a      	orrs	r2, r3
 8001b32:	234d      	movs	r3, #77	@ 0x4d
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	4313      	orrs	r3, r2
 8001b38:	2200      	movs	r2, #0
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	4b07      	ldr	r3, [pc, #28]	@ (8001b5c <Dem_GetStatusOfDTC+0x1f8>)
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	2341      	movs	r3, #65	@ 0x41
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <Dem_GetStatusOfDTC+0x214>)
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	4b0c      	ldr	r3, [pc, #48]	@ (8001b7c <Dem_GetStatusOfDTC+0x218>)
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff fd48 	bl	80015e0 <DLTuc_LogOutVarArgs>
    return E_NOK;
 8001b50:	2301      	movs	r3, #1
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5c:	0800a658 	.word	0x0800a658
 8001b60:	0800a20c 	.word	0x0800a20c
 8001b64:	20000010 	.word	0x20000010
 8001b68:	20000118 	.word	0x20000118
 8001b6c:	0800a2fc 	.word	0x0800a2fc
 8001b70:	0800a320 	.word	0x0800a320
 8001b74:	0800a33c 	.word	0x0800a33c
 8001b78:	0800a2e8 	.word	0x0800a2e8
 8001b7c:	0800a2b8 	.word	0x0800a2b8

08001b80 <Dem_ClearDTC>:


Std_ReturnType Dem_ClearDTC (uint8_t ClientId)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0ca      	sub	sp, #296	@ 0x128
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	4602      	mov	r2, r0
 8001b88:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001b8c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001b90:	701a      	strb	r2, [r3, #0]
    LOGF(DL_DEBUG, "Operation started!");
 8001b92:	2330      	movs	r3, #48	@ 0x30
 8001b94:	061a      	lsls	r2, r3, #24
 8001b96:	2330      	movs	r3, #48	@ 0x30
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	2330      	movs	r3, #48	@ 0x30
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	2230      	movs	r2, #48	@ 0x30
 8001ba4:	ea43 0102 	orr.w	r1, r3, r2
 8001ba8:	2344      	movs	r3, #68	@ 0x44
 8001baa:	061a      	lsls	r2, r3, #24
 8001bac:	2345      	movs	r3, #69	@ 0x45
 8001bae:	041b      	lsls	r3, r3, #16
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	234d      	movs	r3, #77	@ 0x4d
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	2200      	movs	r2, #0
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	4b51      	ldr	r3, [pc, #324]	@ (8001d04 <Dem_ClearDTC+0x184>)
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	4b51      	ldr	r3, [pc, #324]	@ (8001d08 <Dem_ClearDTC+0x188>)
 8001bc2:	2005      	movs	r0, #5
 8001bc4:	f7ff fd0c 	bl	80015e0 <DLTuc_LogOutVarArgs>
    uint8_t emptyData[4] = {0};
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    struct event event;

    switch (ClientId)
 8001bce:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bd2:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <Dem_ClearDTC+0x62>
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d00d      	beq.n	8001bfc <Dem_ClearDTC+0x7c>
 8001be0:	e019      	b.n	8001c16 <Dem_ClearDTC+0x96>
    {
    case OVER_VOLTAGE_ID:
    	event = overVoltage;
 8001be2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001be6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bea:	4a48      	ldr	r2, [pc, #288]	@ (8001d0c <Dem_ClearDTC+0x18c>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	4611      	mov	r1, r2
 8001bf0:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f005 ff8a 	bl	8007b0e <memcpy>
    	break;
 8001bfa:	e00c      	b.n	8001c16 <Dem_ClearDTC+0x96>

    case UNDER_VOLTAGE_ID:
    	event = underVoltage;
 8001bfc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c00:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c04:	4a42      	ldr	r2, [pc, #264]	@ (8001d10 <Dem_ClearDTC+0x190>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	4611      	mov	r1, r2
 8001c0a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f005 ff7d 	bl	8007b0e <memcpy>
    	break;
 8001c14:	bf00      	nop
    }
    LOGF(DL_DEBUG, "Clear: %s  | BlockId: ", event.EventName, event.blockId);
 8001c16:	2330      	movs	r3, #48	@ 0x30
 8001c18:	061a      	lsls	r2, r3, #24
 8001c1a:	2330      	movs	r3, #48	@ 0x30
 8001c1c:	041b      	lsls	r3, r3, #16
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	2330      	movs	r3, #48	@ 0x30
 8001c22:	021b      	lsls	r3, r3, #8
 8001c24:	4313      	orrs	r3, r2
 8001c26:	2230      	movs	r2, #48	@ 0x30
 8001c28:	ea43 0102 	orr.w	r1, r3, r2
 8001c2c:	2344      	movs	r3, #68	@ 0x44
 8001c2e:	061a      	lsls	r2, r3, #24
 8001c30:	2345      	movs	r3, #69	@ 0x45
 8001c32:	041b      	lsls	r3, r3, #16
 8001c34:	431a      	orrs	r2, r3
 8001c36:	234d      	movs	r3, #77	@ 0x4d
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c48:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <Dem_ClearDTC+0x184>)
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	4b2e      	ldr	r3, [pc, #184]	@ (8001d14 <Dem_ClearDTC+0x194>)
 8001c5a:	2005      	movs	r0, #5
 8001c5c:	f7ff fcc0 	bl	80015e0 <DLTuc_LogOutVarArgs>
    if (NvM_WriteBlock(event.blockId, emptyData) == E_OK)
 8001c60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c68:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8001c6c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f982 	bl	8001f7c <NvM_WriteBlock>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d11c      	bne.n	8001cb8 <Dem_ClearDTC+0x138>
    {
    	LOGF(DL_DEBUG, "Operation finished!");
 8001c7e:	2330      	movs	r3, #48	@ 0x30
 8001c80:	061a      	lsls	r2, r3, #24
 8001c82:	2330      	movs	r3, #48	@ 0x30
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	431a      	orrs	r2, r3
 8001c88:	2330      	movs	r3, #48	@ 0x30
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	2230      	movs	r2, #48	@ 0x30
 8001c90:	ea43 0102 	orr.w	r1, r3, r2
 8001c94:	2344      	movs	r3, #68	@ 0x44
 8001c96:	061a      	lsls	r2, r3, #24
 8001c98:	2345      	movs	r3, #69	@ 0x45
 8001c9a:	041b      	lsls	r3, r3, #16
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	234d      	movs	r3, #77	@ 0x4d
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <Dem_ClearDTC+0x184>)
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <Dem_ClearDTC+0x198>)
 8001cae:	2005      	movs	r0, #5
 8001cb0:	f7ff fc96 	bl	80015e0 <DLTuc_LogOutVarArgs>
        return E_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e01f      	b.n	8001cf8 <Dem_ClearDTC+0x178>
    }

    LOGFF(DL_FATAL, "Operation failed!");
 8001cb8:	2330      	movs	r3, #48	@ 0x30
 8001cba:	061a      	lsls	r2, r3, #24
 8001cbc:	2330      	movs	r3, #48	@ 0x30
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	2330      	movs	r3, #48	@ 0x30
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	2230      	movs	r2, #48	@ 0x30
 8001cca:	ea43 0102 	orr.w	r1, r3, r2
 8001cce:	2344      	movs	r3, #68	@ 0x44
 8001cd0:	061a      	lsls	r2, r3, #24
 8001cd2:	2345      	movs	r3, #69	@ 0x45
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	234d      	movs	r3, #77	@ 0x4d
 8001cda:	021b      	lsls	r3, r3, #8
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	2200      	movs	r2, #0
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <Dem_ClearDTC+0x184>)
 8001ce4:	9302      	str	r3, [sp, #8]
 8001ce6:	235d      	movs	r3, #93	@ 0x5d
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	4b0c      	ldr	r3, [pc, #48]	@ (8001d1c <Dem_ClearDTC+0x19c>)
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <Dem_ClearDTC+0x1a0>)
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f7ff fc75 	bl	80015e0 <DLTuc_LogOutVarArgs>
    return E_NOK;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	0800a66c 	.word	0x0800a66c
 8001d08:	0800a20c 	.word	0x0800a20c
 8001d0c:	20000010 	.word	0x20000010
 8001d10:	20000118 	.word	0x20000118
 8001d14:	0800a35c 	.word	0x0800a35c
 8001d18:	0800a33c 	.word	0x0800a33c
 8001d1c:	0800a2e8 	.word	0x0800a2e8
 8001d20:	0800a2b8 	.word	0x0800a2b8

08001d24 <ClearAllDtc>:
#include "DtcRequestHandler.h"

void ClearAllDtc()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af02      	add	r7, sp, #8
	LOGF(DL_DEBUG, "Operation started!");
 8001d2a:	2330      	movs	r3, #48	@ 0x30
 8001d2c:	061a      	lsls	r2, r3, #24
 8001d2e:	2330      	movs	r3, #48	@ 0x30
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	2330      	movs	r3, #48	@ 0x30
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	2230      	movs	r2, #48	@ 0x30
 8001d3c:	ea43 0102 	orr.w	r1, r3, r2
 8001d40:	2344      	movs	r3, #68	@ 0x44
 8001d42:	061a      	lsls	r2, r3, #24
 8001d44:	2374      	movs	r3, #116	@ 0x74
 8001d46:	041b      	lsls	r3, r3, #16
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	2363      	movs	r3, #99	@ 0x63
 8001d4c:	021b      	lsls	r3, r3, #8
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	2248      	movs	r2, #72	@ 0x48
 8001d52:	431a      	orrs	r2, r3
 8001d54:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <ClearAllDtc+0x90>)
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4b17      	ldr	r3, [pc, #92]	@ (8001db8 <ClearAllDtc+0x94>)
 8001d5a:	2005      	movs	r0, #5
 8001d5c:	f7ff fc40 	bl	80015e0 <DLTuc_LogOutVarArgs>
	Dem_ClearDTC(overVoltage.clientId);
 8001d60:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <ClearAllDtc+0x98>)
 8001d62:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff0a 	bl	8001b80 <Dem_ClearDTC>
	Dem_ClearDTC(underVoltage.clientId);
 8001d6c:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <ClearAllDtc+0x9c>)
 8001d6e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff04 	bl	8001b80 <Dem_ClearDTC>
	LOGF(DL_DEBUG, "Operation finished!");
 8001d78:	2330      	movs	r3, #48	@ 0x30
 8001d7a:	061a      	lsls	r2, r3, #24
 8001d7c:	2330      	movs	r3, #48	@ 0x30
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	431a      	orrs	r2, r3
 8001d82:	2330      	movs	r3, #48	@ 0x30
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	4313      	orrs	r3, r2
 8001d88:	2230      	movs	r2, #48	@ 0x30
 8001d8a:	ea43 0102 	orr.w	r1, r3, r2
 8001d8e:	2344      	movs	r3, #68	@ 0x44
 8001d90:	061a      	lsls	r2, r3, #24
 8001d92:	2374      	movs	r3, #116	@ 0x74
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	431a      	orrs	r2, r3
 8001d98:	2363      	movs	r3, #99	@ 0x63
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	2248      	movs	r2, #72	@ 0x48
 8001da0:	431a      	orrs	r2, r3
 8001da2:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <ClearAllDtc+0x90>)
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	4b07      	ldr	r3, [pc, #28]	@ (8001dc4 <ClearAllDtc+0xa0>)
 8001da8:	2005      	movs	r0, #5
 8001daa:	f7ff fc19 	bl	80015e0 <DLTuc_LogOutVarArgs>
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	0800a67c 	.word	0x0800a67c
 8001db8:	0800a380 	.word	0x0800a380
 8001dbc:	20000010 	.word	0x20000010
 8001dc0:	20000118 	.word	0x20000118
 8001dc4:	0800a3a0 	.word	0x0800a3a0

08001dc8 <ReadAllDtc>:

void ReadAllDtc()
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af02      	add	r7, sp, #8
	uint8_t dtcStatus[4] = {0};
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]

	LOGF(DL_DEBUG, "Operation started!");
 8001dd2:	2330      	movs	r3, #48	@ 0x30
 8001dd4:	061a      	lsls	r2, r3, #24
 8001dd6:	2330      	movs	r3, #48	@ 0x30
 8001dd8:	041b      	lsls	r3, r3, #16
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	2330      	movs	r3, #48	@ 0x30
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	4313      	orrs	r3, r2
 8001de2:	2230      	movs	r2, #48	@ 0x30
 8001de4:	ea43 0102 	orr.w	r1, r3, r2
 8001de8:	2344      	movs	r3, #68	@ 0x44
 8001dea:	061a      	lsls	r2, r3, #24
 8001dec:	2374      	movs	r3, #116	@ 0x74
 8001dee:	041b      	lsls	r3, r3, #16
 8001df0:	431a      	orrs	r2, r3
 8001df2:	2363      	movs	r3, #99	@ 0x63
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	4313      	orrs	r3, r2
 8001df8:	2248      	movs	r2, #72	@ 0x48
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <ReadAllDtc+0xa0>)
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <ReadAllDtc+0xa4>)
 8001e02:	2005      	movs	r0, #5
 8001e04:	f7ff fbec 	bl	80015e0 <DLTuc_LogOutVarArgs>
	Dem_GetStatusOfDTC(overVoltage.clientId, dtcStatus);
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <ReadAllDtc+0xa8>)
 8001e0a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001e0e:	1d3a      	adds	r2, r7, #4
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fda6 	bl	8001964 <Dem_GetStatusOfDTC>
	Dem_GetStatusOfDTC(underVoltage.clientId, dtcStatus);
 8001e18:	4b16      	ldr	r3, [pc, #88]	@ (8001e74 <ReadAllDtc+0xac>)
 8001e1a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8001e1e:	1d3a      	adds	r2, r7, #4
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fd9e 	bl	8001964 <Dem_GetStatusOfDTC>
	LOGF(DL_DEBUG, "Operation finished!");
 8001e28:	2330      	movs	r3, #48	@ 0x30
 8001e2a:	061a      	lsls	r2, r3, #24
 8001e2c:	2330      	movs	r3, #48	@ 0x30
 8001e2e:	041b      	lsls	r3, r3, #16
 8001e30:	431a      	orrs	r2, r3
 8001e32:	2330      	movs	r3, #48	@ 0x30
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	4313      	orrs	r3, r2
 8001e38:	2230      	movs	r2, #48	@ 0x30
 8001e3a:	ea43 0102 	orr.w	r1, r3, r2
 8001e3e:	2344      	movs	r3, #68	@ 0x44
 8001e40:	061a      	lsls	r2, r3, #24
 8001e42:	2374      	movs	r3, #116	@ 0x74
 8001e44:	041b      	lsls	r3, r3, #16
 8001e46:	431a      	orrs	r2, r3
 8001e48:	2363      	movs	r3, #99	@ 0x63
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	2248      	movs	r2, #72	@ 0x48
 8001e50:	431a      	orrs	r2, r3
 8001e52:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <ReadAllDtc+0xa0>)
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4b08      	ldr	r3, [pc, #32]	@ (8001e78 <ReadAllDtc+0xb0>)
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f7ff fbc1 	bl	80015e0 <DLTuc_LogOutVarArgs>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	0800a688 	.word	0x0800a688
 8001e6c:	0800a380 	.word	0x0800a380
 8001e70:	20000010 	.word	0x20000010
 8001e74:	20000118 	.word	0x20000118
 8001e78:	0800a3a0 	.word	0x0800a3a0

08001e7c <NvM_ReadBlock>:
#include "NvM.h"

Std_ReturnType NvM_ReadBlock(NvM_BlockIdType BlockId, void *NvM_DstPtr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af04      	add	r7, sp, #16
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	80fb      	strh	r3, [r7, #6]
    LOGF(DL_DEBUG, "Operation started! Read Block ID: %x", BlockId);
 8001e88:	2330      	movs	r3, #48	@ 0x30
 8001e8a:	061a      	lsls	r2, r3, #24
 8001e8c:	2330      	movs	r3, #48	@ 0x30
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	431a      	orrs	r2, r3
 8001e92:	2330      	movs	r3, #48	@ 0x30
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	4313      	orrs	r3, r2
 8001e98:	2230      	movs	r2, #48	@ 0x30
 8001e9a:	ea43 0102 	orr.w	r1, r3, r2
 8001e9e:	234e      	movs	r3, #78	@ 0x4e
 8001ea0:	061a      	lsls	r2, r3, #24
 8001ea2:	2356      	movs	r3, #86	@ 0x56
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	234d      	movs	r3, #77	@ 0x4d
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	4313      	orrs	r3, r2
 8001eae:	2200      	movs	r2, #0
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f64 <NvM_ReadBlock+0xe8>)
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <NvM_ReadBlock+0xec>)
 8001ebc:	2005      	movs	r0, #5
 8001ebe:	f7ff fb8f 	bl	80015e0 <DLTuc_LogOutVarArgs>
    if (HAL_I2C_Mem_Read(&hi2c1, devAddr, BlockId, AddressSize, NvM_DstPtr, sizeof(NvM_DstPtr), HAL_MAX_DELAY) != HAL_OK)
 8001ec2:	88fa      	ldrh	r2, [r7, #6]
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ec8:	9302      	str	r3, [sp, #8]
 8001eca:	2304      	movs	r3, #4
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	21a0      	movs	r1, #160	@ 0xa0
 8001ed6:	4825      	ldr	r0, [pc, #148]	@ (8001f6c <NvM_ReadBlock+0xf0>)
 8001ed8:	f002 fdbc 	bl	8004a54 <HAL_I2C_Mem_Read>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d020      	beq.n	8001f24 <NvM_ReadBlock+0xa8>
    {
        LOGFF(DL_FATAL, "Operation failed!");
 8001ee2:	2330      	movs	r3, #48	@ 0x30
 8001ee4:	061a      	lsls	r2, r3, #24
 8001ee6:	2330      	movs	r3, #48	@ 0x30
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	431a      	orrs	r2, r3
 8001eec:	2330      	movs	r3, #48	@ 0x30
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	2230      	movs	r2, #48	@ 0x30
 8001ef4:	ea43 0102 	orr.w	r1, r3, r2
 8001ef8:	234e      	movs	r3, #78	@ 0x4e
 8001efa:	061a      	lsls	r2, r3, #24
 8001efc:	2356      	movs	r3, #86	@ 0x56
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	431a      	orrs	r2, r3
 8001f02:	234d      	movs	r3, #77	@ 0x4d
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	4313      	orrs	r3, r2
 8001f08:	2200      	movs	r2, #0
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	4b15      	ldr	r3, [pc, #84]	@ (8001f64 <NvM_ReadBlock+0xe8>)
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	2308      	movs	r3, #8
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <NvM_ReadBlock+0xf4>)
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <NvM_ReadBlock+0xf8>)
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f7ff fb60 	bl	80015e0 <DLTuc_LogOutVarArgs>
        return E_NOK;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e01b      	b.n	8001f5c <NvM_ReadBlock+0xe0>
    }
    LOGF(DL_DEBUG, "Operation succeeded!");
 8001f24:	2330      	movs	r3, #48	@ 0x30
 8001f26:	061a      	lsls	r2, r3, #24
 8001f28:	2330      	movs	r3, #48	@ 0x30
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	2330      	movs	r3, #48	@ 0x30
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	4313      	orrs	r3, r2
 8001f34:	2230      	movs	r2, #48	@ 0x30
 8001f36:	ea43 0102 	orr.w	r1, r3, r2
 8001f3a:	234e      	movs	r3, #78	@ 0x4e
 8001f3c:	061a      	lsls	r2, r3, #24
 8001f3e:	2356      	movs	r3, #86	@ 0x56
 8001f40:	041b      	lsls	r3, r3, #16
 8001f42:	431a      	orrs	r2, r3
 8001f44:	234d      	movs	r3, #77	@ 0x4d
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	4b05      	ldr	r3, [pc, #20]	@ (8001f64 <NvM_ReadBlock+0xe8>)
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	4b09      	ldr	r3, [pc, #36]	@ (8001f78 <NvM_ReadBlock+0xfc>)
 8001f54:	2005      	movs	r0, #5
 8001f56:	f7ff fb43 	bl	80015e0 <DLTuc_LogOutVarArgs>
    return E_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	0800a694 	.word	0x0800a694
 8001f68:	0800a3c0 	.word	0x0800a3c0
 8001f6c:	2000156c 	.word	0x2000156c
 8001f70:	0800a424 	.word	0x0800a424
 8001f74:	0800a3f4 	.word	0x0800a3f4
 8001f78:	0800a438 	.word	0x0800a438

08001f7c <NvM_WriteBlock>:

Std_ReturnType NvM_WriteBlock(NvM_BlockIdType BlockId, const void *NvM_SrcPtr)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af04      	add	r7, sp, #16
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	80fb      	strh	r3, [r7, #6]
    LOGF(DL_DEBUG, "Operation started! Writing Block ID %x", BlockId);
 8001f88:	2330      	movs	r3, #48	@ 0x30
 8001f8a:	061a      	lsls	r2, r3, #24
 8001f8c:	2330      	movs	r3, #48	@ 0x30
 8001f8e:	041b      	lsls	r3, r3, #16
 8001f90:	431a      	orrs	r2, r3
 8001f92:	2330      	movs	r3, #48	@ 0x30
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	4313      	orrs	r3, r2
 8001f98:	2230      	movs	r2, #48	@ 0x30
 8001f9a:	ea43 0102 	orr.w	r1, r3, r2
 8001f9e:	234e      	movs	r3, #78	@ 0x4e
 8001fa0:	061a      	lsls	r2, r3, #24
 8001fa2:	2356      	movs	r3, #86	@ 0x56
 8001fa4:	041b      	lsls	r3, r3, #16
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	234d      	movs	r3, #77	@ 0x4d
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	4313      	orrs	r3, r2
 8001fae:	2200      	movs	r2, #0
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	9301      	str	r3, [sp, #4]
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <NvM_WriteBlock+0xf4>)
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <NvM_WriteBlock+0xf8>)
 8001fbc:	2005      	movs	r0, #5
 8001fbe:	f7ff fb0f 	bl	80015e0 <DLTuc_LogOutVarArgs>
    if (HAL_I2C_Mem_Write(&hi2c1, devAddr, BlockId, AddressSize, NvM_SrcPtr, sizeof(NvM_SrcPtr), HAL_MAX_DELAY) != HAL_OK)
 8001fc2:	88fa      	ldrh	r2, [r7, #6]
 8001fc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fc8:	9302      	str	r3, [sp, #8]
 8001fca:	2304      	movs	r3, #4
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	21a0      	movs	r1, #160	@ 0xa0
 8001fd6:	4828      	ldr	r0, [pc, #160]	@ (8002078 <NvM_WriteBlock+0xfc>)
 8001fd8:	f002 fc42 	bl	8004860 <HAL_I2C_Mem_Write>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d023      	beq.n	800202a <NvM_WriteBlock+0xae>
    {
        HAL_Delay(10);
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f001 f840 	bl	8003068 <HAL_Delay>
        LOGFF(DL_FATAL, "Operation failed!");
 8001fe8:	2330      	movs	r3, #48	@ 0x30
 8001fea:	061a      	lsls	r2, r3, #24
 8001fec:	2330      	movs	r3, #48	@ 0x30
 8001fee:	041b      	lsls	r3, r3, #16
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	2330      	movs	r3, #48	@ 0x30
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	2230      	movs	r2, #48	@ 0x30
 8001ffa:	ea43 0102 	orr.w	r1, r3, r2
 8001ffe:	234e      	movs	r3, #78	@ 0x4e
 8002000:	061a      	lsls	r2, r3, #24
 8002002:	2356      	movs	r3, #86	@ 0x56
 8002004:	041b      	lsls	r3, r3, #16
 8002006:	431a      	orrs	r2, r3
 8002008:	234d      	movs	r3, #77	@ 0x4d
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4313      	orrs	r3, r2
 800200e:	2200      	movs	r2, #0
 8002010:	431a      	orrs	r2, r3
 8002012:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <NvM_WriteBlock+0xf4>)
 8002014:	9302      	str	r3, [sp, #8]
 8002016:	2315      	movs	r3, #21
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	4b18      	ldr	r3, [pc, #96]	@ (800207c <NvM_WriteBlock+0x100>)
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	4b18      	ldr	r3, [pc, #96]	@ (8002080 <NvM_WriteBlock+0x104>)
 8002020:	2001      	movs	r0, #1
 8002022:	f7ff fadd 	bl	80015e0 <DLTuc_LogOutVarArgs>
        return E_NOK;
 8002026:	2301      	movs	r3, #1
 8002028:	e01e      	b.n	8002068 <NvM_WriteBlock+0xec>
    }
    HAL_Delay(10);
 800202a:	200a      	movs	r0, #10
 800202c:	f001 f81c 	bl	8003068 <HAL_Delay>
    LOGF(DL_DEBUG, "Operation succeeded!");
 8002030:	2330      	movs	r3, #48	@ 0x30
 8002032:	061a      	lsls	r2, r3, #24
 8002034:	2330      	movs	r3, #48	@ 0x30
 8002036:	041b      	lsls	r3, r3, #16
 8002038:	431a      	orrs	r2, r3
 800203a:	2330      	movs	r3, #48	@ 0x30
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	4313      	orrs	r3, r2
 8002040:	2230      	movs	r2, #48	@ 0x30
 8002042:	ea43 0102 	orr.w	r1, r3, r2
 8002046:	234e      	movs	r3, #78	@ 0x4e
 8002048:	061a      	lsls	r2, r3, #24
 800204a:	2356      	movs	r3, #86	@ 0x56
 800204c:	041b      	lsls	r3, r3, #16
 800204e:	431a      	orrs	r2, r3
 8002050:	234d      	movs	r3, #77	@ 0x4d
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	4313      	orrs	r3, r2
 8002056:	2200      	movs	r2, #0
 8002058:	431a      	orrs	r2, r3
 800205a:	4b05      	ldr	r3, [pc, #20]	@ (8002070 <NvM_WriteBlock+0xf4>)
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <NvM_WriteBlock+0x108>)
 8002060:	2005      	movs	r0, #5
 8002062:	f7ff fabd 	bl	80015e0 <DLTuc_LogOutVarArgs>
    return E_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	0800a6a4 	.word	0x0800a6a4
 8002074:	0800a45c 	.word	0x0800a45c
 8002078:	2000156c 	.word	0x2000156c
 800207c:	0800a424 	.word	0x0800a424
 8002080:	0800a3f4 	.word	0x0800a3f4
 8002084:	0800a438 	.word	0x0800a438

08002088 <CheckVoltage>:
#include "VoltageMonitor.h"

void CheckVoltage()
{
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b096      	sub	sp, #88	@ 0x58
 800208c:	af04      	add	r7, sp, #16
  const float SupplyVoltage = 3.0;
 800208e:	4bb7      	ldr	r3, [pc, #732]	@ (800236c <CheckVoltage+0x2e4>)
 8002090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const float ADCResolution = 4095.0;
 8002092:	4bb7      	ldr	r3, [pc, #732]	@ (8002370 <CheckVoltage+0x2e8>)
 8002094:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t adcResult = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  float voltage = 0;
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	643b      	str	r3, [r7, #64]	@ 0x40
  char strVoltage[50];

  LOGF(DL_DEBUG, "Operation Started!");
 80020a2:	2330      	movs	r3, #48	@ 0x30
 80020a4:	061a      	lsls	r2, r3, #24
 80020a6:	2330      	movs	r3, #48	@ 0x30
 80020a8:	041b      	lsls	r3, r3, #16
 80020aa:	431a      	orrs	r2, r3
 80020ac:	2330      	movs	r3, #48	@ 0x30
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	4313      	orrs	r3, r2
 80020b2:	2230      	movs	r2, #48	@ 0x30
 80020b4:	ea43 0102 	orr.w	r1, r3, r2
 80020b8:	2376      	movs	r3, #118	@ 0x76
 80020ba:	061a      	lsls	r2, r3, #24
 80020bc:	234d      	movs	r3, #77	@ 0x4d
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	431a      	orrs	r2, r3
 80020c2:	236f      	movs	r3, #111	@ 0x6f
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	4313      	orrs	r3, r2
 80020c8:	226e      	movs	r2, #110	@ 0x6e
 80020ca:	431a      	orrs	r2, r3
 80020cc:	4ba9      	ldr	r3, [pc, #676]	@ (8002374 <CheckVoltage+0x2ec>)
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	4ba9      	ldr	r3, [pc, #676]	@ (8002378 <CheckVoltage+0x2f0>)
 80020d2:	2005      	movs	r0, #5
 80020d4:	f7ff fa84 	bl	80015e0 <DLTuc_LogOutVarArgs>
  if (HAL_ADC_PollForConversion(&hadc1, 20) == HAL_OK)
 80020d8:	2114      	movs	r1, #20
 80020da:	48a8      	ldr	r0, [pc, #672]	@ (800237c <CheckVoltage+0x2f4>)
 80020dc:	f001 f8fe 	bl	80032dc <HAL_ADC_PollForConversion>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d136      	bne.n	8002154 <CheckVoltage+0xcc>
  {

    adcResult = HAL_ADC_GetValue(&hadc1);
 80020e6:	48a5      	ldr	r0, [pc, #660]	@ (800237c <CheckVoltage+0x2f4>)
 80020e8:	f001 f983 	bl	80033f2 <HAL_ADC_GetValue>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    voltage = (SupplyVoltage * adcResult) / ADCResolution;
 80020f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020fe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002102:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002106:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800210a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800210e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    HAL_ADC_Start(&hadc1);
 8002112:	489a      	ldr	r0, [pc, #616]	@ (800237c <CheckVoltage+0x2f4>)
 8002114:	f001 f810 	bl	8003138 <HAL_ADC_Start>
    voltage = roundf(10 * voltage) / 10;
 8002118:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800211c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002124:	eeb0 0a67 	vmov.f32	s0, s15
 8002128:	f005 fb00 	bl	800772c <roundf>
 800212c:	eeb0 7a40 	vmov.f32	s14, s0
 8002130:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002138:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    gcvt(voltage, 6, strVoltage);
 800213c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800213e:	f7fe f9fb 	bl	8000538 <__aeabi_f2d>
 8002142:	4604      	mov	r4, r0
 8002144:	460d      	mov	r5, r1
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	2006      	movs	r0, #6
 800214c:	ec45 4b10 	vmov	d0, r4, r5
 8002150:	f005 fb10 	bl	8007774 <gcvt>
  }

  LOGF(DL_DEBUG, "ReadADC: %d  |  Voltage: %s", adcResult, strVoltage);
 8002154:	2330      	movs	r3, #48	@ 0x30
 8002156:	061a      	lsls	r2, r3, #24
 8002158:	2330      	movs	r3, #48	@ 0x30
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	431a      	orrs	r2, r3
 800215e:	2330      	movs	r3, #48	@ 0x30
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	4313      	orrs	r3, r2
 8002164:	2230      	movs	r2, #48	@ 0x30
 8002166:	ea43 0102 	orr.w	r1, r3, r2
 800216a:	2376      	movs	r3, #118	@ 0x76
 800216c:	061a      	lsls	r2, r3, #24
 800216e:	234d      	movs	r3, #77	@ 0x4d
 8002170:	041b      	lsls	r3, r3, #16
 8002172:	431a      	orrs	r2, r3
 8002174:	236f      	movs	r3, #111	@ 0x6f
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	4313      	orrs	r3, r2
 800217a:	226e      	movs	r2, #110	@ 0x6e
 800217c:	ea43 0002 	orr.w	r0, r3, r2
 8002180:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8002184:	1d3a      	adds	r2, r7, #4
 8002186:	9202      	str	r2, [sp, #8]
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	4b7a      	ldr	r3, [pc, #488]	@ (8002374 <CheckVoltage+0x2ec>)
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4b7c      	ldr	r3, [pc, #496]	@ (8002380 <CheckVoltage+0x2f8>)
 8002190:	4602      	mov	r2, r0
 8002192:	2005      	movs	r0, #5
 8002194:	f7ff fa24 	bl	80015e0 <DLTuc_LogOutVarArgs>

  if (voltage >= 2.5)
 8002198:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800219c:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80021a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a8:	db5b      	blt.n	8002262 <CheckVoltage+0x1da>
  {
    LOGF(DL_DEBUG, "OverVoltage detected!");
 80021aa:	2330      	movs	r3, #48	@ 0x30
 80021ac:	061a      	lsls	r2, r3, #24
 80021ae:	2330      	movs	r3, #48	@ 0x30
 80021b0:	041b      	lsls	r3, r3, #16
 80021b2:	431a      	orrs	r2, r3
 80021b4:	2330      	movs	r3, #48	@ 0x30
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	4313      	orrs	r3, r2
 80021ba:	2230      	movs	r2, #48	@ 0x30
 80021bc:	ea43 0102 	orr.w	r1, r3, r2
 80021c0:	2376      	movs	r3, #118	@ 0x76
 80021c2:	061a      	lsls	r2, r3, #24
 80021c4:	234d      	movs	r3, #77	@ 0x4d
 80021c6:	041b      	lsls	r3, r3, #16
 80021c8:	431a      	orrs	r2, r3
 80021ca:	236f      	movs	r3, #111	@ 0x6f
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4313      	orrs	r3, r2
 80021d0:	226e      	movs	r2, #110	@ 0x6e
 80021d2:	431a      	orrs	r2, r3
 80021d4:	4b67      	ldr	r3, [pc, #412]	@ (8002374 <CheckVoltage+0x2ec>)
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002384 <CheckVoltage+0x2fc>)
 80021da:	2005      	movs	r0, #5
 80021dc:	f7ff fa00 	bl	80015e0 <DLTuc_LogOutVarArgs>
    if (Dem_SetEventStatus(OVER_VOLTAGE_ID, DEM_EVENT_STATUS_FAILED) != E_OK)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7ff fa7a 	bl	80016dc <Dem_SetEventStatus>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01e      	beq.n	800222c <CheckVoltage+0x1a4>
    {
      LOGFF(DL_FATAL, "Reporting Event failed!");
 80021ee:	2330      	movs	r3, #48	@ 0x30
 80021f0:	061a      	lsls	r2, r3, #24
 80021f2:	2330      	movs	r3, #48	@ 0x30
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	431a      	orrs	r2, r3
 80021f8:	2330      	movs	r3, #48	@ 0x30
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	4313      	orrs	r3, r2
 80021fe:	2230      	movs	r2, #48	@ 0x30
 8002200:	ea43 0102 	orr.w	r1, r3, r2
 8002204:	2376      	movs	r3, #118	@ 0x76
 8002206:	061a      	lsls	r2, r3, #24
 8002208:	234d      	movs	r3, #77	@ 0x4d
 800220a:	041b      	lsls	r3, r3, #16
 800220c:	431a      	orrs	r2, r3
 800220e:	236f      	movs	r3, #111	@ 0x6f
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	4313      	orrs	r3, r2
 8002214:	226e      	movs	r2, #110	@ 0x6e
 8002216:	431a      	orrs	r2, r3
 8002218:	4b56      	ldr	r3, [pc, #344]	@ (8002374 <CheckVoltage+0x2ec>)
 800221a:	9302      	str	r3, [sp, #8]
 800221c:	231d      	movs	r3, #29
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	4b59      	ldr	r3, [pc, #356]	@ (8002388 <CheckVoltage+0x300>)
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4b59      	ldr	r3, [pc, #356]	@ (800238c <CheckVoltage+0x304>)
 8002226:	2001      	movs	r0, #1
 8002228:	f7ff f9da 	bl	80015e0 <DLTuc_LogOutVarArgs>
    }
    LOGF(DL_DEBUG, "Reporting OverVoltage succeed!");
 800222c:	2330      	movs	r3, #48	@ 0x30
 800222e:	061a      	lsls	r2, r3, #24
 8002230:	2330      	movs	r3, #48	@ 0x30
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	431a      	orrs	r2, r3
 8002236:	2330      	movs	r3, #48	@ 0x30
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	4313      	orrs	r3, r2
 800223c:	2230      	movs	r2, #48	@ 0x30
 800223e:	ea43 0102 	orr.w	r1, r3, r2
 8002242:	2376      	movs	r3, #118	@ 0x76
 8002244:	061a      	lsls	r2, r3, #24
 8002246:	234d      	movs	r3, #77	@ 0x4d
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	431a      	orrs	r2, r3
 800224c:	236f      	movs	r3, #111	@ 0x6f
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	4313      	orrs	r3, r2
 8002252:	226e      	movs	r2, #110	@ 0x6e
 8002254:	431a      	orrs	r2, r3
 8002256:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <CheckVoltage+0x2ec>)
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4b4d      	ldr	r3, [pc, #308]	@ (8002390 <CheckVoltage+0x308>)
 800225c:	2005      	movs	r0, #5
 800225e:	f7ff f9bf 	bl	80015e0 <DLTuc_LogOutVarArgs>
  }
  if (voltage <= 1.5)
 8002262:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002266:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800226a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	d85b      	bhi.n	800232c <CheckVoltage+0x2a4>
  {
    LOGF(DL_DEBUG, "UnderVoltage detected!");
 8002274:	2330      	movs	r3, #48	@ 0x30
 8002276:	061a      	lsls	r2, r3, #24
 8002278:	2330      	movs	r3, #48	@ 0x30
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	431a      	orrs	r2, r3
 800227e:	2330      	movs	r3, #48	@ 0x30
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	4313      	orrs	r3, r2
 8002284:	2230      	movs	r2, #48	@ 0x30
 8002286:	ea43 0102 	orr.w	r1, r3, r2
 800228a:	2376      	movs	r3, #118	@ 0x76
 800228c:	061a      	lsls	r2, r3, #24
 800228e:	234d      	movs	r3, #77	@ 0x4d
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	236f      	movs	r3, #111	@ 0x6f
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	4313      	orrs	r3, r2
 800229a:	226e      	movs	r2, #110	@ 0x6e
 800229c:	431a      	orrs	r2, r3
 800229e:	4b35      	ldr	r3, [pc, #212]	@ (8002374 <CheckVoltage+0x2ec>)
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002394 <CheckVoltage+0x30c>)
 80022a4:	2005      	movs	r0, #5
 80022a6:	f7ff f99b 	bl	80015e0 <DLTuc_LogOutVarArgs>
    if (Dem_SetEventStatus(UNDER_VOLTAGE_ID, DEM_EVENT_STATUS_FAILED) != E_OK)
 80022aa:	2101      	movs	r1, #1
 80022ac:	2001      	movs	r0, #1
 80022ae:	f7ff fa15 	bl	80016dc <Dem_SetEventStatus>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01e      	beq.n	80022f6 <CheckVoltage+0x26e>
    {
      LOGFF(DL_FATAL, "Reporting Event failed!");
 80022b8:	2330      	movs	r3, #48	@ 0x30
 80022ba:	061a      	lsls	r2, r3, #24
 80022bc:	2330      	movs	r3, #48	@ 0x30
 80022be:	041b      	lsls	r3, r3, #16
 80022c0:	431a      	orrs	r2, r3
 80022c2:	2330      	movs	r3, #48	@ 0x30
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	4313      	orrs	r3, r2
 80022c8:	2230      	movs	r2, #48	@ 0x30
 80022ca:	ea43 0102 	orr.w	r1, r3, r2
 80022ce:	2376      	movs	r3, #118	@ 0x76
 80022d0:	061a      	lsls	r2, r3, #24
 80022d2:	234d      	movs	r3, #77	@ 0x4d
 80022d4:	041b      	lsls	r3, r3, #16
 80022d6:	431a      	orrs	r2, r3
 80022d8:	236f      	movs	r3, #111	@ 0x6f
 80022da:	021b      	lsls	r3, r3, #8
 80022dc:	4313      	orrs	r3, r2
 80022de:	226e      	movs	r2, #110	@ 0x6e
 80022e0:	431a      	orrs	r2, r3
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <CheckVoltage+0x2ec>)
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2326      	movs	r3, #38	@ 0x26
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	4b27      	ldr	r3, [pc, #156]	@ (8002388 <CheckVoltage+0x300>)
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	4b27      	ldr	r3, [pc, #156]	@ (800238c <CheckVoltage+0x304>)
 80022f0:	2001      	movs	r0, #1
 80022f2:	f7ff f975 	bl	80015e0 <DLTuc_LogOutVarArgs>
    }
    LOGF(DL_DEBUG, "Reporting UnderVoltage succeed");
 80022f6:	2330      	movs	r3, #48	@ 0x30
 80022f8:	061a      	lsls	r2, r3, #24
 80022fa:	2330      	movs	r3, #48	@ 0x30
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	431a      	orrs	r2, r3
 8002300:	2330      	movs	r3, #48	@ 0x30
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	4313      	orrs	r3, r2
 8002306:	2230      	movs	r2, #48	@ 0x30
 8002308:	ea43 0102 	orr.w	r1, r3, r2
 800230c:	2376      	movs	r3, #118	@ 0x76
 800230e:	061a      	lsls	r2, r3, #24
 8002310:	234d      	movs	r3, #77	@ 0x4d
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	431a      	orrs	r2, r3
 8002316:	236f      	movs	r3, #111	@ 0x6f
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	4313      	orrs	r3, r2
 800231c:	226e      	movs	r2, #110	@ 0x6e
 800231e:	431a      	orrs	r2, r3
 8002320:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <CheckVoltage+0x2ec>)
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4b1c      	ldr	r3, [pc, #112]	@ (8002398 <CheckVoltage+0x310>)
 8002326:	2005      	movs	r0, #5
 8002328:	f7ff f95a 	bl	80015e0 <DLTuc_LogOutVarArgs>
  }
  LOGF(DL_DEBUG, "Operation Finished");
 800232c:	2330      	movs	r3, #48	@ 0x30
 800232e:	061a      	lsls	r2, r3, #24
 8002330:	2330      	movs	r3, #48	@ 0x30
 8002332:	041b      	lsls	r3, r3, #16
 8002334:	431a      	orrs	r2, r3
 8002336:	2330      	movs	r3, #48	@ 0x30
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	4313      	orrs	r3, r2
 800233c:	2230      	movs	r2, #48	@ 0x30
 800233e:	ea43 0102 	orr.w	r1, r3, r2
 8002342:	2376      	movs	r3, #118	@ 0x76
 8002344:	061a      	lsls	r2, r3, #24
 8002346:	234d      	movs	r3, #77	@ 0x4d
 8002348:	041b      	lsls	r3, r3, #16
 800234a:	431a      	orrs	r2, r3
 800234c:	236f      	movs	r3, #111	@ 0x6f
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	4313      	orrs	r3, r2
 8002352:	226e      	movs	r2, #110	@ 0x6e
 8002354:	431a      	orrs	r2, r3
 8002356:	4b07      	ldr	r3, [pc, #28]	@ (8002374 <CheckVoltage+0x2ec>)
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4b10      	ldr	r3, [pc, #64]	@ (800239c <CheckVoltage+0x314>)
 800235c:	2005      	movs	r0, #5
 800235e:	f7ff f93f 	bl	80015e0 <DLTuc_LogOutVarArgs>
}
 8002362:	bf00      	nop
 8002364:	3748      	adds	r7, #72	@ 0x48
 8002366:	46bd      	mov	sp, r7
 8002368:	bdb0      	pop	{r4, r5, r7, pc}
 800236a:	bf00      	nop
 800236c:	40400000 	.word	0x40400000
 8002370:	457ff000 	.word	0x457ff000
 8002374:	0800a6b4 	.word	0x0800a6b4
 8002378:	0800a490 	.word	0x0800a490
 800237c:	20001524 	.word	0x20001524
 8002380:	0800a4b0 	.word	0x0800a4b0
 8002384:	0800a4d8 	.word	0x0800a4d8
 8002388:	0800a534 	.word	0x0800a534
 800238c:	0800a4fc 	.word	0x0800a4fc
 8002390:	0800a554 	.word	0x0800a554
 8002394:	0800a580 	.word	0x0800a580
 8002398:	0800a5a4 	.word	0x0800a5a4
 800239c:	0800a5d0 	.word	0x0800a5d0

080023a0 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
  DLTuc_RawDataReceiveDone(Size);
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe ff10 	bl	80011d4 <DLTuc_RawDataReceiveDone>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  DLTuc_MessageTransmitDone();
 80023c4:	f7ff f8b2 	bl	800152c <DLTuc_MessageTransmitDone>
}
 80023c8:	bf00      	nop
 80023ca:	3708      	adds	r7, #8
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <LLSerialTrDataFunctionC>:

void LLSerialTrDataFunctionC(uint8_t *DltLogData, uint8_t Size)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  HAL_UART_Transmit_DMA(&huart3, DltLogData, Size);
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4803      	ldr	r0, [pc, #12]	@ (80023f4 <LLSerialTrDataFunctionC+0x24>)
 80023e6:	f003 ffeb 	bl	80063c0 <HAL_UART_Transmit_DMA>
}
 80023ea:	bf00      	nop
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200015e0 	.word	0x200015e0

080023f8 <LLSerialRecDataFunctionC>:

void LLSerialRecDataFunctionC(uint8_t *DltLogData, uint16_t Size)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	807b      	strh	r3, [r7, #2]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, DltLogData, Size);
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	461a      	mov	r2, r3
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4803      	ldr	r0, [pc, #12]	@ (8002418 <LLSerialRecDataFunctionC+0x20>)
 800240c:	f004 f848 	bl	80064a0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200015e0 	.word	0x200015e0

0800241c <DltInjectDataRcvd>:

void DltInjectDataRcvd(uint32_t AppId, uint32_t ConId, uint32_t ServId, uint8_t *Data, uint16_t Size)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af04      	add	r7, sp, #16
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  LOGL(DL_INFO, "RecInjectionData: %s, ServId: %d Size: %d", Data, ServId, Size);
 800242a:	2330      	movs	r3, #48	@ 0x30
 800242c:	061a      	lsls	r2, r3, #24
 800242e:	2330      	movs	r3, #48	@ 0x30
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	2330      	movs	r3, #48	@ 0x30
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	4313      	orrs	r3, r2
 800243a:	2230      	movs	r2, #48	@ 0x30
 800243c:	ea43 0102 	orr.w	r1, r3, r2
 8002440:	234d      	movs	r3, #77	@ 0x4d
 8002442:	061a      	lsls	r2, r3, #24
 8002444:	2341      	movs	r3, #65	@ 0x41
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	431a      	orrs	r2, r3
 800244a:	2349      	movs	r3, #73	@ 0x49
 800244c:	021b      	lsls	r3, r3, #8
 800244e:	4313      	orrs	r3, r2
 8002450:	224e      	movs	r2, #78	@ 0x4e
 8002452:	431a      	orrs	r2, r3
 8002454:	8b3b      	ldrh	r3, [r7, #24]
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	4b03      	ldr	r3, [pc, #12]	@ (8002470 <DltInjectDataRcvd+0x54>)
 8002462:	2004      	movs	r0, #4
 8002464:	f7ff f8bc 	bl	80015e0 <DLTuc_LogOutVarArgs>
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	0800a5f0 	.word	0x0800a5f0

08002474 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == SWT1_Pin)
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002484:	d102      	bne.n	800248c <HAL_GPIO_EXTI_Callback+0x18>
  {
    clearDtcFlag = true;
 8002486:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <HAL_GPIO_EXTI_Callback+0x34>)
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
  }
  if (GPIO_Pin == SWT2_Pin)
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002492:	d102      	bne.n	800249a <HAL_GPIO_EXTI_Callback+0x26>
  {
    readDtcFlag = true;
 8002494:	4b05      	ldr	r3, [pc, #20]	@ (80024ac <HAL_GPIO_EXTI_Callback+0x38>)
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
  }
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	200016f0 	.word	0x200016f0
 80024ac:	200016f1 	.word	0x200016f1

080024b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b4:	f000 fd66 	bl	8002f84 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b8:	f000 f88a 	bl	80025d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024bc:	f000 f9ec 	bl	8002898 <MX_GPIO_Init>
  MX_DMA_Init();
 80024c0:	f000 f9c2 	bl	8002848 <MX_DMA_Init>
  MX_I2C1_Init();
 80024c4:	f000 f942 	bl	800274c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80024c8:	f000 f994 	bl	80027f4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80024cc:	f000 f8ec 	bl	80026a8 <MX_ADC1_Init>
  MX_RTC_Init();
 80024d0:	f000 f96a 	bl	80027a8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /*Register Low Level Transmit/Receive functions for DLTuc Library*/
  DLTuc_RegisterTransmitSerialDataFunction(LLSerialTrDataFunctionC);
 80024d4:	4833      	ldr	r0, [pc, #204]	@ (80025a4 <main+0xf4>)
 80024d6:	f7fe ffe5 	bl	80014a4 <DLTuc_RegisterTransmitSerialDataFunction>
  DLTuc_RegisterReceiveSerialDataFunction(LLSerialRecDataFunctionC);
 80024da:	4833      	ldr	r0, [pc, #204]	@ (80025a8 <main+0xf8>)
 80024dc:	f7fe ffca 	bl	8001474 <DLTuc_RegisterReceiveSerialDataFunction>

  DLTuc_RegisterGetTimeStampMsCallback(HAL_GetTick); /*Register GetSysTime function*/
 80024e0:	4832      	ldr	r0, [pc, #200]	@ (80025ac <main+0xfc>)
 80024e2:	f7ff f8eb 	bl	80016bc <DLTuc_RegisterGetTimeStampMsCallback>
  /*The function "GetSysTime" must return the time in ms*/

  DLTuc_RegisterInjectionDataReceivedCb(DltInjectDataRcvd);
 80024e6:	4832      	ldr	r0, [pc, #200]	@ (80025b0 <main+0x100>)
 80024e8:	f7fe ffb4 	bl	8001454 <DLTuc_RegisterInjectionDataReceivedCb>

  LOGL(DL_INFO, "Start HAL ADC");
 80024ec:	2330      	movs	r3, #48	@ 0x30
 80024ee:	061a      	lsls	r2, r3, #24
 80024f0:	2330      	movs	r3, #48	@ 0x30
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	431a      	orrs	r2, r3
 80024f6:	2330      	movs	r3, #48	@ 0x30
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	4313      	orrs	r3, r2
 80024fc:	2230      	movs	r2, #48	@ 0x30
 80024fe:	ea43 0102 	orr.w	r1, r3, r2
 8002502:	234d      	movs	r3, #77	@ 0x4d
 8002504:	061a      	lsls	r2, r3, #24
 8002506:	2341      	movs	r3, #65	@ 0x41
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	431a      	orrs	r2, r3
 800250c:	2349      	movs	r3, #73	@ 0x49
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4313      	orrs	r3, r2
 8002512:	224e      	movs	r2, #78	@ 0x4e
 8002514:	431a      	orrs	r2, r3
 8002516:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <main+0x104>)
 8002518:	2004      	movs	r0, #4
 800251a:	f7ff f861 	bl	80015e0 <DLTuc_LogOutVarArgs>
  HAL_ADC_Start(&hadc1);
 800251e:	4826      	ldr	r0, [pc, #152]	@ (80025b8 <main+0x108>)
 8002520:	f000 fe0a 	bl	8003138 <HAL_ADC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (clearDtcFlag)
 8002524:	4b25      	ldr	r3, [pc, #148]	@ (80025bc <main+0x10c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d004      	beq.n	8002536 <main+0x86>
    {
      ClearAllDtc();
 800252c:	f7ff fbfa 	bl	8001d24 <ClearAllDtc>
      clearDtcFlag = false;
 8002530:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <main+0x10c>)
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
    }

    if (readDtcFlag)
 8002536:	4b22      	ldr	r3, [pc, #136]	@ (80025c0 <main+0x110>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <main+0x98>
    {
      ReadAllDtc();
 800253e:	f7ff fc43 	bl	8001dc8 <ReadAllDtc>
      readDtcFlag = false;
 8002542:	4b1f      	ldr	r3, [pc, #124]	@ (80025c0 <main+0x110>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
    }

    msNow = HAL_GetTick();
 8002548:	f000 fd82 	bl	8003050 <HAL_GetTick>
 800254c:	4603      	mov	r3, r0
 800254e:	4a1d      	ldr	r2, [pc, #116]	@ (80025c4 <main+0x114>)
 8002550:	6013      	str	r3, [r2, #0]
    if (msNow - msLast >= 3000)
 8002552:	4b1c      	ldr	r3, [pc, #112]	@ (80025c4 <main+0x114>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <main+0x118>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002560:	4293      	cmp	r3, r2
 8002562:	d9df      	bls.n	8002524 <main+0x74>
    {
      LOGL(DL_INFO, "Call ADC Monitor check");
 8002564:	2330      	movs	r3, #48	@ 0x30
 8002566:	061a      	lsls	r2, r3, #24
 8002568:	2330      	movs	r3, #48	@ 0x30
 800256a:	041b      	lsls	r3, r3, #16
 800256c:	431a      	orrs	r2, r3
 800256e:	2330      	movs	r3, #48	@ 0x30
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	4313      	orrs	r3, r2
 8002574:	2230      	movs	r2, #48	@ 0x30
 8002576:	ea43 0102 	orr.w	r1, r3, r2
 800257a:	234d      	movs	r3, #77	@ 0x4d
 800257c:	061a      	lsls	r2, r3, #24
 800257e:	2341      	movs	r3, #65	@ 0x41
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	431a      	orrs	r2, r3
 8002584:	2349      	movs	r3, #73	@ 0x49
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	4313      	orrs	r3, r2
 800258a:	224e      	movs	r2, #78	@ 0x4e
 800258c:	431a      	orrs	r2, r3
 800258e:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <main+0x11c>)
 8002590:	2004      	movs	r0, #4
 8002592:	f7ff f825 	bl	80015e0 <DLTuc_LogOutVarArgs>
      CheckVoltage();
 8002596:	f7ff fd77 	bl	8002088 <CheckVoltage>
      msLast = msNow;
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <main+0x114>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <main+0x118>)
 80025a0:	6013      	str	r3, [r2, #0]
    if (clearDtcFlag)
 80025a2:	e7bf      	b.n	8002524 <main+0x74>
 80025a4:	080023d1 	.word	0x080023d1
 80025a8:	080023f9 	.word	0x080023f9
 80025ac:	08003051 	.word	0x08003051
 80025b0:	0800241d 	.word	0x0800241d
 80025b4:	0800a61c 	.word	0x0800a61c
 80025b8:	20001524 	.word	0x20001524
 80025bc:	200016f0 	.word	0x200016f0
 80025c0:	200016f1 	.word	0x200016f1
 80025c4:	200016e8 	.word	0x200016e8
 80025c8:	200016ec 	.word	0x200016ec
 80025cc:	0800a62c 	.word	0x0800a62c

080025d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b094      	sub	sp, #80	@ 0x50
 80025d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d6:	f107 0320 	add.w	r3, r7, #32
 80025da:	2230      	movs	r2, #48	@ 0x30
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f005 fa1a 	bl	8007a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e4:	f107 030c 	add.w	r3, r7, #12
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <SystemClock_Config+0xd0>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	4a28      	ldr	r2, [pc, #160]	@ (80026a0 <SystemClock_Config+0xd0>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002602:	6413      	str	r3, [r2, #64]	@ 0x40
 8002604:	4b26      	ldr	r3, [pc, #152]	@ (80026a0 <SystemClock_Config+0xd0>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002610:	2300      	movs	r3, #0
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	4b23      	ldr	r3, [pc, #140]	@ (80026a4 <SystemClock_Config+0xd4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a22      	ldr	r2, [pc, #136]	@ (80026a4 <SystemClock_Config+0xd4>)
 800261a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <SystemClock_Config+0xd4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002628:	607b      	str	r3, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 800262c:	230a      	movs	r3, #10
 800262e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002630:	2301      	movs	r3, #1
 8002632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002634:	2310      	movs	r3, #16
 8002636:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002638:	2301      	movs	r3, #1
 800263a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800263c:	2302      	movs	r3, #2
 800263e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002640:	2300      	movs	r3, #0
 8002642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002644:	2308      	movs	r3, #8
 8002646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002648:	2332      	movs	r3, #50	@ 0x32
 800264a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800264c:	2302      	movs	r3, #2
 800264e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002650:	2307      	movs	r3, #7
 8002652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002654:	f107 0320 	add.w	r3, r7, #32
 8002658:	4618      	mov	r0, r3
 800265a:	f002 ffe1 	bl	8005620 <HAL_RCC_OscConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002664:	f000 f998 	bl	8002998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002668:	230f      	movs	r3, #15
 800266a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800266c:	2302      	movs	r3, #2
 800266e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002674:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800267a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800267e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f003 fa42 	bl	8005b10 <HAL_RCC_ClockConfig>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002692:	f000 f981 	bl	8002998 <Error_Handler>
  }
}
 8002696:	bf00      	nop
 8002698:	3750      	adds	r7, #80	@ 0x50
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000

080026a8 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026ae:	463b      	mov	r3, r7
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80026ba:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026bc:	4a21      	ldr	r2, [pc, #132]	@ (8002744 <MX_ADC1_Init+0x9c>)
 80026be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80026cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026d8:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026e0:	4b17      	ldr	r3, [pc, #92]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026e6:	4b16      	ldr	r3, [pc, #88]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026e8:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <MX_ADC1_Init+0xa0>)
 80026ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026ec:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80026f2:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026f8:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <MX_ADC1_Init+0x98>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002700:	4b0f      	ldr	r3, [pc, #60]	@ (8002740 <MX_ADC1_Init+0x98>)
 8002702:	2201      	movs	r2, #1
 8002704:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002706:	480e      	ldr	r0, [pc, #56]	@ (8002740 <MX_ADC1_Init+0x98>)
 8002708:	f000 fcd2 	bl	80030b0 <HAL_ADC_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002712:	f000 f941 	bl	8002998 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 8002716:	2300      	movs	r3, #0
 8002718:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002722:	463b      	mov	r3, r7
 8002724:	4619      	mov	r1, r3
 8002726:	4806      	ldr	r0, [pc, #24]	@ (8002740 <MX_ADC1_Init+0x98>)
 8002728:	f000 fe70 	bl	800340c <HAL_ADC_ConfigChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002732:	f000 f931 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20001524 	.word	0x20001524
 8002744:	40012000 	.word	0x40012000
 8002748:	0f000001 	.word	0x0f000001

0800274c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002750:	4b12      	ldr	r3, [pc, #72]	@ (800279c <MX_I2C1_Init+0x50>)
 8002752:	4a13      	ldr	r2, [pc, #76]	@ (80027a0 <MX_I2C1_Init+0x54>)
 8002754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <MX_I2C1_Init+0x50>)
 8002758:	4a12      	ldr	r2, [pc, #72]	@ (80027a4 <MX_I2C1_Init+0x58>)
 800275a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800275c:	4b0f      	ldr	r3, [pc, #60]	@ (800279c <MX_I2C1_Init+0x50>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002762:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <MX_I2C1_Init+0x50>)
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <MX_I2C1_Init+0x50>)
 800276a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800276e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <MX_I2C1_Init+0x50>)
 8002772:	2200      	movs	r2, #0
 8002774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002776:	4b09      	ldr	r3, [pc, #36]	@ (800279c <MX_I2C1_Init+0x50>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800277c:	4b07      	ldr	r3, [pc, #28]	@ (800279c <MX_I2C1_Init+0x50>)
 800277e:	2200      	movs	r2, #0
 8002780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <MX_I2C1_Init+0x50>)
 8002784:	2200      	movs	r2, #0
 8002786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002788:	4804      	ldr	r0, [pc, #16]	@ (800279c <MX_I2C1_Init+0x50>)
 800278a:	f001 ff25 	bl	80045d8 <HAL_I2C_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002794:	f000 f900 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	2000156c 	.word	0x2000156c
 80027a0:	40005400 	.word	0x40005400
 80027a4:	000186a0 	.word	0x000186a0

080027a8 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	@ (80027ec <MX_RTC_Init+0x44>)
 80027ae:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <MX_RTC_Init+0x48>)
 80027b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	@ (80027ec <MX_RTC_Init+0x44>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027b8:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <MX_RTC_Init+0x44>)
 80027ba:	227f      	movs	r2, #127	@ 0x7f
 80027bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027be:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <MX_RTC_Init+0x44>)
 80027c0:	22ff      	movs	r2, #255	@ 0xff
 80027c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027c4:	4b09      	ldr	r3, [pc, #36]	@ (80027ec <MX_RTC_Init+0x44>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <MX_RTC_Init+0x44>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <MX_RTC_Init+0x44>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027d6:	4805      	ldr	r0, [pc, #20]	@ (80027ec <MX_RTC_Init+0x44>)
 80027d8:	f003 fc9c 	bl	8006114 <HAL_RTC_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80027e2:	f000 f8d9 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200015c0 	.word	0x200015c0
 80027f0:	40002800 	.word	0x40002800

080027f4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <MX_USART3_UART_Init+0x4c>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	@ (8002844 <MX_USART3_UART_Init+0x50>)
 80027fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027fe:	4b10      	ldr	r3, [pc, #64]	@ (8002840 <MX_USART3_UART_Init+0x4c>)
 8002800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002806:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <MX_USART3_UART_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <MX_USART3_UART_Init+0x4c>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002812:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <MX_USART3_UART_Init+0x4c>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002818:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <MX_USART3_UART_Init+0x4c>)
 800281a:	220c      	movs	r2, #12
 800281c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800281e:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <MX_USART3_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <MX_USART3_UART_Init+0x4c>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800282a:	4805      	ldr	r0, [pc, #20]	@ (8002840 <MX_USART3_UART_Init+0x4c>)
 800282c:	f003 fd78 	bl	8006320 <HAL_UART_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002836:	f000 f8af 	bl	8002998 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	200015e0 	.word	0x200015e0
 8002844:	40004800 	.word	0x40004800

08002848 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	4b10      	ldr	r3, [pc, #64]	@ (8002894 <MX_DMA_Init+0x4c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	4a0f      	ldr	r2, [pc, #60]	@ (8002894 <MX_DMA_Init+0x4c>)
 8002858:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800285c:	6313      	str	r3, [r2, #48]	@ 0x30
 800285e:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <MX_DMA_Init+0x4c>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	200c      	movs	r0, #12
 8002870:	f001 f8c5 	bl	80039fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002874:	200c      	movs	r0, #12
 8002876:	f001 f8de 	bl	8003a36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	200e      	movs	r0, #14
 8002880:	f001 f8bd 	bl	80039fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002884:	200e      	movs	r0, #14
 8002886:	f001 f8d6 	bl	8003a36 <HAL_NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800

08002898 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
 80028ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b36      	ldr	r3, [pc, #216]	@ (800298c <MX_GPIO_Init+0xf4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a35      	ldr	r2, [pc, #212]	@ (800298c <MX_GPIO_Init+0xf4>)
 80028b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b33      	ldr	r3, [pc, #204]	@ (800298c <MX_GPIO_Init+0xf4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b2f      	ldr	r3, [pc, #188]	@ (800298c <MX_GPIO_Init+0xf4>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a2e      	ldr	r2, [pc, #184]	@ (800298c <MX_GPIO_Init+0xf4>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b2c      	ldr	r3, [pc, #176]	@ (800298c <MX_GPIO_Init+0xf4>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b28      	ldr	r3, [pc, #160]	@ (800298c <MX_GPIO_Init+0xf4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a27      	ldr	r2, [pc, #156]	@ (800298c <MX_GPIO_Init+0xf4>)
 80028f0:	f043 0308 	orr.w	r3, r3, #8
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b25      	ldr	r3, [pc, #148]	@ (800298c <MX_GPIO_Init+0xf4>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	607b      	str	r3, [r7, #4]
 8002906:	4b21      	ldr	r3, [pc, #132]	@ (800298c <MX_GPIO_Init+0xf4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	4a20      	ldr	r2, [pc, #128]	@ (800298c <MX_GPIO_Init+0xf4>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	6313      	str	r3, [r2, #48]	@ 0x30
 8002912:	4b1e      	ldr	r3, [pc, #120]	@ (800298c <MX_GPIO_Init+0xf4>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <MX_GPIO_Init+0xf4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a19      	ldr	r2, [pc, #100]	@ (800298c <MX_GPIO_Init+0xf4>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b17      	ldr	r3, [pc, #92]	@ (800298c <MX_GPIO_Init+0xf4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SWT2_Pin */
  GPIO_InitStruct.Pin = SWT2_Pin;
 800293a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800293e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002940:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWT2_GPIO_Port, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	480f      	ldr	r0, [pc, #60]	@ (8002990 <MX_GPIO_Init+0xf8>)
 8002952:	f001 fc8d 	bl	8004270 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWT1_Pin */
  GPIO_InitStruct.Pin = SWT1_Pin;
 8002956:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800295a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800295c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SWT1_GPIO_Port, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	4809      	ldr	r0, [pc, #36]	@ (8002994 <MX_GPIO_Init+0xfc>)
 800296e:	f001 fc7f 	bl	8004270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8002972:	2201      	movs	r2, #1
 8002974:	2100      	movs	r1, #0
 8002976:	2028      	movs	r0, #40	@ 0x28
 8002978:	f001 f841 	bl	80039fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800297c:	2028      	movs	r0, #40	@ 0x28
 800297e:	f001 f85a 	bl	8003a36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002982:	bf00      	nop
 8002984:	3728      	adds	r7, #40	@ 0x28
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	40020000 	.word	0x40020000
 8002994:	40020800 	.word	0x40020800

08002998 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800299c:	b672      	cpsid	i
}
 800299e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <Error_Handler+0x8>

080029a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	4a0f      	ldr	r2, [pc, #60]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c2:	607b      	str	r3, [r7, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	4a08      	ldr	r2, [pc, #32]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d6:	4b06      	ldr	r3, [pc, #24]	@ (80029f0 <HAL_MspInit+0x4c>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029de:	603b      	str	r3, [r7, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029e2:	2007      	movs	r0, #7
 80029e4:	f001 f800 	bl	80039e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	@ 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fc:	f107 0314 	add.w	r3, r7, #20
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a17      	ldr	r2, [pc, #92]	@ (8002a70 <HAL_ADC_MspInit+0x7c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d127      	bne.n	8002a66 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	4b16      	ldr	r3, [pc, #88]	@ (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1e:	4a15      	ldr	r2, [pc, #84]	@ (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a42:	4b0c      	ldr	r3, [pc, #48]	@ (8002a74 <HAL_ADC_MspInit+0x80>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a52:	2303      	movs	r3, #3
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4805      	ldr	r0, [pc, #20]	@ (8002a78 <HAL_ADC_MspInit+0x84>)
 8002a62:	f001 fc05 	bl	8004270 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	@ 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40012000 	.word	0x40012000
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40020000 	.word	0x40020000

08002a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	@ 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	@ (8002b00 <HAL_I2C_MspInit+0x84>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d12c      	bne.n	8002af8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	4b18      	ldr	r3, [pc, #96]	@ (8002b04 <HAL_I2C_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a17      	ldr	r2, [pc, #92]	@ (8002b04 <HAL_I2C_MspInit+0x88>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <HAL_I2C_MspInit+0x88>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002aba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ac0:	2312      	movs	r3, #18
 8002ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002acc:	2304      	movs	r3, #4
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	480c      	ldr	r0, [pc, #48]	@ (8002b08 <HAL_I2C_MspInit+0x8c>)
 8002ad8:	f001 fbca 	bl	8004270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_I2C_MspInit+0x88>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <HAL_I2C_MspInit+0x88>)
 8002ae6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <HAL_I2C_MspInit+0x88>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002af8:	bf00      	nop
 8002afa:	3728      	adds	r7, #40	@ 0x28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40005400 	.word	0x40005400
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40020400 	.word	0x40020400

08002b0c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	605a      	str	r2, [r3, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
 8002b20:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <HAL_RTC_MspInit+0x4c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d111      	bne.n	8002b50 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b34:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b36:	f107 0308 	add.w	r3, r7, #8
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fa08 	bl	8005f50 <HAL_RCCEx_PeriphCLKConfig>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002b46:	f7ff ff27 	bl	8002998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002b4a:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <HAL_RTC_MspInit+0x50>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40002800 	.word	0x40002800
 8002b5c:	42470e3c 	.word	0x42470e3c

08002b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002cb0 <HAL_UART_MspInit+0x150>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	f040 8091 	bne.w	8002ca6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb4 <HAL_UART_MspInit+0x154>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	4a49      	ldr	r2, [pc, #292]	@ (8002cb4 <HAL_UART_MspInit+0x154>)
 8002b8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b94:	4b47      	ldr	r3, [pc, #284]	@ (8002cb4 <HAL_UART_MspInit+0x154>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	4b43      	ldr	r3, [pc, #268]	@ (8002cb4 <HAL_UART_MspInit+0x154>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	4a42      	ldr	r2, [pc, #264]	@ (8002cb4 <HAL_UART_MspInit+0x154>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb0:	4b40      	ldr	r3, [pc, #256]	@ (8002cb4 <HAL_UART_MspInit+0x154>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bbc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bce:	2307      	movs	r3, #7
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bd2:	f107 0314 	add.w	r3, r7, #20
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4837      	ldr	r0, [pc, #220]	@ (8002cb8 <HAL_UART_MspInit+0x158>)
 8002bda:	f001 fb49 	bl	8004270 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002bde:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002be0:	4a37      	ldr	r2, [pc, #220]	@ (8002cc0 <HAL_UART_MspInit+0x160>)
 8002be2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002be4:	4b35      	ldr	r3, [pc, #212]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002be6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002bea:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bec:	4b33      	ldr	r3, [pc, #204]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf2:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bf8:	4b30      	ldr	r3, [pc, #192]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002bfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bfe:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c00:	4b2e      	ldr	r3, [pc, #184]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c06:	4b2d      	ldr	r3, [pc, #180]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c12:	4b2a      	ldr	r3, [pc, #168]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c18:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c1e:	4827      	ldr	r0, [pc, #156]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002c20:	f000 ff24 	bl	8003a6c <HAL_DMA_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002c2a:	f7ff feb5 	bl	8002998 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a22      	ldr	r2, [pc, #136]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002c32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c34:	4a21      	ldr	r2, [pc, #132]	@ (8002cbc <HAL_UART_MspInit+0x15c>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002c3a:	4b22      	ldr	r3, [pc, #136]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c3c:	4a22      	ldr	r2, [pc, #136]	@ (8002cc8 <HAL_UART_MspInit+0x168>)
 8002c3e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002c40:	4b20      	ldr	r3, [pc, #128]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002c46:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c48:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c4a:	2240      	movs	r2, #64	@ 0x40
 8002c4c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c5a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c62:	4b18      	ldr	r3, [pc, #96]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c68:	4b16      	ldr	r3, [pc, #88]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c6e:	4b15      	ldr	r3, [pc, #84]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c74:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c7a:	4812      	ldr	r0, [pc, #72]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c7c:	f000 fef6 	bl	8003a6c <HAL_DMA_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002c86:	f7ff fe87 	bl	8002998 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c90:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc4 <HAL_UART_MspInit+0x164>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	2027      	movs	r0, #39	@ 0x27
 8002c9c:	f000 feaf 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002ca0:	2027      	movs	r0, #39	@ 0x27
 8002ca2:	f000 fec8 	bl	8003a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ca6:	bf00      	nop
 8002ca8:	3728      	adds	r7, #40	@ 0x28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	40020c00 	.word	0x40020c00
 8002cbc:	20001628 	.word	0x20001628
 8002cc0:	40026028 	.word	0x40026028
 8002cc4:	20001688 	.word	0x20001688
 8002cc8:	40026058 	.word	0x40026058

08002ccc <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd0:	bf00      	nop
 8002cd2:	e7fd      	b.n	8002cd0 <NMI_Handler+0x4>

08002cd4 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <HardFault_Handler+0x4>

08002cdc <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <MemManage_Handler+0x4>

08002ce4 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <BusFault_Handler+0x4>

08002cec <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <UsageFault_Handler+0x4>

08002cf4 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d06:	bf00      	nop
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d22:	f000 f981 	bl	8003028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d26:	bf00      	nop
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d30:	4802      	ldr	r0, [pc, #8]	@ (8002d3c <DMA1_Stream1_IRQHandler+0x10>)
 8002d32:	f001 f833 	bl	8003d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20001628 	.word	0x20001628

08002d40 <DMA1_Stream3_IRQHandler>:

/**
 * @brief This function handles DMA1 stream3 global interrupt.
 */
void DMA1_Stream3_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002d44:	4802      	ldr	r0, [pc, #8]	@ (8002d50 <DMA1_Stream3_IRQHandler+0x10>)
 8002d46:	f001 f829 	bl	8003d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	20001688 	.word	0x20001688

08002d54 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt.
 */
void USART3_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d58:	4802      	ldr	r0, [pc, #8]	@ (8002d64 <USART3_IRQHandler+0x10>)
 8002d5a:	f003 fbff 	bl	800655c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200015e0 	.word	0x200015e0

08002d68 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWT1_Pin);
 8002d6c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002d70:	f001 fc1a 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SWT2_Pin);
 8002d74:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002d78:	f001 fc16 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return 1;
 8002d84:	2301      	movs	r3, #1
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <_kill>:

int _kill(int pid, int sig)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d9a:	f004 fe8b 	bl	8007ab4 <__errno>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2216      	movs	r2, #22
 8002da2:	601a      	str	r2, [r3, #0]
  return -1;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <_exit>:

void _exit(int status)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ffe7 	bl	8002d90 <_kill>
  while (1)
 8002dc2:	bf00      	nop
 8002dc4:	e7fd      	b.n	8002dc2 <_exit+0x12>

08002dc6 <_read>:
  {
  } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e00a      	b.n	8002dee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dd8:	f3af 8000 	nop.w
 8002ddc:	4601      	mov	r1, r0
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	60ba      	str	r2, [r7, #8]
 8002de4:	b2ca      	uxtb	r2, r1
 8002de6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3301      	adds	r3, #1
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	dbf0      	blt.n	8002dd8 <_read+0x12>
  }

  return len;
 8002df6:	687b      	ldr	r3, [r7, #4]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e009      	b.n	8002e26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	60ba      	str	r2, [r7, #8]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3301      	adds	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	dbf1      	blt.n	8002e12 <_write+0x12>
  }
  return len;
 8002e2e:	687b      	ldr	r3, [r7, #4]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <_close>:

int _close(int file)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e60:	605a      	str	r2, [r3, #4]
  return 0;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <_isatty>:

int _isatty(int file)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e78:	2301      	movs	r3, #1
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;             /* Symbol defined in the linker script */
  extern uint8_t _estack;          /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ea8:	4a14      	ldr	r2, [pc, #80]	@ (8002efc <_sbrk+0x5c>)
 8002eaa:	4b15      	ldr	r3, [pc, #84]	@ (8002f00 <_sbrk+0x60>)
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002eb4:	4b13      	ldr	r3, [pc, #76]	@ (8002f04 <_sbrk+0x64>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	@ (8002f04 <_sbrk+0x64>)
 8002ebe:	4a12      	ldr	r2, [pc, #72]	@ (8002f08 <_sbrk+0x68>)
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ec2:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <_sbrk+0x64>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d207      	bcs.n	8002ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ed0:	f004 fdf0 	bl	8007ab4 <__errno>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ede:	e009      	b.n	8002ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ee0:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <_sbrk+0x64>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ee6:	4b07      	ldr	r3, [pc, #28]	@ (8002f04 <_sbrk+0x64>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4413      	add	r3, r2
 8002eee:	4a05      	ldr	r2, [pc, #20]	@ (8002f04 <_sbrk+0x64>)
 8002ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20020000 	.word	0x20020000
 8002f00:	00000400 	.word	0x00000400
 8002f04:	200016f4 	.word	0x200016f4
 8002f08:	20001848 	.word	0x20001848

08002f0c <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8002f10:	4b06      	ldr	r3, [pc, #24]	@ (8002f2c <SystemInit+0x20>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f16:	4a05      	ldr	r2, [pc, #20]	@ (8002f2c <SystemInit+0x20>)
 8002f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                                                 /* USER_VECT_TAB_ADDRESS */
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f34:	480d      	ldr	r0, [pc, #52]	@ (8002f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f36:	490e      	ldr	r1, [pc, #56]	@ (8002f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f38:	4a0e      	ldr	r2, [pc, #56]	@ (8002f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f3c:	e002      	b.n	8002f44 <LoopCopyDataInit>

08002f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f42:	3304      	adds	r3, #4

08002f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f48:	d3f9      	bcc.n	8002f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f4a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f4c:	4c0b      	ldr	r4, [pc, #44]	@ (8002f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f50:	e001      	b.n	8002f56 <LoopFillZerobss>

08002f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f54:	3204      	adds	r2, #4

08002f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f58:	d3fb      	bcc.n	8002f52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f5a:	f7ff ffd7 	bl	8002f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f5e:	f004 fdaf 	bl	8007ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f62:	f7ff faa5 	bl	80024b0 <main>
  bx  lr    
 8002f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f70:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8002f74:	0800a94c 	.word	0x0800a94c
  ldr r2, =_sbss
 8002f78:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8002f7c:	20001848 	.word	0x20001848

08002f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f80:	e7fe      	b.n	8002f80 <ADC_IRQHandler>
	...

08002f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f88:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <HAL_Init+0x40>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002fc4 <HAL_Init+0x40>)
 8002f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <HAL_Init+0x40>)
 8002f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fa0:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a07      	ldr	r2, [pc, #28]	@ (8002fc4 <HAL_Init+0x40>)
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fac:	2003      	movs	r0, #3
 8002fae:	f000 fd1b 	bl	80039e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	f000 f808 	bl	8002fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fb8:	f7ff fcf4 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023c00 	.word	0x40023c00

08002fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fd0:	4b12      	ldr	r3, [pc, #72]	@ (800301c <HAL_InitTick+0x54>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b12      	ldr	r3, [pc, #72]	@ (8003020 <HAL_InitTick+0x58>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fd33 	bl	8003a52 <HAL_SYSTICK_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00e      	b.n	8003014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b0f      	cmp	r3, #15
 8002ffa:	d80a      	bhi.n	8003012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003004:	f000 fcfb 	bl	80039fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003008:	4a06      	ldr	r2, [pc, #24]	@ (8003024 <HAL_InitTick+0x5c>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20000220 	.word	0x20000220
 8003020:	20000228 	.word	0x20000228
 8003024:	20000224 	.word	0x20000224

08003028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_IncTick+0x20>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <HAL_IncTick+0x24>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4413      	add	r3, r2
 8003038:	4a04      	ldr	r2, [pc, #16]	@ (800304c <HAL_IncTick+0x24>)
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000228 	.word	0x20000228
 800304c:	200016f8 	.word	0x200016f8

08003050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return uwTick;
 8003054:	4b03      	ldr	r3, [pc, #12]	@ (8003064 <HAL_GetTick+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	200016f8 	.word	0x200016f8

08003068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff ffee 	bl	8003050 <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003080:	d005      	beq.n	800308e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003082:	4b0a      	ldr	r3, [pc, #40]	@ (80030ac <HAL_Delay+0x44>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800308e:	bf00      	nop
 8003090:	f7ff ffde 	bl	8003050 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	429a      	cmp	r2, r3
 800309e:	d8f7      	bhi.n	8003090 <HAL_Delay+0x28>
  {
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000228 	.word	0x20000228

080030b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e033      	b.n	800312e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fc90 	bl	80029f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f003 0310 	and.w	r3, r3, #16
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d118      	bne.n	8003120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030f6:	f023 0302 	bic.w	r3, r3, #2
 80030fa:	f043 0202 	orr.w	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 faa4 	bl	8003650 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	f043 0201 	orr.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40
 800311e:	e001      	b.n	8003124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_ADC_Start+0x1a>
 800314e:	2302      	movs	r3, #2
 8003150:	e0b2      	b.n	80032b8 <HAL_ADC_Start+0x180>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d018      	beq.n	800319a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003178:	4b52      	ldr	r3, [pc, #328]	@ (80032c4 <HAL_ADC_Start+0x18c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a52      	ldr	r2, [pc, #328]	@ (80032c8 <HAL_ADC_Start+0x190>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0c9a      	lsrs	r2, r3, #18
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800318c:	e002      	b.n	8003194 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	3b01      	subs	r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f9      	bne.n	800318e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d17a      	bne.n	800329e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031b0:	f023 0301 	bic.w	r3, r3, #1
 80031b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031e6:	d106      	bne.n	80031f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ec:	f023 0206 	bic.w	r2, r3, #6
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80031f4:	e002      	b.n	80031fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003204:	4b31      	ldr	r3, [pc, #196]	@ (80032cc <HAL_ADC_Start+0x194>)
 8003206:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003210:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2b00      	cmp	r3, #0
 800321c:	d12a      	bne.n	8003274 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2b      	ldr	r2, [pc, #172]	@ (80032d0 <HAL_ADC_Start+0x198>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d015      	beq.n	8003254 <HAL_ADC_Start+0x11c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a29      	ldr	r2, [pc, #164]	@ (80032d4 <HAL_ADC_Start+0x19c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d105      	bne.n	800323e <HAL_ADC_Start+0x106>
 8003232:	4b26      	ldr	r3, [pc, #152]	@ (80032cc <HAL_ADC_Start+0x194>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a25      	ldr	r2, [pc, #148]	@ (80032d8 <HAL_ADC_Start+0x1a0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d136      	bne.n	80032b6 <HAL_ADC_Start+0x17e>
 8003248:	4b20      	ldr	r3, [pc, #128]	@ (80032cc <HAL_ADC_Start+0x194>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	d130      	bne.n	80032b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d129      	bne.n	80032b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e020      	b.n	80032b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a15      	ldr	r2, [pc, #84]	@ (80032d0 <HAL_ADC_Start+0x198>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d11b      	bne.n	80032b6 <HAL_ADC_Start+0x17e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d114      	bne.n	80032b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	e00b      	b.n	80032b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f043 0210 	orr.w	r2, r3, #16
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	20000220 	.word	0x20000220
 80032c8:	431bde83 	.word	0x431bde83
 80032cc:	40012300 	.word	0x40012300
 80032d0:	40012000 	.word	0x40012000
 80032d4:	40012100 	.word	0x40012100
 80032d8:	40012200 	.word	0x40012200

080032dc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f8:	d113      	bne.n	8003322 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003308:	d10b      	bne.n	8003322 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f043 0220 	orr.w	r2, r3, #32
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e063      	b.n	80033ea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003322:	f7ff fe95 	bl	8003050 <HAL_GetTick>
 8003326:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003328:	e021      	b.n	800336e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003330:	d01d      	beq.n	800336e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d007      	beq.n	8003348 <HAL_ADC_PollForConversion+0x6c>
 8003338:	f7ff fe8a 	bl	8003050 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d212      	bcs.n	800336e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b02      	cmp	r3, #2
 8003354:	d00b      	beq.n	800336e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f043 0204 	orr.w	r2, r3, #4
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e03d      	b.n	80033ea <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b02      	cmp	r3, #2
 800337a:	d1d6      	bne.n	800332a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0212 	mvn.w	r2, #18
 8003384:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d123      	bne.n	80033e8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d11f      	bne.n	80033e8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d006      	beq.n	80033c4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d111      	bne.n	80033e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	f043 0201 	orr.w	r2, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x1c>
 8003424:	2302      	movs	r3, #2
 8003426:	e105      	b.n	8003634 <HAL_ADC_ConfigChannel+0x228>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b09      	cmp	r3, #9
 8003436:	d925      	bls.n	8003484 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	3b1e      	subs	r3, #30
 800344e:	2207      	movs	r2, #7
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43da      	mvns	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	400a      	ands	r2, r1
 800345c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68d9      	ldr	r1, [r3, #12]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	b29b      	uxth	r3, r3
 800346e:	4618      	mov	r0, r3
 8003470:	4603      	mov	r3, r0
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4403      	add	r3, r0
 8003476:	3b1e      	subs	r3, #30
 8003478:	409a      	lsls	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	e022      	b.n	80034ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6919      	ldr	r1, [r3, #16]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	4613      	mov	r3, r2
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4413      	add	r3, r2
 8003498:	2207      	movs	r2, #7
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	400a      	ands	r2, r1
 80034a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6919      	ldr	r1, [r3, #16]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4618      	mov	r0, r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4403      	add	r3, r0
 80034c0:	409a      	lsls	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b06      	cmp	r3, #6
 80034d0:	d824      	bhi.n	800351c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	3b05      	subs	r3, #5
 80034e4:	221f      	movs	r2, #31
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	400a      	ands	r2, r1
 80034f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	4618      	mov	r0, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	3b05      	subs	r3, #5
 800350e:	fa00 f203 	lsl.w	r2, r0, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	635a      	str	r2, [r3, #52]	@ 0x34
 800351a:	e04c      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b0c      	cmp	r3, #12
 8003522:	d824      	bhi.n	800356e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3b23      	subs	r3, #35	@ 0x23
 8003536:	221f      	movs	r2, #31
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43da      	mvns	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	400a      	ands	r2, r1
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	4618      	mov	r0, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	3b23      	subs	r3, #35	@ 0x23
 8003560:	fa00 f203 	lsl.w	r2, r0, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	631a      	str	r2, [r3, #48]	@ 0x30
 800356c:	e023      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	3b41      	subs	r3, #65	@ 0x41
 8003580:	221f      	movs	r2, #31
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43da      	mvns	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	400a      	ands	r2, r1
 800358e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	b29b      	uxth	r3, r3
 800359c:	4618      	mov	r0, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	3b41      	subs	r3, #65	@ 0x41
 80035aa:	fa00 f203 	lsl.w	r2, r0, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b6:	4b22      	ldr	r3, [pc, #136]	@ (8003640 <HAL_ADC_ConfigChannel+0x234>)
 80035b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a21      	ldr	r2, [pc, #132]	@ (8003644 <HAL_ADC_ConfigChannel+0x238>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d109      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x1cc>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b12      	cmp	r3, #18
 80035ca:	d105      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a19      	ldr	r2, [pc, #100]	@ (8003644 <HAL_ADC_ConfigChannel+0x238>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d123      	bne.n	800362a <HAL_ADC_ConfigChannel+0x21e>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d003      	beq.n	80035f2 <HAL_ADC_ConfigChannel+0x1e6>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b11      	cmp	r3, #17
 80035f0:	d11b      	bne.n	800362a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b10      	cmp	r3, #16
 8003604:	d111      	bne.n	800362a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003606:	4b10      	ldr	r3, [pc, #64]	@ (8003648 <HAL_ADC_ConfigChannel+0x23c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a10      	ldr	r2, [pc, #64]	@ (800364c <HAL_ADC_ConfigChannel+0x240>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	0c9a      	lsrs	r2, r3, #18
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800361c:	e002      	b.n	8003624 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3b01      	subs	r3, #1
 8003622:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f9      	bne.n	800361e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40012300 	.word	0x40012300
 8003644:	40012000 	.word	0x40012000
 8003648:	20000220 	.word	0x20000220
 800364c:	431bde83 	.word	0x431bde83

08003650 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003658:	4b79      	ldr	r3, [pc, #484]	@ (8003840 <ADC_Init+0x1f0>)
 800365a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	431a      	orrs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	021a      	lsls	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80036a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6899      	ldr	r1, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	4a58      	ldr	r2, [pc, #352]	@ (8003844 <ADC_Init+0x1f4>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6899      	ldr	r1, [r3, #8]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6899      	ldr	r1, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	e00f      	b.n	800374e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800373c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800374c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0202 	bic.w	r2, r2, #2
 800375c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	7e1b      	ldrb	r3, [r3, #24]
 8003768:	005a      	lsls	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800378a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800379a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	3b01      	subs	r3, #1
 80037a8:	035a      	lsls	r2, r3, #13
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	e007      	b.n	80037c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80037d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	3b01      	subs	r3, #1
 80037e0:	051a      	lsls	r2, r3, #20
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003806:	025a      	lsls	r2, r3, #9
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800381e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6899      	ldr	r1, [r3, #8]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	029a      	lsls	r2, r3, #10
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	40012300 	.word	0x40012300
 8003844:	0f000001 	.word	0x0f000001

08003848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003864:	4013      	ands	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387a:	4a04      	ldr	r2, [pc, #16]	@ (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	60d3      	str	r3, [r2, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003894:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 0307 	and.w	r3, r3, #7
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	db0b      	blt.n	80038d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	4907      	ldr	r1, [pc, #28]	@ (80038e4 <__NVIC_EnableIRQ+0x38>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2001      	movs	r0, #1
 80038ce:	fa00 f202 	lsl.w	r2, r0, r2
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db0a      	blt.n	8003912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	490c      	ldr	r1, [pc, #48]	@ (8003934 <__NVIC_SetPriority+0x4c>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	440b      	add	r3, r1
 800390c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003910:	e00a      	b.n	8003928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4908      	ldr	r1, [pc, #32]	@ (8003938 <__NVIC_SetPriority+0x50>)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	3b04      	subs	r3, #4
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	440b      	add	r3, r1
 8003926:	761a      	strb	r2, [r3, #24]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000e100 	.word	0xe000e100
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	@ 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f1c3 0307 	rsb	r3, r3, #7
 8003956:	2b04      	cmp	r3, #4
 8003958:	bf28      	it	cs
 800395a:	2304      	movcs	r3, #4
 800395c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3304      	adds	r3, #4
 8003962:	2b06      	cmp	r3, #6
 8003964:	d902      	bls.n	800396c <NVIC_EncodePriority+0x30>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3b03      	subs	r3, #3
 800396a:	e000      	b.n	800396e <NVIC_EncodePriority+0x32>
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	401a      	ands	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003984:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	43d9      	mvns	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	4313      	orrs	r3, r2
         );
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	@ 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b4:	d301      	bcc.n	80039ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00f      	b.n	80039da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ba:	4a0a      	ldr	r2, [pc, #40]	@ (80039e4 <SysTick_Config+0x40>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c2:	210f      	movs	r1, #15
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039c8:	f7ff ff8e 	bl	80038e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039cc:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <SysTick_Config+0x40>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d2:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <SysTick_Config+0x40>)
 80039d4:	2207      	movs	r2, #7
 80039d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	e000e010 	.word	0xe000e010

080039e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff29 	bl	8003848 <__NVIC_SetPriorityGrouping>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a10:	f7ff ff3e 	bl	8003890 <__NVIC_GetPriorityGrouping>
 8003a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f7ff ff8e 	bl	800393c <NVIC_EncodePriority>
 8003a20:	4602      	mov	r2, r0
 8003a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff5d 	bl	80038e8 <__NVIC_SetPriority>
}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff31 	bl	80038ac <__NVIC_EnableIRQ>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ffa2 	bl	80039a4 <SysTick_Config>
 8003a60:	4603      	mov	r3, r0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7ff faea 	bl	8003050 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e099      	b.n	8003bbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa8:	e00f      	b.n	8003aca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aaa:	f7ff fad1 	bl	8003050 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d908      	bls.n	8003aca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e078      	b.n	8003bbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e8      	bne.n	8003aaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <HAL_DMA_Init+0x158>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d107      	bne.n	8003b34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0307 	bic.w	r3, r3, #7
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d117      	bne.n	8003b8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fb01 	bl	8004178 <DMA_CheckFifoParam>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2240      	movs	r2, #64	@ 0x40
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e016      	b.n	8003bbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fab8 	bl	800410c <DMA_CalcBaseAndBitshift>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba4:	223f      	movs	r2, #63	@ 0x3f
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	f010803f 	.word	0xf010803f

08003bc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_DMA_Start_IT+0x26>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e040      	b.n	8003c70 <HAL_DMA_Start_IT+0xa8>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d12f      	bne.n	8003c62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 fa4a 	bl	80040b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c20:	223f      	movs	r2, #63	@ 0x3f
 8003c22:	409a      	lsls	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0216 	orr.w	r2, r2, #22
 8003c36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0208 	orr.w	r2, r2, #8
 8003c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e005      	b.n	8003c6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c84:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c86:	f7ff f9e3 	bl	8003050 <HAL_GetTick>
 8003c8a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d008      	beq.n	8003caa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2280      	movs	r2, #128	@ 0x80
 8003c9c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e052      	b.n	8003d50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0216 	bic.w	r2, r2, #22
 8003cb8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cc8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d103      	bne.n	8003cda <HAL_DMA_Abort+0x62>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0208 	bic.w	r2, r2, #8
 8003ce8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0201 	bic.w	r2, r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfa:	e013      	b.n	8003d24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cfc:	f7ff f9a8 	bl	8003050 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b05      	cmp	r3, #5
 8003d08:	d90c      	bls.n	8003d24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2203      	movs	r2, #3
 8003d14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e015      	b.n	8003d50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1e4      	bne.n	8003cfc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d36:	223f      	movs	r2, #63	@ 0x3f
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d004      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2280      	movs	r2, #128	@ 0x80
 8003d70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00c      	b.n	8003d90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2205      	movs	r2, #5
 8003d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003da8:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe4 <HAL_DMA_IRQHandler+0x248>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a8e      	ldr	r2, [pc, #568]	@ (8003fe8 <HAL_DMA_IRQHandler+0x24c>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	0a9b      	lsrs	r3, r3, #10
 8003db4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	409a      	lsls	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d01a      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d013      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df4:	2208      	movs	r2, #8
 8003df6:	409a      	lsls	r2, r3
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	f043 0201 	orr.w	r2, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d012      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e42:	2204      	movs	r2, #4
 8003e44:	409a      	lsls	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d012      	beq.n	8003e74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00b      	beq.n	8003e74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	2204      	movs	r2, #4
 8003e62:	409a      	lsls	r2, r3
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e78:	2210      	movs	r2, #16
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d043      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d03c      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e96:	2210      	movs	r2, #16
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d018      	beq.n	8003ede <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d108      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d024      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	4798      	blx	r3
 8003eca:	e01f      	b.n	8003f0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01b      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
 8003edc:	e016      	b.n	8003f0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d107      	bne.n	8003efc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0208 	bic.w	r2, r2, #8
 8003efa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f10:	2220      	movs	r2, #32
 8003f12:	409a      	lsls	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 808f 	beq.w	800403c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8087 	beq.w	800403c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f32:	2220      	movs	r2, #32
 8003f34:	409a      	lsls	r2, r3
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d136      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0216 	bic.w	r2, r2, #22
 8003f54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <HAL_DMA_IRQHandler+0x1da>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0208 	bic.w	r2, r2, #8
 8003f84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	223f      	movs	r2, #63	@ 0x3f
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d07e      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
        }
        return;
 8003fb2:	e079      	b.n	80040a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d01d      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d031      	beq.n	800403c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	4798      	blx	r3
 8003fe0:	e02c      	b.n	800403c <HAL_DMA_IRQHandler+0x2a0>
 8003fe2:	bf00      	nop
 8003fe4:	20000220 	.word	0x20000220
 8003fe8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d023      	beq.n	800403c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
 8003ffc:	e01e      	b.n	800403c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10f      	bne.n	800402c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0210 	bic.w	r2, r2, #16
 800401a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004040:	2b00      	cmp	r3, #0
 8004042:	d032      	beq.n	80040aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d022      	beq.n	8004096 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2205      	movs	r2, #5
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	3301      	adds	r3, #1
 800406c:	60bb      	str	r3, [r7, #8]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	429a      	cmp	r2, r3
 8004072:	d307      	bcc.n	8004084 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f2      	bne.n	8004068 <HAL_DMA_IRQHandler+0x2cc>
 8004082:	e000      	b.n	8004086 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004084:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
 80040a6:	e000      	b.n	80040aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80040a8:	bf00      	nop
    }
  }
}
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b40      	cmp	r3, #64	@ 0x40
 80040dc:	d108      	bne.n	80040f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040ee:	e007      	b.n	8004100 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	60da      	str	r2, [r3, #12]
}
 8004100:	bf00      	nop
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	3b10      	subs	r3, #16
 800411c:	4a14      	ldr	r2, [pc, #80]	@ (8004170 <DMA_CalcBaseAndBitshift+0x64>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004126:	4a13      	ldr	r2, [pc, #76]	@ (8004174 <DMA_CalcBaseAndBitshift+0x68>)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d909      	bls.n	800414e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004142:	f023 0303 	bic.w	r3, r3, #3
 8004146:	1d1a      	adds	r2, r3, #4
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	659a      	str	r2, [r3, #88]	@ 0x58
 800414c:	e007      	b.n	800415e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	aaaaaaab 	.word	0xaaaaaaab
 8004174:	0800a6dc 	.word	0x0800a6dc

08004178 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004180:	2300      	movs	r3, #0
 8004182:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004188:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11f      	bne.n	80041d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b03      	cmp	r3, #3
 8004196:	d856      	bhi.n	8004246 <DMA_CheckFifoParam+0xce>
 8004198:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <DMA_CheckFifoParam+0x28>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041c3 	.word	0x080041c3
 80041a8:	080041b1 	.word	0x080041b1
 80041ac:	08004247 	.word	0x08004247
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d046      	beq.n	800424a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c0:	e043      	b.n	800424a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041ca:	d140      	bne.n	800424e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041d0:	e03d      	b.n	800424e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041da:	d121      	bne.n	8004220 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d837      	bhi.n	8004252 <DMA_CheckFifoParam+0xda>
 80041e2:	a201      	add	r2, pc, #4	@ (adr r2, 80041e8 <DMA_CheckFifoParam+0x70>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	080041f9 	.word	0x080041f9
 80041ec:	080041ff 	.word	0x080041ff
 80041f0:	080041f9 	.word	0x080041f9
 80041f4:	08004211 	.word	0x08004211
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      break;
 80041fc:	e030      	b.n	8004260 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004202:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d025      	beq.n	8004256 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800420e:	e022      	b.n	8004256 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004218:	d11f      	bne.n	800425a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800421e:	e01c      	b.n	800425a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d903      	bls.n	800422e <DMA_CheckFifoParam+0xb6>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d003      	beq.n	8004234 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800422c:	e018      	b.n	8004260 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	73fb      	strb	r3, [r7, #15]
      break;
 8004232:	e015      	b.n	8004260 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00e      	beq.n	800425e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	73fb      	strb	r3, [r7, #15]
      break;
 8004244:	e00b      	b.n	800425e <DMA_CheckFifoParam+0xe6>
      break;
 8004246:	bf00      	nop
 8004248:	e00a      	b.n	8004260 <DMA_CheckFifoParam+0xe8>
      break;
 800424a:	bf00      	nop
 800424c:	e008      	b.n	8004260 <DMA_CheckFifoParam+0xe8>
      break;
 800424e:	bf00      	nop
 8004250:	e006      	b.n	8004260 <DMA_CheckFifoParam+0xe8>
      break;
 8004252:	bf00      	nop
 8004254:	e004      	b.n	8004260 <DMA_CheckFifoParam+0xe8>
      break;
 8004256:	bf00      	nop
 8004258:	e002      	b.n	8004260 <DMA_CheckFifoParam+0xe8>
      break;   
 800425a:	bf00      	nop
 800425c:	e000      	b.n	8004260 <DMA_CheckFifoParam+0xe8>
      break;
 800425e:	bf00      	nop
    }
  } 
  
  return status; 
 8004260:	7bfb      	ldrb	r3, [r7, #15]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004270:	b480      	push	{r7}
 8004272:	b089      	sub	sp, #36	@ 0x24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	e16b      	b.n	8004564 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800428c:	2201      	movs	r2, #1
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	f040 815a 	bne.w	800455e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d005      	beq.n	80042c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d130      	bne.n	8004324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	2203      	movs	r2, #3
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	43db      	mvns	r3, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4013      	ands	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042f8:	2201      	movs	r2, #1
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	43db      	mvns	r3, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4013      	ands	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	091b      	lsrs	r3, r3, #4
 800430e:	f003 0201 	and.w	r2, r3, #1
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4313      	orrs	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	2b03      	cmp	r3, #3
 800432e:	d017      	beq.n	8004360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d123      	bne.n	80043b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	08da      	lsrs	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3208      	adds	r2, #8
 8004374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	220f      	movs	r2, #15
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4013      	ands	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	08da      	lsrs	r2, r3, #3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3208      	adds	r2, #8
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	2203      	movs	r2, #3
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	4013      	ands	r3, r2
 80043ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f003 0203 	and.w	r2, r3, #3
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80b4 	beq.w	800455e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	4b60      	ldr	r3, [pc, #384]	@ (800457c <HAL_GPIO_Init+0x30c>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	4a5f      	ldr	r2, [pc, #380]	@ (800457c <HAL_GPIO_Init+0x30c>)
 8004400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004404:	6453      	str	r3, [r2, #68]	@ 0x44
 8004406:	4b5d      	ldr	r3, [pc, #372]	@ (800457c <HAL_GPIO_Init+0x30c>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800440e:	60fb      	str	r3, [r7, #12]
 8004410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004412:	4a5b      	ldr	r2, [pc, #364]	@ (8004580 <HAL_GPIO_Init+0x310>)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	3302      	adds	r3, #2
 800441a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	220f      	movs	r2, #15
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	4013      	ands	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a52      	ldr	r2, [pc, #328]	@ (8004584 <HAL_GPIO_Init+0x314>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d02b      	beq.n	8004496 <HAL_GPIO_Init+0x226>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a51      	ldr	r2, [pc, #324]	@ (8004588 <HAL_GPIO_Init+0x318>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d025      	beq.n	8004492 <HAL_GPIO_Init+0x222>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a50      	ldr	r2, [pc, #320]	@ (800458c <HAL_GPIO_Init+0x31c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d01f      	beq.n	800448e <HAL_GPIO_Init+0x21e>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a4f      	ldr	r2, [pc, #316]	@ (8004590 <HAL_GPIO_Init+0x320>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d019      	beq.n	800448a <HAL_GPIO_Init+0x21a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a4e      	ldr	r2, [pc, #312]	@ (8004594 <HAL_GPIO_Init+0x324>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_GPIO_Init+0x216>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a4d      	ldr	r2, [pc, #308]	@ (8004598 <HAL_GPIO_Init+0x328>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00d      	beq.n	8004482 <HAL_GPIO_Init+0x212>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a4c      	ldr	r2, [pc, #304]	@ (800459c <HAL_GPIO_Init+0x32c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d007      	beq.n	800447e <HAL_GPIO_Init+0x20e>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a4b      	ldr	r2, [pc, #300]	@ (80045a0 <HAL_GPIO_Init+0x330>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d101      	bne.n	800447a <HAL_GPIO_Init+0x20a>
 8004476:	2307      	movs	r3, #7
 8004478:	e00e      	b.n	8004498 <HAL_GPIO_Init+0x228>
 800447a:	2308      	movs	r3, #8
 800447c:	e00c      	b.n	8004498 <HAL_GPIO_Init+0x228>
 800447e:	2306      	movs	r3, #6
 8004480:	e00a      	b.n	8004498 <HAL_GPIO_Init+0x228>
 8004482:	2305      	movs	r3, #5
 8004484:	e008      	b.n	8004498 <HAL_GPIO_Init+0x228>
 8004486:	2304      	movs	r3, #4
 8004488:	e006      	b.n	8004498 <HAL_GPIO_Init+0x228>
 800448a:	2303      	movs	r3, #3
 800448c:	e004      	b.n	8004498 <HAL_GPIO_Init+0x228>
 800448e:	2302      	movs	r3, #2
 8004490:	e002      	b.n	8004498 <HAL_GPIO_Init+0x228>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_GPIO_Init+0x228>
 8004496:	2300      	movs	r3, #0
 8004498:	69fa      	ldr	r2, [r7, #28]
 800449a:	f002 0203 	and.w	r2, r2, #3
 800449e:	0092      	lsls	r2, r2, #2
 80044a0:	4093      	lsls	r3, r2
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044a8:	4935      	ldr	r1, [pc, #212]	@ (8004580 <HAL_GPIO_Init+0x310>)
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	089b      	lsrs	r3, r3, #2
 80044ae:	3302      	adds	r3, #2
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044b6:	4b3b      	ldr	r3, [pc, #236]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044da:	4a32      	ldr	r2, [pc, #200]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044e0:	4b30      	ldr	r3, [pc, #192]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004504:	4a27      	ldr	r2, [pc, #156]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800450a:	4b26      	ldr	r3, [pc, #152]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800452e:	4a1d      	ldr	r2, [pc, #116]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004534:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004558:	4a12      	ldr	r2, [pc, #72]	@ (80045a4 <HAL_GPIO_Init+0x334>)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3301      	adds	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	f67f ae90 	bls.w	800428c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	3724      	adds	r7, #36	@ 0x24
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	40013800 	.word	0x40013800
 8004584:	40020000 	.word	0x40020000
 8004588:	40020400 	.word	0x40020400
 800458c:	40020800 	.word	0x40020800
 8004590:	40020c00 	.word	0x40020c00
 8004594:	40021000 	.word	0x40021000
 8004598:	40021400 	.word	0x40021400
 800459c:	40021800 	.word	0x40021800
 80045a0:	40021c00 	.word	0x40021c00
 80045a4:	40013c00 	.word	0x40013c00

080045a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045b2:	4b08      	ldr	r3, [pc, #32]	@ (80045d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045be:	4a05      	ldr	r2, [pc, #20]	@ (80045d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd ff54 	bl	8002474 <HAL_GPIO_EXTI_Callback>
  }
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40013c00 	.word	0x40013c00

080045d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e12b      	b.n	8004842 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fe fa3c 	bl	8002a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	@ 0x24
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800462a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800463a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800463c:	f001 fc60 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 8004640:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4a81      	ldr	r2, [pc, #516]	@ (800484c <HAL_I2C_Init+0x274>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d807      	bhi.n	800465c <HAL_I2C_Init+0x84>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4a80      	ldr	r2, [pc, #512]	@ (8004850 <HAL_I2C_Init+0x278>)
 8004650:	4293      	cmp	r3, r2
 8004652:	bf94      	ite	ls
 8004654:	2301      	movls	r3, #1
 8004656:	2300      	movhi	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e006      	b.n	800466a <HAL_I2C_Init+0x92>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a7d      	ldr	r2, [pc, #500]	@ (8004854 <HAL_I2C_Init+0x27c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	bf94      	ite	ls
 8004664:	2301      	movls	r3, #1
 8004666:	2300      	movhi	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e0e7      	b.n	8004842 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a78      	ldr	r2, [pc, #480]	@ (8004858 <HAL_I2C_Init+0x280>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	0c9b      	lsrs	r3, r3, #18
 800467c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4a6a      	ldr	r2, [pc, #424]	@ (800484c <HAL_I2C_Init+0x274>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d802      	bhi.n	80046ac <HAL_I2C_Init+0xd4>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	3301      	adds	r3, #1
 80046aa:	e009      	b.n	80046c0 <HAL_I2C_Init+0xe8>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	4a69      	ldr	r2, [pc, #420]	@ (800485c <HAL_I2C_Init+0x284>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	099b      	lsrs	r3, r3, #6
 80046be:	3301      	adds	r3, #1
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	495c      	ldr	r1, [pc, #368]	@ (800484c <HAL_I2C_Init+0x274>)
 80046dc:	428b      	cmp	r3, r1
 80046de:	d819      	bhi.n	8004714 <HAL_I2C_Init+0x13c>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1e59      	subs	r1, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ee:	1c59      	adds	r1, r3, #1
 80046f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046f4:	400b      	ands	r3, r1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_I2C_Init+0x138>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1e59      	subs	r1, r3, #1
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	fbb1 f3f3 	udiv	r3, r1, r3
 8004708:	3301      	adds	r3, #1
 800470a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800470e:	e051      	b.n	80047b4 <HAL_I2C_Init+0x1dc>
 8004710:	2304      	movs	r3, #4
 8004712:	e04f      	b.n	80047b4 <HAL_I2C_Init+0x1dc>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d111      	bne.n	8004740 <HAL_I2C_Init+0x168>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1e58      	subs	r0, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	440b      	add	r3, r1
 800472a:	fbb0 f3f3 	udiv	r3, r0, r3
 800472e:	3301      	adds	r3, #1
 8004730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004734:	2b00      	cmp	r3, #0
 8004736:	bf0c      	ite	eq
 8004738:	2301      	moveq	r3, #1
 800473a:	2300      	movne	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	e012      	b.n	8004766 <HAL_I2C_Init+0x18e>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1e58      	subs	r0, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6859      	ldr	r1, [r3, #4]
 8004748:	460b      	mov	r3, r1
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	0099      	lsls	r1, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	fbb0 f3f3 	udiv	r3, r0, r3
 8004756:	3301      	adds	r3, #1
 8004758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475c:	2b00      	cmp	r3, #0
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <HAL_I2C_Init+0x196>
 800476a:	2301      	movs	r3, #1
 800476c:	e022      	b.n	80047b4 <HAL_I2C_Init+0x1dc>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10e      	bne.n	8004794 <HAL_I2C_Init+0x1bc>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1e58      	subs	r0, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6859      	ldr	r1, [r3, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	440b      	add	r3, r1
 8004784:	fbb0 f3f3 	udiv	r3, r0, r3
 8004788:	3301      	adds	r3, #1
 800478a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004792:	e00f      	b.n	80047b4 <HAL_I2C_Init+0x1dc>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1e58      	subs	r0, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	0099      	lsls	r1, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	6809      	ldr	r1, [r1, #0]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6911      	ldr	r1, [r2, #16]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68d2      	ldr	r2, [r2, #12]
 80047ee:	4311      	orrs	r1, r2
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	000186a0 	.word	0x000186a0
 8004850:	001e847f 	.word	0x001e847f
 8004854:	003d08ff 	.word	0x003d08ff
 8004858:	431bde83 	.word	0x431bde83
 800485c:	10624dd3 	.word	0x10624dd3

08004860 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	4608      	mov	r0, r1
 800486a:	4611      	mov	r1, r2
 800486c:	461a      	mov	r2, r3
 800486e:	4603      	mov	r3, r0
 8004870:	817b      	strh	r3, [r7, #10]
 8004872:	460b      	mov	r3, r1
 8004874:	813b      	strh	r3, [r7, #8]
 8004876:	4613      	mov	r3, r2
 8004878:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800487a:	f7fe fbe9 	bl	8003050 <HAL_GetTick>
 800487e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b20      	cmp	r3, #32
 800488a:	f040 80d9 	bne.w	8004a40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	2319      	movs	r3, #25
 8004894:	2201      	movs	r2, #1
 8004896:	496d      	ldr	r1, [pc, #436]	@ (8004a4c <HAL_I2C_Mem_Write+0x1ec>)
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fc8b 	bl	80051b4 <I2C_WaitOnFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
 80048a6:	e0cc      	b.n	8004a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <HAL_I2C_Mem_Write+0x56>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e0c5      	b.n	8004a42 <HAL_I2C_Mem_Write+0x1e2>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d007      	beq.n	80048dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2221      	movs	r2, #33	@ 0x21
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2240      	movs	r2, #64	@ 0x40
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800490c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a4d      	ldr	r2, [pc, #308]	@ (8004a50 <HAL_I2C_Mem_Write+0x1f0>)
 800491c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800491e:	88f8      	ldrh	r0, [r7, #6]
 8004920:	893a      	ldrh	r2, [r7, #8]
 8004922:	8979      	ldrh	r1, [r7, #10]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	4603      	mov	r3, r0
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fac2 	bl	8004eb8 <I2C_RequestMemoryWrite>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d052      	beq.n	80049e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e081      	b.n	8004a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fd50 	bl	80053e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00d      	beq.n	800496a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004952:	2b04      	cmp	r3, #4
 8004954:	d107      	bne.n	8004966 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004964:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e06b      	b.n	8004a42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	781a      	ldrb	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004990:	b29b      	uxth	r3, r3
 8004992:	3b01      	subs	r3, #1
 8004994:	b29a      	uxth	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d11b      	bne.n	80049e0 <HAL_I2C_Mem_Write+0x180>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d017      	beq.n	80049e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	3b01      	subs	r3, #1
 80049da:	b29a      	uxth	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1aa      	bne.n	800493e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fd43 	bl	8005478 <I2C_WaitOnBTFFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00d      	beq.n	8004a14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d107      	bne.n	8004a10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e016      	b.n	8004a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e000      	b.n	8004a42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
  }
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3718      	adds	r7, #24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	00100002 	.word	0x00100002
 8004a50:	ffff0000 	.word	0xffff0000

08004a54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08c      	sub	sp, #48	@ 0x30
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	4611      	mov	r1, r2
 8004a60:	461a      	mov	r2, r3
 8004a62:	4603      	mov	r3, r0
 8004a64:	817b      	strh	r3, [r7, #10]
 8004a66:	460b      	mov	r3, r1
 8004a68:	813b      	strh	r3, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a6e:	f7fe faef 	bl	8003050 <HAL_GetTick>
 8004a72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	f040 8214 	bne.w	8004eaa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2319      	movs	r3, #25
 8004a88:	2201      	movs	r2, #1
 8004a8a:	497b      	ldr	r1, [pc, #492]	@ (8004c78 <HAL_I2C_Mem_Read+0x224>)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fb91 	bl	80051b4 <I2C_WaitOnFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e207      	b.n	8004eac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_I2C_Mem_Read+0x56>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	e200      	b.n	8004eac <HAL_I2C_Mem_Read+0x458>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d007      	beq.n	8004ad0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2222      	movs	r2, #34	@ 0x22
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2240      	movs	r2, #64	@ 0x40
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8004c7c <HAL_I2C_Mem_Read+0x228>)
 8004b10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b12:	88f8      	ldrh	r0, [r7, #6]
 8004b14:	893a      	ldrh	r2, [r7, #8]
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	9301      	str	r3, [sp, #4]
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4603      	mov	r3, r0
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 fa5e 	bl	8004fe4 <I2C_RequestMemoryRead>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e1bc      	b.n	8004eac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d113      	bne.n	8004b62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	623b      	str	r3, [r7, #32]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	623b      	str	r3, [r7, #32]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	623b      	str	r3, [r7, #32]
 8004b4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e190      	b.n	8004e84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d11b      	bne.n	8004ba2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	61fb      	str	r3, [r7, #28]
 8004b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e170      	b.n	8004e84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d11b      	bne.n	8004be2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	e150      	b.n	8004e84 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bf8:	e144      	b.n	8004e84 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	f200 80f1 	bhi.w	8004de6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d123      	bne.n	8004c54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fc79 	bl	8005508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e145      	b.n	8004eac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691a      	ldr	r2, [r3, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c52:	e117      	b.n	8004e84 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d14e      	bne.n	8004cfa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c62:	2200      	movs	r2, #0
 8004c64:	4906      	ldr	r1, [pc, #24]	@ (8004c80 <HAL_I2C_Mem_Read+0x22c>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 faa4 	bl	80051b4 <I2C_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d008      	beq.n	8004c84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e11a      	b.n	8004eac <HAL_I2C_Mem_Read+0x458>
 8004c76:	bf00      	nop
 8004c78:	00100002 	.word	0x00100002
 8004c7c:	ffff0000 	.word	0xffff0000
 8004c80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	b2d2      	uxtb	r2, r2
 8004ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	1c5a      	adds	r2, r3, #1
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cf8:	e0c4      	b.n	8004e84 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d00:	2200      	movs	r2, #0
 8004d02:	496c      	ldr	r1, [pc, #432]	@ (8004eb4 <HAL_I2C_Mem_Read+0x460>)
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fa55 	bl	80051b4 <I2C_WaitOnFlagUntilTimeout>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0cb      	b.n	8004eac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691a      	ldr	r2, [r3, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4955      	ldr	r1, [pc, #340]	@ (8004eb4 <HAL_I2C_Mem_Read+0x460>)
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fa27 	bl	80051b4 <I2C_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e09d      	b.n	8004eac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004de4:	e04e      	b.n	8004e84 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fb8c 	bl	8005508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e058      	b.n	8004eac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	1c5a      	adds	r2, r3, #1
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0304 	and.w	r3, r3, #4
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d124      	bne.n	8004e84 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d107      	bne.n	8004e52 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e50:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f47f aeb6 	bne.w	8004bfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
  }
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3728      	adds	r7, #40	@ 0x28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	00010004 	.word	0x00010004

08004eb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	817b      	strh	r3, [r7, #10]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	813b      	strh	r3, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f960 	bl	80051b4 <I2C_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00d      	beq.n	8004f16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f08:	d103      	bne.n	8004f12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e05f      	b.n	8004fd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f16:	897b      	ldrh	r3, [r7, #10]
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f28:	6a3a      	ldr	r2, [r7, #32]
 8004f2a:	492d      	ldr	r1, [pc, #180]	@ (8004fe0 <I2C_RequestMemoryWrite+0x128>)
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f9bb 	bl	80052a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e04c      	b.n	8004fd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	6a39      	ldr	r1, [r7, #32]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fa46 	bl	80053e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00d      	beq.n	8004f7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d107      	bne.n	8004f7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e02b      	b.n	8004fd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d105      	bne.n	8004f90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f84:	893b      	ldrh	r3, [r7, #8]
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	611a      	str	r2, [r3, #16]
 8004f8e:	e021      	b.n	8004fd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f90:	893b      	ldrh	r3, [r7, #8]
 8004f92:	0a1b      	lsrs	r3, r3, #8
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa0:	6a39      	ldr	r1, [r7, #32]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fa20 	bl	80053e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00d      	beq.n	8004fca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d107      	bne.n	8004fc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e005      	b.n	8004fd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fca:	893b      	ldrh	r3, [r7, #8]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	00010002 	.word	0x00010002

08004fe4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	4608      	mov	r0, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	817b      	strh	r3, [r7, #10]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	813b      	strh	r3, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800500c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800501c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800501e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	2200      	movs	r2, #0
 8005026:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 f8c2 	bl	80051b4 <I2C_WaitOnFlagUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005044:	d103      	bne.n	800504e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800504c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e0aa      	b.n	80051a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005052:	897b      	ldrh	r3, [r7, #10]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	4952      	ldr	r1, [pc, #328]	@ (80051b0 <I2C_RequestMemoryRead+0x1cc>)
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f91d 	bl	80052a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e097      	b.n	80051a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800508e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005090:	6a39      	ldr	r1, [r7, #32]
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f9a8 	bl	80053e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00d      	beq.n	80050ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d107      	bne.n	80050b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e076      	b.n	80051a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050ba:	88fb      	ldrh	r3, [r7, #6]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d105      	bne.n	80050cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050c0:	893b      	ldrh	r3, [r7, #8]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	611a      	str	r2, [r3, #16]
 80050ca:	e021      	b.n	8005110 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050cc:	893b      	ldrh	r3, [r7, #8]
 80050ce:	0a1b      	lsrs	r3, r3, #8
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050dc:	6a39      	ldr	r1, [r7, #32]
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f000 f982 	bl	80053e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00d      	beq.n	8005106 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d107      	bne.n	8005102 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e050      	b.n	80051a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005106:	893b      	ldrh	r3, [r7, #8]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005112:	6a39      	ldr	r1, [r7, #32]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f967 	bl	80053e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00d      	beq.n	800513c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005124:	2b04      	cmp	r3, #4
 8005126:	d107      	bne.n	8005138 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005136:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e035      	b.n	80051a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800514a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	2200      	movs	r2, #0
 8005154:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f82b 	bl	80051b4 <I2C_WaitOnFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00d      	beq.n	8005180 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005172:	d103      	bne.n	800517c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800517a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e013      	b.n	80051a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005180:	897b      	ldrh	r3, [r7, #10]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	6a3a      	ldr	r2, [r7, #32]
 8005194:	4906      	ldr	r1, [pc, #24]	@ (80051b0 <I2C_RequestMemoryRead+0x1cc>)
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f886 	bl	80052a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e000      	b.n	80051a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	00010002 	.word	0x00010002

080051b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c4:	e048      	b.n	8005258 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051cc:	d044      	beq.n	8005258 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fd ff3f 	bl	8003050 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d139      	bne.n	8005258 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	0c1b      	lsrs	r3, r3, #16
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d10d      	bne.n	800520a <I2C_WaitOnFlagUntilTimeout+0x56>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	43da      	mvns	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4013      	ands	r3, r2
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	e00c      	b.n	8005224 <I2C_WaitOnFlagUntilTimeout+0x70>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	43da      	mvns	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4013      	ands	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf0c      	ite	eq
 800521c:	2301      	moveq	r3, #1
 800521e:	2300      	movne	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	461a      	mov	r2, r3
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	429a      	cmp	r2, r3
 8005228:	d116      	bne.n	8005258 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005244:	f043 0220 	orr.w	r2, r3, #32
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e023      	b.n	80052a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	0c1b      	lsrs	r3, r3, #16
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10d      	bne.n	800527e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	43da      	mvns	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	4013      	ands	r3, r2
 800526e:	b29b      	uxth	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	bf0c      	ite	eq
 8005274:	2301      	moveq	r3, #1
 8005276:	2300      	movne	r3, #0
 8005278:	b2db      	uxtb	r3, r3
 800527a:	461a      	mov	r2, r3
 800527c:	e00c      	b.n	8005298 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	43da      	mvns	r2, r3
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	4013      	ands	r3, r2
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	429a      	cmp	r2, r3
 800529c:	d093      	beq.n	80051c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b6:	e071      	b.n	800539c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c6:	d123      	bne.n	8005310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	f043 0204 	orr.w	r2, r3, #4
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e067      	b.n	80053e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005316:	d041      	beq.n	800539c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005318:	f7fd fe9a 	bl	8003050 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d302      	bcc.n	800532e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d136      	bne.n	800539c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	d10c      	bne.n	8005352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	43da      	mvns	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4013      	ands	r3, r2
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	bf14      	ite	ne
 800534a:	2301      	movne	r3, #1
 800534c:	2300      	moveq	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	e00b      	b.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	43da      	mvns	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4013      	ands	r3, r2
 800535e:	b29b      	uxth	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf14      	ite	ne
 8005364:	2301      	movne	r3, #1
 8005366:	2300      	moveq	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d016      	beq.n	800539c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005388:	f043 0220 	orr.w	r2, r3, #32
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e021      	b.n	80053e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	0c1b      	lsrs	r3, r3, #16
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d10c      	bne.n	80053c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	43da      	mvns	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4013      	ands	r3, r2
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	e00b      	b.n	80053d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	43da      	mvns	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4013      	ands	r3, r2
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bf14      	ite	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	2300      	moveq	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f47f af6d 	bne.w	80052b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053f4:	e034      	b.n	8005460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 f8e3 	bl	80055c2 <I2C_IsAcknowledgeFailed>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e034      	b.n	8005470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800540c:	d028      	beq.n	8005460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540e:	f7fd fe1f 	bl	8003050 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	d302      	bcc.n	8005424 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d11d      	bne.n	8005460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542e:	2b80      	cmp	r3, #128	@ 0x80
 8005430:	d016      	beq.n	8005460 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e007      	b.n	8005470 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546a:	2b80      	cmp	r3, #128	@ 0x80
 800546c:	d1c3      	bne.n	80053f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005484:	e034      	b.n	80054f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f89b 	bl	80055c2 <I2C_IsAcknowledgeFailed>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e034      	b.n	8005500 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800549c:	d028      	beq.n	80054f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549e:	f7fd fdd7 	bl	8003050 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d302      	bcc.n	80054b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d11d      	bne.n	80054f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d016      	beq.n	80054f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e007      	b.n	8005500 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d1c3      	bne.n	8005486 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005514:	e049      	b.n	80055aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b10      	cmp	r3, #16
 8005522:	d119      	bne.n	8005558 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0210 	mvn.w	r2, #16
 800552c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e030      	b.n	80055ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005558:	f7fd fd7a 	bl	8003050 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	429a      	cmp	r2, r3
 8005566:	d302      	bcc.n	800556e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d11d      	bne.n	80055aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005578:	2b40      	cmp	r3, #64	@ 0x40
 800557a:	d016      	beq.n	80055aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	f043 0220 	orr.w	r2, r3, #32
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e007      	b.n	80055ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b4:	2b40      	cmp	r3, #64	@ 0x40
 80055b6:	d1ae      	bne.n	8005516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055d8:	d11b      	bne.n	8005612 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fe:	f043 0204 	orr.w	r2, r3, #4
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e267      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d075      	beq.n	800572a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800563e:	4b88      	ldr	r3, [pc, #544]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 030c 	and.w	r3, r3, #12
 8005646:	2b04      	cmp	r3, #4
 8005648:	d00c      	beq.n	8005664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800564a:	4b85      	ldr	r3, [pc, #532]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005652:	2b08      	cmp	r3, #8
 8005654:	d112      	bne.n	800567c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005656:	4b82      	ldr	r3, [pc, #520]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800565e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005662:	d10b      	bne.n	800567c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	4b7e      	ldr	r3, [pc, #504]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d05b      	beq.n	8005728 <HAL_RCC_OscConfig+0x108>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d157      	bne.n	8005728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e242      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005684:	d106      	bne.n	8005694 <HAL_RCC_OscConfig+0x74>
 8005686:	4b76      	ldr	r3, [pc, #472]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a75      	ldr	r2, [pc, #468]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 800568c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e01d      	b.n	80056d0 <HAL_RCC_OscConfig+0xb0>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800569c:	d10c      	bne.n	80056b8 <HAL_RCC_OscConfig+0x98>
 800569e:	4b70      	ldr	r3, [pc, #448]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6f      	ldr	r2, [pc, #444]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a6c      	ldr	r2, [pc, #432]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e00b      	b.n	80056d0 <HAL_RCC_OscConfig+0xb0>
 80056b8:	4b69      	ldr	r3, [pc, #420]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a68      	ldr	r2, [pc, #416]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b66      	ldr	r3, [pc, #408]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a65      	ldr	r2, [pc, #404]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80056ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fd fcba 	bl	8003050 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e0:	f7fd fcb6 	bl	8003050 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	@ 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e207      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f2:	4b5b      	ldr	r3, [pc, #364]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0xc0>
 80056fe:	e014      	b.n	800572a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005700:	f7fd fca6 	bl	8003050 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005708:	f7fd fca2 	bl	8003050 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	@ 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e1f3      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800571a:	4b51      	ldr	r3, [pc, #324]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0xe8>
 8005726:	e000      	b.n	800572a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d063      	beq.n	80057fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005736:	4b4a      	ldr	r3, [pc, #296]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00b      	beq.n	800575a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005742:	4b47      	ldr	r3, [pc, #284]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800574a:	2b08      	cmp	r3, #8
 800574c:	d11c      	bne.n	8005788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800574e:	4b44      	ldr	r3, [pc, #272]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d116      	bne.n	8005788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800575a:	4b41      	ldr	r3, [pc, #260]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <HAL_RCC_OscConfig+0x152>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e1c7      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005772:	4b3b      	ldr	r3, [pc, #236]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4937      	ldr	r1, [pc, #220]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005782:	4313      	orrs	r3, r2
 8005784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005786:	e03a      	b.n	80057fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d020      	beq.n	80057d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005790:	4b34      	ldr	r3, [pc, #208]	@ (8005864 <HAL_RCC_OscConfig+0x244>)
 8005792:	2201      	movs	r2, #1
 8005794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005796:	f7fd fc5b 	bl	8003050 <HAL_GetTick>
 800579a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800579e:	f7fd fc57 	bl	8003050 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e1a8      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0f0      	beq.n	800579e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057bc:	4b28      	ldr	r3, [pc, #160]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4925      	ldr	r1, [pc, #148]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]
 80057d0:	e015      	b.n	80057fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057d2:	4b24      	ldr	r3, [pc, #144]	@ (8005864 <HAL_RCC_OscConfig+0x244>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fd fc3a 	bl	8003050 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e0:	f7fd fc36 	bl	8003050 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e187      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	2b00      	cmp	r3, #0
 8005808:	d036      	beq.n	8005878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d016      	beq.n	8005840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005812:	4b15      	ldr	r3, [pc, #84]	@ (8005868 <HAL_RCC_OscConfig+0x248>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005818:	f7fd fc1a 	bl	8003050 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005820:	f7fd fc16 	bl	8003050 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e167      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005832:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <HAL_RCC_OscConfig+0x240>)
 8005834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x200>
 800583e:	e01b      	b.n	8005878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005840:	4b09      	ldr	r3, [pc, #36]	@ (8005868 <HAL_RCC_OscConfig+0x248>)
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005846:	f7fd fc03 	bl	8003050 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800584c:	e00e      	b.n	800586c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800584e:	f7fd fbff 	bl	8003050 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d907      	bls.n	800586c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e150      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
 8005860:	40023800 	.word	0x40023800
 8005864:	42470000 	.word	0x42470000
 8005868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800586c:	4b88      	ldr	r3, [pc, #544]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800586e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ea      	bne.n	800584e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8097 	beq.w	80059b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800588a:	4b81      	ldr	r3, [pc, #516]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10f      	bne.n	80058b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	4b7d      	ldr	r3, [pc, #500]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80058a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80058a6:	4b7a      	ldr	r3, [pc, #488]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b6:	4b77      	ldr	r3, [pc, #476]	@ (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d118      	bne.n	80058f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c2:	4b74      	ldr	r3, [pc, #464]	@ (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a73      	ldr	r2, [pc, #460]	@ (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058ce:	f7fd fbbf 	bl	8003050 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d6:	f7fd fbbb 	bl	8003050 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e10c      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a94 <HAL_RCC_OscConfig+0x474>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0f0      	beq.n	80058d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d106      	bne.n	800590a <HAL_RCC_OscConfig+0x2ea>
 80058fc:	4b64      	ldr	r3, [pc, #400]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005900:	4a63      	ldr	r2, [pc, #396]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005902:	f043 0301 	orr.w	r3, r3, #1
 8005906:	6713      	str	r3, [r2, #112]	@ 0x70
 8005908:	e01c      	b.n	8005944 <HAL_RCC_OscConfig+0x324>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b05      	cmp	r3, #5
 8005910:	d10c      	bne.n	800592c <HAL_RCC_OscConfig+0x30c>
 8005912:	4b5f      	ldr	r3, [pc, #380]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005916:	4a5e      	ldr	r2, [pc, #376]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005918:	f043 0304 	orr.w	r3, r3, #4
 800591c:	6713      	str	r3, [r2, #112]	@ 0x70
 800591e:	4b5c      	ldr	r3, [pc, #368]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005922:	4a5b      	ldr	r2, [pc, #364]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6713      	str	r3, [r2, #112]	@ 0x70
 800592a:	e00b      	b.n	8005944 <HAL_RCC_OscConfig+0x324>
 800592c:	4b58      	ldr	r3, [pc, #352]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005930:	4a57      	ldr	r2, [pc, #348]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	6713      	str	r3, [r2, #112]	@ 0x70
 8005938:	4b55      	ldr	r3, [pc, #340]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800593a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593c:	4a54      	ldr	r2, [pc, #336]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800593e:	f023 0304 	bic.w	r3, r3, #4
 8005942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d015      	beq.n	8005978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594c:	f7fd fb80 	bl	8003050 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005952:	e00a      	b.n	800596a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005954:	f7fd fb7c 	bl	8003050 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005962:	4293      	cmp	r3, r2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e0cb      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596a:	4b49      	ldr	r3, [pc, #292]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 800596c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0ee      	beq.n	8005954 <HAL_RCC_OscConfig+0x334>
 8005976:	e014      	b.n	80059a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005978:	f7fd fb6a 	bl	8003050 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800597e:	e00a      	b.n	8005996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005980:	f7fd fb66 	bl	8003050 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0b5      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005996:	4b3e      	ldr	r3, [pc, #248]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1ee      	bne.n	8005980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d105      	bne.n	80059b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059a8:	4b39      	ldr	r3, [pc, #228]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ac:	4a38      	ldr	r2, [pc, #224]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 80a1 	beq.w	8005b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059be:	4b34      	ldr	r3, [pc, #208]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b08      	cmp	r3, #8
 80059c8:	d05c      	beq.n	8005a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d141      	bne.n	8005a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059d2:	4b31      	ldr	r3, [pc, #196]	@ (8005a98 <HAL_RCC_OscConfig+0x478>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fd fb3a 	bl	8003050 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e0:	f7fd fb36 	bl	8003050 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e087      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f2:	4b27      	ldr	r3, [pc, #156]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f0      	bne.n	80059e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	431a      	orrs	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	019b      	lsls	r3, r3, #6
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	3b01      	subs	r3, #1
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	061b      	lsls	r3, r3, #24
 8005a22:	491b      	ldr	r1, [pc, #108]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a28:	4b1b      	ldr	r3, [pc, #108]	@ (8005a98 <HAL_RCC_OscConfig+0x478>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2e:	f7fd fb0f 	bl	8003050 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a36:	f7fd fb0b 	bl	8003050 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e05c      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a48:	4b11      	ldr	r3, [pc, #68]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x416>
 8005a54:	e054      	b.n	8005b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a56:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <HAL_RCC_OscConfig+0x478>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a5c:	f7fd faf8 	bl	8003050 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a64:	f7fd faf4 	bl	8003050 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e045      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	4b06      	ldr	r3, [pc, #24]	@ (8005a90 <HAL_RCC_OscConfig+0x470>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x444>
 8005a82:	e03d      	b.n	8005b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e038      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
 8005a90:	40023800 	.word	0x40023800
 8005a94:	40007000 	.word	0x40007000
 8005a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b0c <HAL_RCC_OscConfig+0x4ec>)
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d028      	beq.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d121      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d11a      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005acc:	4013      	ands	r3, r2
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d111      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	085b      	lsrs	r3, r3, #1
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d001      	beq.n	8005b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40023800 	.word	0x40023800

08005b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e0cc      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b24:	4b68      	ldr	r3, [pc, #416]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d90c      	bls.n	8005b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b32:	4b65      	ldr	r3, [pc, #404]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3a:	4b63      	ldr	r3, [pc, #396]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d001      	beq.n	8005b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0b8      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d020      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b64:	4b59      	ldr	r3, [pc, #356]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	4a58      	ldr	r2, [pc, #352]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0308 	and.w	r3, r3, #8
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b7c:	4b53      	ldr	r3, [pc, #332]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	4a52      	ldr	r2, [pc, #328]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b88:	4b50      	ldr	r3, [pc, #320]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	494d      	ldr	r1, [pc, #308]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d044      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d107      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bae:	4b47      	ldr	r3, [pc, #284]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d119      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e07f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d003      	beq.n	8005bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d107      	bne.n	8005bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bce:	4b3f      	ldr	r3, [pc, #252]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e06f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bde:	4b3b      	ldr	r3, [pc, #236]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e067      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bee:	4b37      	ldr	r3, [pc, #220]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 0203 	bic.w	r2, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4934      	ldr	r1, [pc, #208]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c00:	f7fd fa26 	bl	8003050 <HAL_GetTick>
 8005c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c06:	e00a      	b.n	8005c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c08:	f7fd fa22 	bl	8003050 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e04f      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 020c 	and.w	r2, r3, #12
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d1eb      	bne.n	8005c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c30:	4b25      	ldr	r3, [pc, #148]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	683a      	ldr	r2, [r7, #0]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d20c      	bcs.n	8005c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3e:	4b22      	ldr	r3, [pc, #136]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c46:	4b20      	ldr	r3, [pc, #128]	@ (8005cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d001      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e032      	b.n	8005cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0304 	and.w	r3, r3, #4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d008      	beq.n	8005c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c64:	4b19      	ldr	r3, [pc, #100]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	4916      	ldr	r1, [pc, #88]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c82:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	490e      	ldr	r1, [pc, #56]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c96:	f000 f821 	bl	8005cdc <HAL_RCC_GetSysClockFreq>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	091b      	lsrs	r3, r3, #4
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	490a      	ldr	r1, [pc, #40]	@ (8005cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005ca8:	5ccb      	ldrb	r3, [r1, r3]
 8005caa:	fa22 f303 	lsr.w	r3, r2, r3
 8005cae:	4a09      	ldr	r2, [pc, #36]	@ (8005cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005cb2:	4b09      	ldr	r3, [pc, #36]	@ (8005cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fd f986 	bl	8002fc8 <HAL_InitTick>

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023c00 	.word	0x40023c00
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	0800a6c4 	.word	0x0800a6c4
 8005cd4:	20000220 	.word	0x20000220
 8005cd8:	20000224 	.word	0x20000224

08005cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce0:	b094      	sub	sp, #80	@ 0x50
 8005ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce8:	2300      	movs	r3, #0
 8005cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cec:	2300      	movs	r3, #0
 8005cee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cf4:	4b79      	ldr	r3, [pc, #484]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 030c 	and.w	r3, r3, #12
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d00d      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0x40>
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	f200 80e1 	bhi.w	8005ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <HAL_RCC_GetSysClockFreq+0x34>
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d003      	beq.n	8005d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d0e:	e0db      	b.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d10:	4b73      	ldr	r3, [pc, #460]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d12:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005d14:	e0db      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d16:	4b73      	ldr	r3, [pc, #460]	@ (8005ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d1a:	e0d8      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d24:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d26:	4b6d      	ldr	r3, [pc, #436]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d063      	beq.n	8005dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d32:	4b6a      	ldr	r3, [pc, #424]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	099b      	lsrs	r3, r3, #6
 8005d38:	2200      	movs	r2, #0
 8005d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d46:	2300      	movs	r3, #0
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d4e:	4622      	mov	r2, r4
 8005d50:	462b      	mov	r3, r5
 8005d52:	f04f 0000 	mov.w	r0, #0
 8005d56:	f04f 0100 	mov.w	r1, #0
 8005d5a:	0159      	lsls	r1, r3, #5
 8005d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d60:	0150      	lsls	r0, r2, #5
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4621      	mov	r1, r4
 8005d68:	1a51      	subs	r1, r2, r1
 8005d6a:	6139      	str	r1, [r7, #16]
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d80:	4659      	mov	r1, fp
 8005d82:	018b      	lsls	r3, r1, #6
 8005d84:	4651      	mov	r1, sl
 8005d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	018a      	lsls	r2, r1, #6
 8005d8e:	4651      	mov	r1, sl
 8005d90:	ebb2 0801 	subs.w	r8, r2, r1
 8005d94:	4659      	mov	r1, fp
 8005d96:	eb63 0901 	sbc.w	r9, r3, r1
 8005d9a:	f04f 0200 	mov.w	r2, #0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dae:	4690      	mov	r8, r2
 8005db0:	4699      	mov	r9, r3
 8005db2:	4623      	mov	r3, r4
 8005db4:	eb18 0303 	adds.w	r3, r8, r3
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	462b      	mov	r3, r5
 8005dbc:	eb49 0303 	adc.w	r3, r9, r3
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005dce:	4629      	mov	r1, r5
 8005dd0:	024b      	lsls	r3, r1, #9
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005dd8:	4621      	mov	r1, r4
 8005dda:	024a      	lsls	r2, r1, #9
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4619      	mov	r1, r3
 8005de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de2:	2200      	movs	r2, #0
 8005de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dec:	f7fa febe 	bl	8000b6c <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4613      	mov	r3, r2
 8005df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005df8:	e058      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dfa:	4b38      	ldr	r3, [pc, #224]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	099b      	lsrs	r3, r3, #6
 8005e00:	2200      	movs	r2, #0
 8005e02:	4618      	mov	r0, r3
 8005e04:	4611      	mov	r1, r2
 8005e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e0a:	623b      	str	r3, [r7, #32]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e14:	4642      	mov	r2, r8
 8005e16:	464b      	mov	r3, r9
 8005e18:	f04f 0000 	mov.w	r0, #0
 8005e1c:	f04f 0100 	mov.w	r1, #0
 8005e20:	0159      	lsls	r1, r3, #5
 8005e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e26:	0150      	lsls	r0, r2, #5
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e32:	4649      	mov	r1, r9
 8005e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e50:	eb63 050b 	sbc.w	r5, r3, fp
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	00eb      	lsls	r3, r5, #3
 8005e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e62:	00e2      	lsls	r2, r4, #3
 8005e64:	4614      	mov	r4, r2
 8005e66:	461d      	mov	r5, r3
 8005e68:	4643      	mov	r3, r8
 8005e6a:	18e3      	adds	r3, r4, r3
 8005e6c:	603b      	str	r3, [r7, #0]
 8005e6e:	464b      	mov	r3, r9
 8005e70:	eb45 0303 	adc.w	r3, r5, r3
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e82:	4629      	mov	r1, r5
 8005e84:	028b      	lsls	r3, r1, #10
 8005e86:	4621      	mov	r1, r4
 8005e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	028a      	lsls	r2, r1, #10
 8005e90:	4610      	mov	r0, r2
 8005e92:	4619      	mov	r1, r3
 8005e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e96:	2200      	movs	r2, #0
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	61fa      	str	r2, [r7, #28]
 8005e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea0:	f7fa fe64 	bl	8000b6c <__aeabi_uldivmod>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005eac:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <HAL_RCC_GetSysClockFreq+0x200>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	0c1b      	lsrs	r3, r3, #16
 8005eb2:	f003 0303 	and.w	r3, r3, #3
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005ebc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ec6:	e002      	b.n	8005ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ec8:	4b05      	ldr	r3, [pc, #20]	@ (8005ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005eca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3750      	adds	r7, #80	@ 0x50
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eda:	bf00      	nop
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	00f42400 	.word	0x00f42400
 8005ee4:	007a1200 	.word	0x007a1200

08005ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eec:	4b03      	ldr	r3, [pc, #12]	@ (8005efc <HAL_RCC_GetHCLKFreq+0x14>)
 8005eee:	681b      	ldr	r3, [r3, #0]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	20000220 	.word	0x20000220

08005f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f04:	f7ff fff0 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4b05      	ldr	r3, [pc, #20]	@ (8005f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	0a9b      	lsrs	r3, r3, #10
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	4903      	ldr	r1, [pc, #12]	@ (8005f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f16:	5ccb      	ldrb	r3, [r1, r3]
 8005f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40023800 	.word	0x40023800
 8005f24:	0800a6d4 	.word	0x0800a6d4

08005f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005f2c:	f7ff ffdc 	bl	8005ee8 <HAL_RCC_GetHCLKFreq>
 8005f30:	4602      	mov	r2, r0
 8005f32:	4b05      	ldr	r3, [pc, #20]	@ (8005f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	0b5b      	lsrs	r3, r3, #13
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	4903      	ldr	r1, [pc, #12]	@ (8005f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f3e:	5ccb      	ldrb	r3, [r1, r3]
 8005f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	0800a6d4 	.word	0x0800a6d4

08005f50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d035      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f78:	4b62      	ldr	r3, [pc, #392]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f7e:	f7fd f867 	bl	8003050 <HAL_GetTick>
 8005f82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f84:	e008      	b.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005f86:	f7fd f863 	bl	8003050 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e0b0      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f98:	4b5b      	ldr	r3, [pc, #364]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f0      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	019a      	lsls	r2, r3, #6
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	071b      	lsls	r3, r3, #28
 8005fb0:	4955      	ldr	r1, [pc, #340]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005fb8:	4b52      	ldr	r3, [pc, #328]	@ (8006104 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fbe:	f7fd f847 	bl	8003050 <HAL_GetTick>
 8005fc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fc6:	f7fd f843 	bl	8003050 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e090      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f0      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8083 	beq.w	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]
 8005ff6:	4b44      	ldr	r3, [pc, #272]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	4a43      	ldr	r2, [pc, #268]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006000:	6413      	str	r3, [r2, #64]	@ 0x40
 8006002:	4b41      	ldr	r3, [pc, #260]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800600e:	4b3f      	ldr	r3, [pc, #252]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a3e      	ldr	r2, [pc, #248]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006018:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800601a:	f7fd f819 	bl	8003050 <HAL_GetTick>
 800601e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006020:	e008      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006022:	f7fd f815 	bl	8003050 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e062      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006034:	4b35      	ldr	r3, [pc, #212]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0f0      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006040:	4b31      	ldr	r3, [pc, #196]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006048:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d02f      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	429a      	cmp	r2, r3
 800605c:	d028      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800605e:	4b2a      	ldr	r3, [pc, #168]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006066:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006068:	4b29      	ldr	r3, [pc, #164]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800606e:	4b28      	ldr	r3, [pc, #160]	@ (8006110 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006070:	2200      	movs	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006074:	4a24      	ldr	r2, [pc, #144]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800607a:	4b23      	ldr	r3, [pc, #140]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800607c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b01      	cmp	r3, #1
 8006084:	d114      	bne.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006086:	f7fc ffe3 	bl	8003050 <HAL_GetTick>
 800608a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608c:	e00a      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800608e:	f7fc ffdf 	bl	8003050 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800609c:	4293      	cmp	r3, r2
 800609e:	d901      	bls.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e02a      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a4:	4b18      	ldr	r3, [pc, #96]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0ee      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060bc:	d10d      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80060be:	4b12      	ldr	r3, [pc, #72]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80060ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d2:	490d      	ldr	r1, [pc, #52]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	608b      	str	r3, [r1, #8]
 80060d8:	e005      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80060da:	4b0b      	ldr	r3, [pc, #44]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	4a0a      	ldr	r2, [pc, #40]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060e0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80060e4:	6093      	str	r3, [r2, #8]
 80060e6:	4b08      	ldr	r3, [pc, #32]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f2:	4905      	ldr	r1, [pc, #20]	@ (8006108 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3718      	adds	r7, #24
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	42470068 	.word	0x42470068
 8006108:	40023800 	.word	0x40023800
 800610c:	40007000 	.word	0x40007000
 8006110:	42470e40 	.word	0x42470e40

08006114 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d101      	bne.n	800612a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e073      	b.n	8006212 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	7f5b      	ldrb	r3, [r3, #29]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fc fce6 	bl	8002b0c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f003 0310 	and.w	r3, r3, #16
 8006150:	2b10      	cmp	r3, #16
 8006152:	d055      	beq.n	8006200 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	22ca      	movs	r2, #202	@ 0xca
 800615a:	625a      	str	r2, [r3, #36]	@ 0x24
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2253      	movs	r2, #83	@ 0x53
 8006162:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f87f 	bl	8006268 <RTC_EnterInitMode>
 800616a:	4603      	mov	r3, r0
 800616c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d12c      	bne.n	80061ce <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006186:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6899      	ldr	r1, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	431a      	orrs	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	68d2      	ldr	r2, [r2, #12]
 80061ae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6919      	ldr	r1, [r3, #16]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	041a      	lsls	r2, r3, #16
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f886 	bl	80062d6 <RTC_ExitInitMode>
 80061ca:	4603      	mov	r3, r0
 80061cc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d110      	bne.n	80061f6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80061e2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	22ff      	movs	r2, #255	@ 0xff
 80061fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80061fe:	e001      	b.n	8006204 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d102      	bne.n	8006210 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
	...

0800621c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a0d      	ldr	r2, [pc, #52]	@ (8006264 <HAL_RTC_WaitForSynchro+0x48>)
 800622e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006230:	f7fc ff0e 	bl	8003050 <HAL_GetTick>
 8006234:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006236:	e009      	b.n	800624c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006238:	f7fc ff0a 	bl	8003050 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006246:	d901      	bls.n	800624c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e007      	b.n	800625c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f003 0320 	and.w	r3, r3, #32
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ee      	beq.n	8006238 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	00017f5f 	.word	0x00017f5f

08006268 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006282:	2b00      	cmp	r3, #0
 8006284:	d122      	bne.n	80062cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006294:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006296:	f7fc fedb 	bl	8003050 <HAL_GetTick>
 800629a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800629c:	e00c      	b.n	80062b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800629e:	f7fc fed7 	bl	8003050 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062ac:	d904      	bls.n	80062b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2204      	movs	r2, #4
 80062b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <RTC_EnterInitMode+0x64>
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d1e8      	bne.n	800629e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff ff8b 	bl	800621c <HAL_RTC_WaitForSynchro>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2204      	movs	r2, #4
 8006310:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e042      	b.n	80063b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d106      	bne.n	800634c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fc fc0a 	bl	8002b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2224      	movs	r2, #36	@ 0x24
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 ff6d 	bl	8007244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695a      	ldr	r2, [r3, #20]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2220      	movs	r2, #32
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08c      	sub	sp, #48	@ 0x30
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b20      	cmp	r3, #32
 80063d8:	d156      	bne.n	8006488 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <HAL_UART_Transmit_DMA+0x26>
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e04f      	b.n	800648a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	88fa      	ldrh	r2, [r7, #6]
 80063f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	88fa      	ldrh	r2, [r7, #6]
 80063fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2221      	movs	r2, #33	@ 0x21
 8006406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800640e:	4a21      	ldr	r2, [pc, #132]	@ (8006494 <HAL_UART_Transmit_DMA+0xd4>)
 8006410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006416:	4a20      	ldr	r2, [pc, #128]	@ (8006498 <HAL_UART_Transmit_DMA+0xd8>)
 8006418:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641e:	4a1f      	ldr	r2, [pc, #124]	@ (800649c <HAL_UART_Transmit_DMA+0xdc>)
 8006420:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006426:	2200      	movs	r2, #0
 8006428:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006436:	6819      	ldr	r1, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3304      	adds	r3, #4
 800643e:	461a      	mov	r2, r3
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	f7fd fbc1 	bl	8003bc8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800644e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3314      	adds	r3, #20
 8006456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	617b      	str	r3, [r7, #20]
   return(result);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006466:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3314      	adds	r3, #20
 800646e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006470:	627a      	str	r2, [r7, #36]	@ 0x24
 8006472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6a39      	ldr	r1, [r7, #32]
 8006476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	61fb      	str	r3, [r7, #28]
   return(result);
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e5      	bne.n	8006450 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	3730      	adds	r7, #48	@ 0x30
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	08006ad1 	.word	0x08006ad1
 8006498:	08006b6b 	.word	0x08006b6b
 800649c:	08006cef 	.word	0x08006cef

080064a0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08c      	sub	sp, #48	@ 0x30
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d14a      	bne.n	8006550 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e043      	b.n	8006552 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80064d6:	88fb      	ldrh	r3, [r7, #6]
 80064d8:	461a      	mov	r2, r3
 80064da:	68b9      	ldr	r1, [r7, #8]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 fc51 	bl	8006d84 <UART_Start_Receive_DMA>
 80064e2:	4603      	mov	r3, r0
 80064e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80064e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d12c      	bne.n	800654a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d125      	bne.n	8006544 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	617b      	str	r3, [r7, #20]
   return(result);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f043 0310 	orr.w	r3, r3, #16
 8006524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	330c      	adds	r3, #12
 800652c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800652e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	6a39      	ldr	r1, [r7, #32]
 8006534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	61fb      	str	r3, [r7, #28]
   return(result);
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e5      	bne.n	800650e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8006542:	e002      	b.n	800654a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800654a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800654e:	e000      	b.n	8006552 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006550:	2302      	movs	r3, #2
  }
}
 8006552:	4618      	mov	r0, r3
 8006554:	3730      	adds	r7, #48	@ 0x30
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b0ba      	sub	sp, #232	@ 0xe8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006588:	2300      	movs	r3, #0
 800658a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800658e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800659a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10f      	bne.n	80065c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <HAL_UART_IRQHandler+0x66>
 80065ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fd83 	bl	80070c6 <UART_Receive_IT>
      return;
 80065c0:	e25b      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80065c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 80de 	beq.w	8006788 <HAL_UART_IRQHandler+0x22c>
 80065cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d106      	bne.n	80065e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80d1 	beq.w	8006788 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00b      	beq.n	800660a <HAL_UART_IRQHandler+0xae>
 80065f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006602:	f043 0201 	orr.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00b      	beq.n	800662e <HAL_UART_IRQHandler+0xd2>
 8006616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006626:	f043 0202 	orr.w	r2, r3, #2
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800662e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <HAL_UART_IRQHandler+0xf6>
 800663a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800663e:	f003 0301 	and.w	r3, r3, #1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d005      	beq.n	8006652 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664a:	f043 0204 	orr.w	r2, r3, #4
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	2b00      	cmp	r3, #0
 800665c:	d011      	beq.n	8006682 <HAL_UART_IRQHandler+0x126>
 800665e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800666a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d005      	beq.n	8006682 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800667a:	f043 0208 	orr.w	r2, r3, #8
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 81f2 	beq.w	8006a70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800668c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <HAL_UART_IRQHandler+0x14e>
 8006698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fd0e 	bl	80070c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b4:	2b40      	cmp	r3, #64	@ 0x40
 80066b6:	bf0c      	ite	eq
 80066b8:	2301      	moveq	r3, #1
 80066ba:	2300      	movne	r3, #0
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <HAL_UART_IRQHandler+0x17a>
 80066ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d04f      	beq.n	8006776 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fc16 	bl	8006f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e6:	2b40      	cmp	r3, #64	@ 0x40
 80066e8:	d141      	bne.n	800676e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3314      	adds	r3, #20
 80066f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80066f8:	e853 3f00 	ldrex	r3, [r3]
 80066fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3314      	adds	r3, #20
 8006712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006716:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800671a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800672e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1d9      	bne.n	80066ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800673a:	2b00      	cmp	r3, #0
 800673c:	d013      	beq.n	8006766 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006742:	4a7e      	ldr	r2, [pc, #504]	@ (800693c <HAL_UART_IRQHandler+0x3e0>)
 8006744:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674a:	4618      	mov	r0, r3
 800674c:	f7fd fb04 	bl	8003d58 <HAL_DMA_Abort_IT>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d016      	beq.n	8006784 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800675a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006764:	e00e      	b.n	8006784 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f9a8 	bl	8006abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800676c:	e00a      	b.n	8006784 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f9a4 	bl	8006abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006774:	e006      	b.n	8006784 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f9a0 	bl	8006abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006782:	e175      	b.n	8006a70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006784:	bf00      	nop
    return;
 8006786:	e173      	b.n	8006a70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678c:	2b01      	cmp	r3, #1
 800678e:	f040 814f 	bne.w	8006a30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006796:	f003 0310 	and.w	r3, r3, #16
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8148 	beq.w	8006a30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80067a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8141 	beq.w	8006a30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067ae:	2300      	movs	r3, #0
 80067b0:	60bb      	str	r3, [r7, #8]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60bb      	str	r3, [r7, #8]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ce:	2b40      	cmp	r3, #64	@ 0x40
 80067d0:	f040 80b6 	bne.w	8006940 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8145 	beq.w	8006a74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80067ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067f2:	429a      	cmp	r2, r3
 80067f4:	f080 813e 	bcs.w	8006a74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80067fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006804:	69db      	ldr	r3, [r3, #28]
 8006806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680a:	f000 8088 	beq.w	800691e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006824:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006828:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800682c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800683a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800683e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006846:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006852:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1d9      	bne.n	800680e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3314      	adds	r3, #20
 8006860:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800686a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800686c:	f023 0301 	bic.w	r3, r3, #1
 8006870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3314      	adds	r3, #20
 800687a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800687e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006882:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006884:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006886:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006890:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e1      	bne.n	800685a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3314      	adds	r3, #20
 800689c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3314      	adds	r3, #20
 80068b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80068ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80068bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80068c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80068c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e3      	bne.n	8006896 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80068ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068ee:	f023 0310 	bic.w	r3, r3, #16
 80068f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006900:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006902:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006906:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800690e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e3      	bne.n	80068dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006918:	4618      	mov	r0, r3
 800691a:	f7fd f9ad 	bl	8003c78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800692c:	b29b      	uxth	r3, r3
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	b29b      	uxth	r3, r3
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7fb fd33 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800693a:	e09b      	b.n	8006a74 <HAL_UART_IRQHandler+0x518>
 800693c:	08006fcf 	.word	0x08006fcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006948:	b29b      	uxth	r3, r3
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 808e 	beq.w	8006a78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800695c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8089 	beq.w	8006a78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800697c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800698a:	647a      	str	r2, [r7, #68]	@ 0x44
 800698c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006990:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e3      	bne.n	8006966 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3314      	adds	r3, #20
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	623b      	str	r3, [r7, #32]
   return(result);
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3314      	adds	r3, #20
 80069be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80069c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80069c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e3      	bne.n	800699e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0310 	bic.w	r3, r3, #16
 80069fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006a08:	61fa      	str	r2, [r7, #28]
 8006a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0c:	69b9      	ldr	r1, [r7, #24]
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	e841 2300 	strex	r3, r2, [r1]
 8006a14:	617b      	str	r3, [r7, #20]
   return(result);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e3      	bne.n	80069e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fb fcb9 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a2e:	e023      	b.n	8006a78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <HAL_UART_IRQHandler+0x4f4>
 8006a3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fad4 	bl	8006ff6 <UART_Transmit_IT>
    return;
 8006a4e:	e014      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00e      	beq.n	8006a7a <HAL_UART_IRQHandler+0x51e>
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fb14 	bl	8007096 <UART_EndTransmit_IT>
    return;
 8006a6e:	e004      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
    return;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <HAL_UART_IRQHandler+0x51e>
      return;
 8006a78:	bf00      	nop
  }
}
 8006a7a:	37e8      	adds	r7, #232	@ 0xe8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b090      	sub	sp, #64	@ 0x40
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d137      	bne.n	8006b5c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aee:	2200      	movs	r2, #0
 8006af0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3314      	adds	r3, #20
 8006af8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	623b      	str	r3, [r7, #32]
   return(result);
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3314      	adds	r3, #20
 8006b10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b12:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e5      	bne.n	8006af2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b46:	61fa      	str	r2, [r7, #28]
 8006b48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	69b9      	ldr	r1, [r7, #24]
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	617b      	str	r3, [r7, #20]
   return(result);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e5      	bne.n	8006b26 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b5a:	e002      	b.n	8006b62 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006b5c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006b5e:	f7fb fc2d 	bl	80023bc <HAL_UART_TxCpltCallback>
}
 8006b62:	bf00      	nop
 8006b64:	3740      	adds	r7, #64	@ 0x40
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff ff81 	bl	8006a80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b09c      	sub	sp, #112	@ 0x70
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b92:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d172      	bne.n	8006c88 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006ba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ba8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006bc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e5      	bne.n	8006ba8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3314      	adds	r3, #20
 8006be2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006bfc:	647a      	str	r2, [r7, #68]	@ 0x44
 8006bfe:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e5      	bne.n	8006bdc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3314      	adds	r3, #20
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c26:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3314      	adds	r3, #20
 8006c2e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006c30:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e5      	bne.n	8006c10 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d119      	bne.n	8006c88 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	330c      	adds	r3, #12
 8006c5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0310 	bic.w	r3, r3, #16
 8006c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	330c      	adds	r3, #12
 8006c72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006c74:	61fa      	str	r2, [r7, #28]
 8006c76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c78:	69b9      	ldr	r1, [r7, #24]
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	e841 2300 	strex	r3, r2, [r1]
 8006c80:	617b      	str	r3, [r7, #20]
   return(result);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1e5      	bne.n	8006c54 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d106      	bne.n	8006ca4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006c9e:	f7fb fb7f 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ca2:	e002      	b.n	8006caa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006ca4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ca6:	f7ff fef5 	bl	8006a94 <HAL_UART_RxCpltCallback>
}
 8006caa:	bf00      	nop
 8006cac:	3770      	adds	r7, #112	@ 0x70
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d108      	bne.n	8006ce0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cd2:	085b      	lsrs	r3, r3, #1
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f7fb fb61 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cde:	e002      	b.n	8006ce6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff fee1 	bl	8006aa8 <HAL_UART_RxHalfCpltCallback>
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b084      	sub	sp, #16
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d0a:	2b80      	cmp	r3, #128	@ 0x80
 8006d0c:	bf0c      	ite	eq
 8006d0e:	2301      	moveq	r3, #1
 8006d10:	2300      	movne	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b21      	cmp	r3, #33	@ 0x21
 8006d20:	d108      	bne.n	8006d34 <UART_DMAError+0x46>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006d2e:	68b8      	ldr	r0, [r7, #8]
 8006d30:	f000 f8c2 	bl	8006eb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3e:	2b40      	cmp	r3, #64	@ 0x40
 8006d40:	bf0c      	ite	eq
 8006d42:	2301      	moveq	r3, #1
 8006d44:	2300      	movne	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b22      	cmp	r3, #34	@ 0x22
 8006d54:	d108      	bne.n	8006d68 <UART_DMAError+0x7a>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006d62:	68b8      	ldr	r0, [r7, #8]
 8006d64:	f000 f8d0 	bl	8006f08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6c:	f043 0210 	orr.w	r2, r3, #16
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d74:	68b8      	ldr	r0, [r7, #8]
 8006d76:	f7ff fea1 	bl	8006abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d7a:	bf00      	nop
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b098      	sub	sp, #96	@ 0x60
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	88fa      	ldrh	r2, [r7, #6]
 8006d9c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2222      	movs	r2, #34	@ 0x22
 8006da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db0:	4a3e      	ldr	r2, [pc, #248]	@ (8006eac <UART_Start_Receive_DMA+0x128>)
 8006db2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db8:	4a3d      	ldr	r2, [pc, #244]	@ (8006eb0 <UART_Start_Receive_DMA+0x12c>)
 8006dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8006eb4 <UART_Start_Receive_DMA+0x130>)
 8006dc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc8:	2200      	movs	r2, #0
 8006dca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006dcc:	f107 0308 	add.w	r3, r7, #8
 8006dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3304      	adds	r3, #4
 8006ddc:	4619      	mov	r1, r3
 8006dde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	f7fc fef0 	bl	8003bc8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006de8:	2300      	movs	r3, #0
 8006dea:	613b      	str	r3, [r7, #16]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d019      	beq.n	8006e3a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	330c      	adds	r3, #12
 8006e0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e26:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006e2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e2e:	e841 2300 	strex	r3, r2, [r1]
 8006e32:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1e5      	bne.n	8006e06 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	3314      	adds	r3, #20
 8006e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	f043 0301 	orr.w	r3, r3, #1
 8006e50:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3314      	adds	r3, #20
 8006e58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e5a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006e60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e5      	bne.n	8006e3a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3314      	adds	r3, #20
 8006e74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e84:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3314      	adds	r3, #20
 8006e8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6a39      	ldr	r1, [r7, #32]
 8006e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e5      	bne.n	8006e6e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3760      	adds	r7, #96	@ 0x60
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	08006b87 	.word	0x08006b87
 8006eb0:	08006cb3 	.word	0x08006cb3
 8006eb4:	08006cef 	.word	0x08006cef

08006eb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b089      	sub	sp, #36	@ 0x24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	e853 3f00 	ldrex	r3, [r3]
 8006ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	61ba      	str	r2, [r7, #24]
 8006ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6979      	ldr	r1, [r7, #20]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	613b      	str	r3, [r7, #16]
   return(result);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e5      	bne.n	8006ec0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006efc:	bf00      	nop
 8006efe:	3724      	adds	r7, #36	@ 0x24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b095      	sub	sp, #84	@ 0x54
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f30:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3314      	adds	r3, #20
 8006f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3314      	adds	r3, #20
 8006f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f6c:	e841 2300 	strex	r3, r2, [r1]
 8006f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1e5      	bne.n	8006f44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d119      	bne.n	8006fb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	330c      	adds	r3, #12
 8006f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f023 0310 	bic.w	r3, r3, #16
 8006f96:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fa0:	61ba      	str	r2, [r7, #24]
 8006fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa4:	6979      	ldr	r1, [r7, #20]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	e841 2300 	strex	r3, r2, [r1]
 8006fac:	613b      	str	r3, [r7, #16]
   return(result);
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e5      	bne.n	8006f80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fc2:	bf00      	nop
 8006fc4:	3754      	adds	r7, #84	@ 0x54
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f7ff fd67 	bl	8006abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b085      	sub	sp, #20
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b21      	cmp	r3, #33	@ 0x21
 8007008:	d13e      	bne.n	8007088 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007012:	d114      	bne.n	800703e <UART_Transmit_IT+0x48>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d110      	bne.n	800703e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007030:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	1c9a      	adds	r2, r3, #2
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	621a      	str	r2, [r3, #32]
 800703c:	e008      	b.n	8007050 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	1c59      	adds	r1, r3, #1
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6211      	str	r1, [r2, #32]
 8007048:	781a      	ldrb	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007054:	b29b      	uxth	r3, r3
 8007056:	3b01      	subs	r3, #1
 8007058:	b29b      	uxth	r3, r3
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	4619      	mov	r1, r3
 800705e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10f      	bne.n	8007084 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68da      	ldr	r2, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007072:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007082:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	e000      	b.n	800708a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007088:	2302      	movs	r3, #2
  }
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b082      	sub	sp, #8
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fb f980 	bl	80023bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b08c      	sub	sp, #48	@ 0x30
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b22      	cmp	r3, #34	@ 0x22
 80070d8:	f040 80ae 	bne.w	8007238 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e4:	d117      	bne.n	8007116 <UART_Receive_IT+0x50>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d113      	bne.n	8007116 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007104:	b29a      	uxth	r2, r3
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710e:	1c9a      	adds	r2, r3, #2
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	629a      	str	r2, [r3, #40]	@ 0x28
 8007114:	e026      	b.n	8007164 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800711c:	2300      	movs	r3, #0
 800711e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007128:	d007      	beq.n	800713a <UART_Receive_IT+0x74>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10a      	bne.n	8007148 <UART_Receive_IT+0x82>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	e008      	b.n	800715a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007154:	b2da      	uxtb	r2, r3
 8007156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007158:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715e:	1c5a      	adds	r2, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007168:	b29b      	uxth	r3, r3
 800716a:	3b01      	subs	r3, #1
 800716c:	b29b      	uxth	r3, r3
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	4619      	mov	r1, r3
 8007172:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007174:	2b00      	cmp	r3, #0
 8007176:	d15d      	bne.n	8007234 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0220 	bic.w	r2, r2, #32
 8007186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0201 	bic.w	r2, r2, #1
 80071a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d135      	bne.n	800722a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f023 0310 	bic.w	r3, r3, #16
 80071da:	627b      	str	r3, [r7, #36]	@ 0x24
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	330c      	adds	r3, #12
 80071e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071e4:	623a      	str	r2, [r7, #32]
 80071e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	69f9      	ldr	r1, [r7, #28]
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e5      	bne.n	80071c4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	2b10      	cmp	r3, #16
 8007204:	d10a      	bne.n	800721c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007220:	4619      	mov	r1, r3
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7fb f8bc 	bl	80023a0 <HAL_UARTEx_RxEventCallback>
 8007228:	e002      	b.n	8007230 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7ff fc32 	bl	8006a94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	e002      	b.n	800723a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	e000      	b.n	800723a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007238:	2302      	movs	r3, #2
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	3730      	adds	r7, #48	@ 0x30
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007248:	b0c0      	sub	sp, #256	@ 0x100
 800724a:	af00      	add	r7, sp, #0
 800724c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007260:	68d9      	ldr	r1, [r3, #12]
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	ea40 0301 	orr.w	r3, r0, r1
 800726c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	431a      	orrs	r2, r3
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	431a      	orrs	r2, r3
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	4313      	orrs	r3, r2
 800728c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800729c:	f021 010c 	bic.w	r1, r1, #12
 80072a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072aa:	430b      	orrs	r3, r1
 80072ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072be:	6999      	ldr	r1, [r3, #24]
 80072c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	ea40 0301 	orr.w	r3, r0, r1
 80072ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	4b8f      	ldr	r3, [pc, #572]	@ (8007510 <UART_SetConfig+0x2cc>)
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d005      	beq.n	80072e4 <UART_SetConfig+0xa0>
 80072d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	4b8d      	ldr	r3, [pc, #564]	@ (8007514 <UART_SetConfig+0x2d0>)
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d104      	bne.n	80072ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072e4:	f7fe fe20 	bl	8005f28 <HAL_RCC_GetPCLK2Freq>
 80072e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072ec:	e003      	b.n	80072f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072ee:	f7fe fe07 	bl	8005f00 <HAL_RCC_GetPCLK1Freq>
 80072f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007300:	f040 810c 	bne.w	800751c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007308:	2200      	movs	r2, #0
 800730a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800730e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007312:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007316:	4622      	mov	r2, r4
 8007318:	462b      	mov	r3, r5
 800731a:	1891      	adds	r1, r2, r2
 800731c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800731e:	415b      	adcs	r3, r3
 8007320:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007322:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007326:	4621      	mov	r1, r4
 8007328:	eb12 0801 	adds.w	r8, r2, r1
 800732c:	4629      	mov	r1, r5
 800732e:	eb43 0901 	adc.w	r9, r3, r1
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800733e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007342:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007346:	4690      	mov	r8, r2
 8007348:	4699      	mov	r9, r3
 800734a:	4623      	mov	r3, r4
 800734c:	eb18 0303 	adds.w	r3, r8, r3
 8007350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007354:	462b      	mov	r3, r5
 8007356:	eb49 0303 	adc.w	r3, r9, r3
 800735a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800735e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800736a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800736e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007372:	460b      	mov	r3, r1
 8007374:	18db      	adds	r3, r3, r3
 8007376:	653b      	str	r3, [r7, #80]	@ 0x50
 8007378:	4613      	mov	r3, r2
 800737a:	eb42 0303 	adc.w	r3, r2, r3
 800737e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007380:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007384:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007388:	f7f9 fbf0 	bl	8000b6c <__aeabi_uldivmod>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4b61      	ldr	r3, [pc, #388]	@ (8007518 <UART_SetConfig+0x2d4>)
 8007392:	fba3 2302 	umull	r2, r3, r3, r2
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	011c      	lsls	r4, r3, #4
 800739a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073ac:	4642      	mov	r2, r8
 80073ae:	464b      	mov	r3, r9
 80073b0:	1891      	adds	r1, r2, r2
 80073b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073b4:	415b      	adcs	r3, r3
 80073b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073bc:	4641      	mov	r1, r8
 80073be:	eb12 0a01 	adds.w	sl, r2, r1
 80073c2:	4649      	mov	r1, r9
 80073c4:	eb43 0b01 	adc.w	fp, r3, r1
 80073c8:	f04f 0200 	mov.w	r2, #0
 80073cc:	f04f 0300 	mov.w	r3, #0
 80073d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073dc:	4692      	mov	sl, r2
 80073de:	469b      	mov	fp, r3
 80073e0:	4643      	mov	r3, r8
 80073e2:	eb1a 0303 	adds.w	r3, sl, r3
 80073e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073ea:	464b      	mov	r3, r9
 80073ec:	eb4b 0303 	adc.w	r3, fp, r3
 80073f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007400:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007404:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007408:	460b      	mov	r3, r1
 800740a:	18db      	adds	r3, r3, r3
 800740c:	643b      	str	r3, [r7, #64]	@ 0x40
 800740e:	4613      	mov	r3, r2
 8007410:	eb42 0303 	adc.w	r3, r2, r3
 8007414:	647b      	str	r3, [r7, #68]	@ 0x44
 8007416:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800741a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800741e:	f7f9 fba5 	bl	8000b6c <__aeabi_uldivmod>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4611      	mov	r1, r2
 8007428:	4b3b      	ldr	r3, [pc, #236]	@ (8007518 <UART_SetConfig+0x2d4>)
 800742a:	fba3 2301 	umull	r2, r3, r3, r1
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	2264      	movs	r2, #100	@ 0x64
 8007432:	fb02 f303 	mul.w	r3, r2, r3
 8007436:	1acb      	subs	r3, r1, r3
 8007438:	00db      	lsls	r3, r3, #3
 800743a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800743e:	4b36      	ldr	r3, [pc, #216]	@ (8007518 <UART_SetConfig+0x2d4>)
 8007440:	fba3 2302 	umull	r2, r3, r3, r2
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800744c:	441c      	add	r4, r3
 800744e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007452:	2200      	movs	r2, #0
 8007454:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007458:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800745c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007460:	4642      	mov	r2, r8
 8007462:	464b      	mov	r3, r9
 8007464:	1891      	adds	r1, r2, r2
 8007466:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007468:	415b      	adcs	r3, r3
 800746a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800746c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007470:	4641      	mov	r1, r8
 8007472:	1851      	adds	r1, r2, r1
 8007474:	6339      	str	r1, [r7, #48]	@ 0x30
 8007476:	4649      	mov	r1, r9
 8007478:	414b      	adcs	r3, r1
 800747a:	637b      	str	r3, [r7, #52]	@ 0x34
 800747c:	f04f 0200 	mov.w	r2, #0
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007488:	4659      	mov	r1, fp
 800748a:	00cb      	lsls	r3, r1, #3
 800748c:	4651      	mov	r1, sl
 800748e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007492:	4651      	mov	r1, sl
 8007494:	00ca      	lsls	r2, r1, #3
 8007496:	4610      	mov	r0, r2
 8007498:	4619      	mov	r1, r3
 800749a:	4603      	mov	r3, r0
 800749c:	4642      	mov	r2, r8
 800749e:	189b      	adds	r3, r3, r2
 80074a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074a4:	464b      	mov	r3, r9
 80074a6:	460a      	mov	r2, r1
 80074a8:	eb42 0303 	adc.w	r3, r2, r3
 80074ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80074c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074c4:	460b      	mov	r3, r1
 80074c6:	18db      	adds	r3, r3, r3
 80074c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074ca:	4613      	mov	r3, r2
 80074cc:	eb42 0303 	adc.w	r3, r2, r3
 80074d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074da:	f7f9 fb47 	bl	8000b6c <__aeabi_uldivmod>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007518 <UART_SetConfig+0x2d4>)
 80074e4:	fba3 1302 	umull	r1, r3, r3, r2
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	2164      	movs	r1, #100	@ 0x64
 80074ec:	fb01 f303 	mul.w	r3, r1, r3
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	3332      	adds	r3, #50	@ 0x32
 80074f6:	4a08      	ldr	r2, [pc, #32]	@ (8007518 <UART_SetConfig+0x2d4>)
 80074f8:	fba2 2303 	umull	r2, r3, r2, r3
 80074fc:	095b      	lsrs	r3, r3, #5
 80074fe:	f003 0207 	and.w	r2, r3, #7
 8007502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4422      	add	r2, r4
 800750a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800750c:	e106      	b.n	800771c <UART_SetConfig+0x4d8>
 800750e:	bf00      	nop
 8007510:	40011000 	.word	0x40011000
 8007514:	40011400 	.word	0x40011400
 8007518:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800751c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007520:	2200      	movs	r2, #0
 8007522:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007526:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800752a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800752e:	4642      	mov	r2, r8
 8007530:	464b      	mov	r3, r9
 8007532:	1891      	adds	r1, r2, r2
 8007534:	6239      	str	r1, [r7, #32]
 8007536:	415b      	adcs	r3, r3
 8007538:	627b      	str	r3, [r7, #36]	@ 0x24
 800753a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800753e:	4641      	mov	r1, r8
 8007540:	1854      	adds	r4, r2, r1
 8007542:	4649      	mov	r1, r9
 8007544:	eb43 0501 	adc.w	r5, r3, r1
 8007548:	f04f 0200 	mov.w	r2, #0
 800754c:	f04f 0300 	mov.w	r3, #0
 8007550:	00eb      	lsls	r3, r5, #3
 8007552:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007556:	00e2      	lsls	r2, r4, #3
 8007558:	4614      	mov	r4, r2
 800755a:	461d      	mov	r5, r3
 800755c:	4643      	mov	r3, r8
 800755e:	18e3      	adds	r3, r4, r3
 8007560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007564:	464b      	mov	r3, r9
 8007566:	eb45 0303 	adc.w	r3, r5, r3
 800756a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800756e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800757a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800757e:	f04f 0200 	mov.w	r2, #0
 8007582:	f04f 0300 	mov.w	r3, #0
 8007586:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800758a:	4629      	mov	r1, r5
 800758c:	008b      	lsls	r3, r1, #2
 800758e:	4621      	mov	r1, r4
 8007590:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007594:	4621      	mov	r1, r4
 8007596:	008a      	lsls	r2, r1, #2
 8007598:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800759c:	f7f9 fae6 	bl	8000b6c <__aeabi_uldivmod>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4b60      	ldr	r3, [pc, #384]	@ (8007728 <UART_SetConfig+0x4e4>)
 80075a6:	fba3 2302 	umull	r2, r3, r3, r2
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	011c      	lsls	r4, r3, #4
 80075ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	1891      	adds	r1, r2, r2
 80075c6:	61b9      	str	r1, [r7, #24]
 80075c8:	415b      	adcs	r3, r3
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075d0:	4641      	mov	r1, r8
 80075d2:	1851      	adds	r1, r2, r1
 80075d4:	6139      	str	r1, [r7, #16]
 80075d6:	4649      	mov	r1, r9
 80075d8:	414b      	adcs	r3, r1
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075e8:	4659      	mov	r1, fp
 80075ea:	00cb      	lsls	r3, r1, #3
 80075ec:	4651      	mov	r1, sl
 80075ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075f2:	4651      	mov	r1, sl
 80075f4:	00ca      	lsls	r2, r1, #3
 80075f6:	4610      	mov	r0, r2
 80075f8:	4619      	mov	r1, r3
 80075fa:	4603      	mov	r3, r0
 80075fc:	4642      	mov	r2, r8
 80075fe:	189b      	adds	r3, r3, r2
 8007600:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007604:	464b      	mov	r3, r9
 8007606:	460a      	mov	r2, r1
 8007608:	eb42 0303 	adc.w	r3, r2, r3
 800760c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	67bb      	str	r3, [r7, #120]	@ 0x78
 800761a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007628:	4649      	mov	r1, r9
 800762a:	008b      	lsls	r3, r1, #2
 800762c:	4641      	mov	r1, r8
 800762e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007632:	4641      	mov	r1, r8
 8007634:	008a      	lsls	r2, r1, #2
 8007636:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800763a:	f7f9 fa97 	bl	8000b6c <__aeabi_uldivmod>
 800763e:	4602      	mov	r2, r0
 8007640:	460b      	mov	r3, r1
 8007642:	4611      	mov	r1, r2
 8007644:	4b38      	ldr	r3, [pc, #224]	@ (8007728 <UART_SetConfig+0x4e4>)
 8007646:	fba3 2301 	umull	r2, r3, r3, r1
 800764a:	095b      	lsrs	r3, r3, #5
 800764c:	2264      	movs	r2, #100	@ 0x64
 800764e:	fb02 f303 	mul.w	r3, r2, r3
 8007652:	1acb      	subs	r3, r1, r3
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	3332      	adds	r3, #50	@ 0x32
 8007658:	4a33      	ldr	r2, [pc, #204]	@ (8007728 <UART_SetConfig+0x4e4>)
 800765a:	fba2 2303 	umull	r2, r3, r2, r3
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007664:	441c      	add	r4, r3
 8007666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800766a:	2200      	movs	r2, #0
 800766c:	673b      	str	r3, [r7, #112]	@ 0x70
 800766e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007670:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007674:	4642      	mov	r2, r8
 8007676:	464b      	mov	r3, r9
 8007678:	1891      	adds	r1, r2, r2
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	415b      	adcs	r3, r3
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007684:	4641      	mov	r1, r8
 8007686:	1851      	adds	r1, r2, r1
 8007688:	6039      	str	r1, [r7, #0]
 800768a:	4649      	mov	r1, r9
 800768c:	414b      	adcs	r3, r1
 800768e:	607b      	str	r3, [r7, #4]
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800769c:	4659      	mov	r1, fp
 800769e:	00cb      	lsls	r3, r1, #3
 80076a0:	4651      	mov	r1, sl
 80076a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076a6:	4651      	mov	r1, sl
 80076a8:	00ca      	lsls	r2, r1, #3
 80076aa:	4610      	mov	r0, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	4642      	mov	r2, r8
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076b6:	464b      	mov	r3, r9
 80076b8:	460a      	mov	r2, r1
 80076ba:	eb42 0303 	adc.w	r3, r2, r3
 80076be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80076c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80076ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	f04f 0300 	mov.w	r3, #0
 80076d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076d8:	4649      	mov	r1, r9
 80076da:	008b      	lsls	r3, r1, #2
 80076dc:	4641      	mov	r1, r8
 80076de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076e2:	4641      	mov	r1, r8
 80076e4:	008a      	lsls	r2, r1, #2
 80076e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076ea:	f7f9 fa3f 	bl	8000b6c <__aeabi_uldivmod>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007728 <UART_SetConfig+0x4e4>)
 80076f4:	fba3 1302 	umull	r1, r3, r3, r2
 80076f8:	095b      	lsrs	r3, r3, #5
 80076fa:	2164      	movs	r1, #100	@ 0x64
 80076fc:	fb01 f303 	mul.w	r3, r1, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	3332      	adds	r3, #50	@ 0x32
 8007706:	4a08      	ldr	r2, [pc, #32]	@ (8007728 <UART_SetConfig+0x4e4>)
 8007708:	fba2 2303 	umull	r2, r3, r2, r3
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	f003 020f 	and.w	r2, r3, #15
 8007712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4422      	add	r2, r4
 800771a:	609a      	str	r2, [r3, #8]
}
 800771c:	bf00      	nop
 800771e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007722:	46bd      	mov	sp, r7
 8007724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007728:	51eb851f 	.word	0x51eb851f

0800772c <roundf>:
 800772c:	ee10 0a10 	vmov	r0, s0
 8007730:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8007734:	3a7f      	subs	r2, #127	@ 0x7f
 8007736:	2a16      	cmp	r2, #22
 8007738:	dc15      	bgt.n	8007766 <roundf+0x3a>
 800773a:	2a00      	cmp	r2, #0
 800773c:	da08      	bge.n	8007750 <roundf+0x24>
 800773e:	3201      	adds	r2, #1
 8007740:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8007744:	d101      	bne.n	800774a <roundf+0x1e>
 8007746:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800774a:	ee00 3a10 	vmov	s0, r3
 800774e:	4770      	bx	lr
 8007750:	4907      	ldr	r1, [pc, #28]	@ (8007770 <roundf+0x44>)
 8007752:	4111      	asrs	r1, r2
 8007754:	4201      	tst	r1, r0
 8007756:	d0fa      	beq.n	800774e <roundf+0x22>
 8007758:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800775c:	4113      	asrs	r3, r2
 800775e:	4403      	add	r3, r0
 8007760:	ea23 0301 	bic.w	r3, r3, r1
 8007764:	e7f1      	b.n	800774a <roundf+0x1e>
 8007766:	2a80      	cmp	r2, #128	@ 0x80
 8007768:	d1f1      	bne.n	800774e <roundf+0x22>
 800776a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800776e:	4770      	bx	lr
 8007770:	007fffff 	.word	0x007fffff

08007774 <gcvt>:
 8007774:	b530      	push	{r4, r5, lr}
 8007776:	ed2d 8b02 	vpush	{d8}
 800777a:	eeb0 8a40 	vmov.f32	s16, s0
 800777e:	eef0 8a60 	vmov.f32	s17, s1
 8007782:	460c      	mov	r4, r1
 8007784:	2200      	movs	r2, #0
 8007786:	b083      	sub	sp, #12
 8007788:	4605      	mov	r5, r0
 800778a:	2300      	movs	r3, #0
 800778c:	ec51 0b10 	vmov	r0, r1, d0
 8007790:	f7f9 f99c 	bl	8000acc <__aeabi_dcmplt>
 8007794:	4622      	mov	r2, r4
 8007796:	b118      	cbz	r0, 80077a0 <gcvt+0x2c>
 8007798:	232d      	movs	r3, #45	@ 0x2d
 800779a:	f802 3b01 	strb.w	r3, [r2], #1
 800779e:	3d01      	subs	r5, #1
 80077a0:	2300      	movs	r3, #0
 80077a2:	4809      	ldr	r0, [pc, #36]	@ (80077c8 <gcvt+0x54>)
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	4629      	mov	r1, r5
 80077a8:	2367      	movs	r3, #103	@ 0x67
 80077aa:	eeb0 0a48 	vmov.f32	s0, s16
 80077ae:	eef0 0a68 	vmov.f32	s1, s17
 80077b2:	6800      	ldr	r0, [r0, #0]
 80077b4:	f000 fb24 	bl	8007e00 <_gcvt>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	bf18      	it	ne
 80077bc:	4620      	movne	r0, r4
 80077be:	b003      	add	sp, #12
 80077c0:	ecbd 8b02 	vpop	{d8}
 80077c4:	bd30      	pop	{r4, r5, pc}
 80077c6:	bf00      	nop
 80077c8:	20000238 	.word	0x20000238

080077cc <std>:
 80077cc:	2300      	movs	r3, #0
 80077ce:	b510      	push	{r4, lr}
 80077d0:	4604      	mov	r4, r0
 80077d2:	e9c0 3300 	strd	r3, r3, [r0]
 80077d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077da:	6083      	str	r3, [r0, #8]
 80077dc:	8181      	strh	r1, [r0, #12]
 80077de:	6643      	str	r3, [r0, #100]	@ 0x64
 80077e0:	81c2      	strh	r2, [r0, #14]
 80077e2:	6183      	str	r3, [r0, #24]
 80077e4:	4619      	mov	r1, r3
 80077e6:	2208      	movs	r2, #8
 80077e8:	305c      	adds	r0, #92	@ 0x5c
 80077ea:	f000 f915 	bl	8007a18 <memset>
 80077ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <std+0x58>)
 80077f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80077f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007828 <std+0x5c>)
 80077f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077f6:	4b0d      	ldr	r3, [pc, #52]	@ (800782c <std+0x60>)
 80077f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007830 <std+0x64>)
 80077fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80077fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007834 <std+0x68>)
 8007800:	6224      	str	r4, [r4, #32]
 8007802:	429c      	cmp	r4, r3
 8007804:	d006      	beq.n	8007814 <std+0x48>
 8007806:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800780a:	4294      	cmp	r4, r2
 800780c:	d002      	beq.n	8007814 <std+0x48>
 800780e:	33d0      	adds	r3, #208	@ 0xd0
 8007810:	429c      	cmp	r4, r3
 8007812:	d105      	bne.n	8007820 <std+0x54>
 8007814:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800781c:	f000 b974 	b.w	8007b08 <__retarget_lock_init_recursive>
 8007820:	bd10      	pop	{r4, pc}
 8007822:	bf00      	nop
 8007824:	08007951 	.word	0x08007951
 8007828:	08007973 	.word	0x08007973
 800782c:	080079ab 	.word	0x080079ab
 8007830:	080079cf 	.word	0x080079cf
 8007834:	200016fc 	.word	0x200016fc

08007838 <stdio_exit_handler>:
 8007838:	4a02      	ldr	r2, [pc, #8]	@ (8007844 <stdio_exit_handler+0xc>)
 800783a:	4903      	ldr	r1, [pc, #12]	@ (8007848 <stdio_exit_handler+0x10>)
 800783c:	4803      	ldr	r0, [pc, #12]	@ (800784c <stdio_exit_handler+0x14>)
 800783e:	f000 b869 	b.w	8007914 <_fwalk_sglue>
 8007842:	bf00      	nop
 8007844:	2000022c 	.word	0x2000022c
 8007848:	0800865d 	.word	0x0800865d
 800784c:	2000023c 	.word	0x2000023c

08007850 <cleanup_stdio>:
 8007850:	6841      	ldr	r1, [r0, #4]
 8007852:	4b0c      	ldr	r3, [pc, #48]	@ (8007884 <cleanup_stdio+0x34>)
 8007854:	4299      	cmp	r1, r3
 8007856:	b510      	push	{r4, lr}
 8007858:	4604      	mov	r4, r0
 800785a:	d001      	beq.n	8007860 <cleanup_stdio+0x10>
 800785c:	f000 fefe 	bl	800865c <_fflush_r>
 8007860:	68a1      	ldr	r1, [r4, #8]
 8007862:	4b09      	ldr	r3, [pc, #36]	@ (8007888 <cleanup_stdio+0x38>)
 8007864:	4299      	cmp	r1, r3
 8007866:	d002      	beq.n	800786e <cleanup_stdio+0x1e>
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fef7 	bl	800865c <_fflush_r>
 800786e:	68e1      	ldr	r1, [r4, #12]
 8007870:	4b06      	ldr	r3, [pc, #24]	@ (800788c <cleanup_stdio+0x3c>)
 8007872:	4299      	cmp	r1, r3
 8007874:	d004      	beq.n	8007880 <cleanup_stdio+0x30>
 8007876:	4620      	mov	r0, r4
 8007878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800787c:	f000 beee 	b.w	800865c <_fflush_r>
 8007880:	bd10      	pop	{r4, pc}
 8007882:	bf00      	nop
 8007884:	200016fc 	.word	0x200016fc
 8007888:	20001764 	.word	0x20001764
 800788c:	200017cc 	.word	0x200017cc

08007890 <global_stdio_init.part.0>:
 8007890:	b510      	push	{r4, lr}
 8007892:	4b0b      	ldr	r3, [pc, #44]	@ (80078c0 <global_stdio_init.part.0+0x30>)
 8007894:	4c0b      	ldr	r4, [pc, #44]	@ (80078c4 <global_stdio_init.part.0+0x34>)
 8007896:	4a0c      	ldr	r2, [pc, #48]	@ (80078c8 <global_stdio_init.part.0+0x38>)
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	4620      	mov	r0, r4
 800789c:	2200      	movs	r2, #0
 800789e:	2104      	movs	r1, #4
 80078a0:	f7ff ff94 	bl	80077cc <std>
 80078a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078a8:	2201      	movs	r2, #1
 80078aa:	2109      	movs	r1, #9
 80078ac:	f7ff ff8e 	bl	80077cc <std>
 80078b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078b4:	2202      	movs	r2, #2
 80078b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ba:	2112      	movs	r1, #18
 80078bc:	f7ff bf86 	b.w	80077cc <std>
 80078c0:	20001834 	.word	0x20001834
 80078c4:	200016fc 	.word	0x200016fc
 80078c8:	08007839 	.word	0x08007839

080078cc <__sfp_lock_acquire>:
 80078cc:	4801      	ldr	r0, [pc, #4]	@ (80078d4 <__sfp_lock_acquire+0x8>)
 80078ce:	f000 b91c 	b.w	8007b0a <__retarget_lock_acquire_recursive>
 80078d2:	bf00      	nop
 80078d4:	2000183d 	.word	0x2000183d

080078d8 <__sfp_lock_release>:
 80078d8:	4801      	ldr	r0, [pc, #4]	@ (80078e0 <__sfp_lock_release+0x8>)
 80078da:	f000 b917 	b.w	8007b0c <__retarget_lock_release_recursive>
 80078de:	bf00      	nop
 80078e0:	2000183d 	.word	0x2000183d

080078e4 <__sinit>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	4604      	mov	r4, r0
 80078e8:	f7ff fff0 	bl	80078cc <__sfp_lock_acquire>
 80078ec:	6a23      	ldr	r3, [r4, #32]
 80078ee:	b11b      	cbz	r3, 80078f8 <__sinit+0x14>
 80078f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f4:	f7ff bff0 	b.w	80078d8 <__sfp_lock_release>
 80078f8:	4b04      	ldr	r3, [pc, #16]	@ (800790c <__sinit+0x28>)
 80078fa:	6223      	str	r3, [r4, #32]
 80078fc:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <__sinit+0x2c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1f5      	bne.n	80078f0 <__sinit+0xc>
 8007904:	f7ff ffc4 	bl	8007890 <global_stdio_init.part.0>
 8007908:	e7f2      	b.n	80078f0 <__sinit+0xc>
 800790a:	bf00      	nop
 800790c:	08007851 	.word	0x08007851
 8007910:	20001834 	.word	0x20001834

08007914 <_fwalk_sglue>:
 8007914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007918:	4607      	mov	r7, r0
 800791a:	4688      	mov	r8, r1
 800791c:	4614      	mov	r4, r2
 800791e:	2600      	movs	r6, #0
 8007920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007924:	f1b9 0901 	subs.w	r9, r9, #1
 8007928:	d505      	bpl.n	8007936 <_fwalk_sglue+0x22>
 800792a:	6824      	ldr	r4, [r4, #0]
 800792c:	2c00      	cmp	r4, #0
 800792e:	d1f7      	bne.n	8007920 <_fwalk_sglue+0xc>
 8007930:	4630      	mov	r0, r6
 8007932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d907      	bls.n	800794c <_fwalk_sglue+0x38>
 800793c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007940:	3301      	adds	r3, #1
 8007942:	d003      	beq.n	800794c <_fwalk_sglue+0x38>
 8007944:	4629      	mov	r1, r5
 8007946:	4638      	mov	r0, r7
 8007948:	47c0      	blx	r8
 800794a:	4306      	orrs	r6, r0
 800794c:	3568      	adds	r5, #104	@ 0x68
 800794e:	e7e9      	b.n	8007924 <_fwalk_sglue+0x10>

08007950 <__sread>:
 8007950:	b510      	push	{r4, lr}
 8007952:	460c      	mov	r4, r1
 8007954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007958:	f000 f888 	bl	8007a6c <_read_r>
 800795c:	2800      	cmp	r0, #0
 800795e:	bfab      	itete	ge
 8007960:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007962:	89a3      	ldrhlt	r3, [r4, #12]
 8007964:	181b      	addge	r3, r3, r0
 8007966:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800796a:	bfac      	ite	ge
 800796c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800796e:	81a3      	strhlt	r3, [r4, #12]
 8007970:	bd10      	pop	{r4, pc}

08007972 <__swrite>:
 8007972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007976:	461f      	mov	r7, r3
 8007978:	898b      	ldrh	r3, [r1, #12]
 800797a:	05db      	lsls	r3, r3, #23
 800797c:	4605      	mov	r5, r0
 800797e:	460c      	mov	r4, r1
 8007980:	4616      	mov	r6, r2
 8007982:	d505      	bpl.n	8007990 <__swrite+0x1e>
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	2302      	movs	r3, #2
 800798a:	2200      	movs	r2, #0
 800798c:	f000 f85c 	bl	8007a48 <_lseek_r>
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007996:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	4632      	mov	r2, r6
 800799e:	463b      	mov	r3, r7
 80079a0:	4628      	mov	r0, r5
 80079a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079a6:	f000 b873 	b.w	8007a90 <_write_r>

080079aa <__sseek>:
 80079aa:	b510      	push	{r4, lr}
 80079ac:	460c      	mov	r4, r1
 80079ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b2:	f000 f849 	bl	8007a48 <_lseek_r>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	bf15      	itete	ne
 80079bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079c6:	81a3      	strheq	r3, [r4, #12]
 80079c8:	bf18      	it	ne
 80079ca:	81a3      	strhne	r3, [r4, #12]
 80079cc:	bd10      	pop	{r4, pc}

080079ce <__sclose>:
 80079ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d2:	f000 b829 	b.w	8007a28 <_close_r>
	...

080079d8 <_vsiprintf_r>:
 80079d8:	b500      	push	{lr}
 80079da:	b09b      	sub	sp, #108	@ 0x6c
 80079dc:	9100      	str	r1, [sp, #0]
 80079de:	9104      	str	r1, [sp, #16]
 80079e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079e4:	9105      	str	r1, [sp, #20]
 80079e6:	9102      	str	r1, [sp, #8]
 80079e8:	4905      	ldr	r1, [pc, #20]	@ (8007a00 <_vsiprintf_r+0x28>)
 80079ea:	9103      	str	r1, [sp, #12]
 80079ec:	4669      	mov	r1, sp
 80079ee:	f000 fb27 	bl	8008040 <_svfiprintf_r>
 80079f2:	9b00      	ldr	r3, [sp, #0]
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]
 80079f8:	b01b      	add	sp, #108	@ 0x6c
 80079fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80079fe:	bf00      	nop
 8007a00:	ffff0208 	.word	0xffff0208

08007a04 <vsiprintf>:
 8007a04:	4613      	mov	r3, r2
 8007a06:	460a      	mov	r2, r1
 8007a08:	4601      	mov	r1, r0
 8007a0a:	4802      	ldr	r0, [pc, #8]	@ (8007a14 <vsiprintf+0x10>)
 8007a0c:	6800      	ldr	r0, [r0, #0]
 8007a0e:	f7ff bfe3 	b.w	80079d8 <_vsiprintf_r>
 8007a12:	bf00      	nop
 8007a14:	20000238 	.word	0x20000238

08007a18 <memset>:
 8007a18:	4402      	add	r2, r0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d100      	bne.n	8007a22 <memset+0xa>
 8007a20:	4770      	bx	lr
 8007a22:	f803 1b01 	strb.w	r1, [r3], #1
 8007a26:	e7f9      	b.n	8007a1c <memset+0x4>

08007a28 <_close_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d06      	ldr	r5, [pc, #24]	@ (8007a44 <_close_r+0x1c>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7fb fa00 	bl	8002e38 <_close>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_close_r+0x1a>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_close_r+0x1a>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	20001838 	.word	0x20001838

08007a48 <_lseek_r>:
 8007a48:	b538      	push	{r3, r4, r5, lr}
 8007a4a:	4d07      	ldr	r5, [pc, #28]	@ (8007a68 <_lseek_r+0x20>)
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	4608      	mov	r0, r1
 8007a50:	4611      	mov	r1, r2
 8007a52:	2200      	movs	r2, #0
 8007a54:	602a      	str	r2, [r5, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	f7fb fa15 	bl	8002e86 <_lseek>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_lseek_r+0x1e>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_lseek_r+0x1e>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	20001838 	.word	0x20001838

08007a6c <_read_r>:
 8007a6c:	b538      	push	{r3, r4, r5, lr}
 8007a6e:	4d07      	ldr	r5, [pc, #28]	@ (8007a8c <_read_r+0x20>)
 8007a70:	4604      	mov	r4, r0
 8007a72:	4608      	mov	r0, r1
 8007a74:	4611      	mov	r1, r2
 8007a76:	2200      	movs	r2, #0
 8007a78:	602a      	str	r2, [r5, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f7fb f9a3 	bl	8002dc6 <_read>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_read_r+0x1e>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_read_r+0x1e>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	20001838 	.word	0x20001838

08007a90 <_write_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	@ (8007ab0 <_write_r+0x20>)
 8007a94:	4604      	mov	r4, r0
 8007a96:	4608      	mov	r0, r1
 8007a98:	4611      	mov	r1, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	602a      	str	r2, [r5, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f7fb f9ae 	bl	8002e00 <_write>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_write_r+0x1e>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_write_r+0x1e>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	20001838 	.word	0x20001838

08007ab4 <__errno>:
 8007ab4:	4b01      	ldr	r3, [pc, #4]	@ (8007abc <__errno+0x8>)
 8007ab6:	6818      	ldr	r0, [r3, #0]
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	20000238 	.word	0x20000238

08007ac0 <__libc_init_array>:
 8007ac0:	b570      	push	{r4, r5, r6, lr}
 8007ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8007af8 <__libc_init_array+0x38>)
 8007ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8007afc <__libc_init_array+0x3c>)
 8007ac6:	1b64      	subs	r4, r4, r5
 8007ac8:	10a4      	asrs	r4, r4, #2
 8007aca:	2600      	movs	r6, #0
 8007acc:	42a6      	cmp	r6, r4
 8007ace:	d109      	bne.n	8007ae4 <__libc_init_array+0x24>
 8007ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8007b00 <__libc_init_array+0x40>)
 8007ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8007b04 <__libc_init_array+0x44>)
 8007ad4:	f002 fb2e 	bl	800a134 <_init>
 8007ad8:	1b64      	subs	r4, r4, r5
 8007ada:	10a4      	asrs	r4, r4, #2
 8007adc:	2600      	movs	r6, #0
 8007ade:	42a6      	cmp	r6, r4
 8007ae0:	d105      	bne.n	8007aee <__libc_init_array+0x2e>
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae8:	4798      	blx	r3
 8007aea:	3601      	adds	r6, #1
 8007aec:	e7ee      	b.n	8007acc <__libc_init_array+0xc>
 8007aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007af2:	4798      	blx	r3
 8007af4:	3601      	adds	r6, #1
 8007af6:	e7f2      	b.n	8007ade <__libc_init_array+0x1e>
 8007af8:	0800a944 	.word	0x0800a944
 8007afc:	0800a944 	.word	0x0800a944
 8007b00:	0800a944 	.word	0x0800a944
 8007b04:	0800a948 	.word	0x0800a948

08007b08 <__retarget_lock_init_recursive>:
 8007b08:	4770      	bx	lr

08007b0a <__retarget_lock_acquire_recursive>:
 8007b0a:	4770      	bx	lr

08007b0c <__retarget_lock_release_recursive>:
 8007b0c:	4770      	bx	lr

08007b0e <memcpy>:
 8007b0e:	440a      	add	r2, r1
 8007b10:	4291      	cmp	r1, r2
 8007b12:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007b16:	d100      	bne.n	8007b1a <memcpy+0xc>
 8007b18:	4770      	bx	lr
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b24:	4291      	cmp	r1, r2
 8007b26:	d1f9      	bne.n	8007b1c <memcpy+0xe>
 8007b28:	bd10      	pop	{r4, pc}
	...

08007b2c <_free_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4605      	mov	r5, r0
 8007b30:	2900      	cmp	r1, #0
 8007b32:	d041      	beq.n	8007bb8 <_free_r+0x8c>
 8007b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b38:	1f0c      	subs	r4, r1, #4
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	bfb8      	it	lt
 8007b3e:	18e4      	addlt	r4, r4, r3
 8007b40:	f000 f8e0 	bl	8007d04 <__malloc_lock>
 8007b44:	4a1d      	ldr	r2, [pc, #116]	@ (8007bbc <_free_r+0x90>)
 8007b46:	6813      	ldr	r3, [r2, #0]
 8007b48:	b933      	cbnz	r3, 8007b58 <_free_r+0x2c>
 8007b4a:	6063      	str	r3, [r4, #4]
 8007b4c:	6014      	str	r4, [r2, #0]
 8007b4e:	4628      	mov	r0, r5
 8007b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b54:	f000 b8dc 	b.w	8007d10 <__malloc_unlock>
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	d908      	bls.n	8007b6e <_free_r+0x42>
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	1821      	adds	r1, r4, r0
 8007b60:	428b      	cmp	r3, r1
 8007b62:	bf01      	itttt	eq
 8007b64:	6819      	ldreq	r1, [r3, #0]
 8007b66:	685b      	ldreq	r3, [r3, #4]
 8007b68:	1809      	addeq	r1, r1, r0
 8007b6a:	6021      	streq	r1, [r4, #0]
 8007b6c:	e7ed      	b.n	8007b4a <_free_r+0x1e>
 8007b6e:	461a      	mov	r2, r3
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	b10b      	cbz	r3, 8007b78 <_free_r+0x4c>
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d9fa      	bls.n	8007b6e <_free_r+0x42>
 8007b78:	6811      	ldr	r1, [r2, #0]
 8007b7a:	1850      	adds	r0, r2, r1
 8007b7c:	42a0      	cmp	r0, r4
 8007b7e:	d10b      	bne.n	8007b98 <_free_r+0x6c>
 8007b80:	6820      	ldr	r0, [r4, #0]
 8007b82:	4401      	add	r1, r0
 8007b84:	1850      	adds	r0, r2, r1
 8007b86:	4283      	cmp	r3, r0
 8007b88:	6011      	str	r1, [r2, #0]
 8007b8a:	d1e0      	bne.n	8007b4e <_free_r+0x22>
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	6053      	str	r3, [r2, #4]
 8007b92:	4408      	add	r0, r1
 8007b94:	6010      	str	r0, [r2, #0]
 8007b96:	e7da      	b.n	8007b4e <_free_r+0x22>
 8007b98:	d902      	bls.n	8007ba0 <_free_r+0x74>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	602b      	str	r3, [r5, #0]
 8007b9e:	e7d6      	b.n	8007b4e <_free_r+0x22>
 8007ba0:	6820      	ldr	r0, [r4, #0]
 8007ba2:	1821      	adds	r1, r4, r0
 8007ba4:	428b      	cmp	r3, r1
 8007ba6:	bf04      	itt	eq
 8007ba8:	6819      	ldreq	r1, [r3, #0]
 8007baa:	685b      	ldreq	r3, [r3, #4]
 8007bac:	6063      	str	r3, [r4, #4]
 8007bae:	bf04      	itt	eq
 8007bb0:	1809      	addeq	r1, r1, r0
 8007bb2:	6021      	streq	r1, [r4, #0]
 8007bb4:	6054      	str	r4, [r2, #4]
 8007bb6:	e7ca      	b.n	8007b4e <_free_r+0x22>
 8007bb8:	bd38      	pop	{r3, r4, r5, pc}
 8007bba:	bf00      	nop
 8007bbc:	20001844 	.word	0x20001844

08007bc0 <sbrk_aligned>:
 8007bc0:	b570      	push	{r4, r5, r6, lr}
 8007bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8007c00 <sbrk_aligned+0x40>)
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	6831      	ldr	r1, [r6, #0]
 8007bc8:	4605      	mov	r5, r0
 8007bca:	b911      	cbnz	r1, 8007bd2 <sbrk_aligned+0x12>
 8007bcc:	f000 fd88 	bl	80086e0 <_sbrk_r>
 8007bd0:	6030      	str	r0, [r6, #0]
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	f000 fd83 	bl	80086e0 <_sbrk_r>
 8007bda:	1c43      	adds	r3, r0, #1
 8007bdc:	d103      	bne.n	8007be6 <sbrk_aligned+0x26>
 8007bde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007be2:	4620      	mov	r0, r4
 8007be4:	bd70      	pop	{r4, r5, r6, pc}
 8007be6:	1cc4      	adds	r4, r0, #3
 8007be8:	f024 0403 	bic.w	r4, r4, #3
 8007bec:	42a0      	cmp	r0, r4
 8007bee:	d0f8      	beq.n	8007be2 <sbrk_aligned+0x22>
 8007bf0:	1a21      	subs	r1, r4, r0
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 fd74 	bl	80086e0 <_sbrk_r>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d1f2      	bne.n	8007be2 <sbrk_aligned+0x22>
 8007bfc:	e7ef      	b.n	8007bde <sbrk_aligned+0x1e>
 8007bfe:	bf00      	nop
 8007c00:	20001840 	.word	0x20001840

08007c04 <_malloc_r>:
 8007c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c08:	1ccd      	adds	r5, r1, #3
 8007c0a:	f025 0503 	bic.w	r5, r5, #3
 8007c0e:	3508      	adds	r5, #8
 8007c10:	2d0c      	cmp	r5, #12
 8007c12:	bf38      	it	cc
 8007c14:	250c      	movcc	r5, #12
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	4606      	mov	r6, r0
 8007c1a:	db01      	blt.n	8007c20 <_malloc_r+0x1c>
 8007c1c:	42a9      	cmp	r1, r5
 8007c1e:	d904      	bls.n	8007c2a <_malloc_r+0x26>
 8007c20:	230c      	movs	r3, #12
 8007c22:	6033      	str	r3, [r6, #0]
 8007c24:	2000      	movs	r0, #0
 8007c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d00 <_malloc_r+0xfc>
 8007c2e:	f000 f869 	bl	8007d04 <__malloc_lock>
 8007c32:	f8d8 3000 	ldr.w	r3, [r8]
 8007c36:	461c      	mov	r4, r3
 8007c38:	bb44      	cbnz	r4, 8007c8c <_malloc_r+0x88>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff ffbf 	bl	8007bc0 <sbrk_aligned>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	4604      	mov	r4, r0
 8007c46:	d158      	bne.n	8007cfa <_malloc_r+0xf6>
 8007c48:	f8d8 4000 	ldr.w	r4, [r8]
 8007c4c:	4627      	mov	r7, r4
 8007c4e:	2f00      	cmp	r7, #0
 8007c50:	d143      	bne.n	8007cda <_malloc_r+0xd6>
 8007c52:	2c00      	cmp	r4, #0
 8007c54:	d04b      	beq.n	8007cee <_malloc_r+0xea>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	4639      	mov	r1, r7
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	eb04 0903 	add.w	r9, r4, r3
 8007c60:	f000 fd3e 	bl	80086e0 <_sbrk_r>
 8007c64:	4581      	cmp	r9, r0
 8007c66:	d142      	bne.n	8007cee <_malloc_r+0xea>
 8007c68:	6821      	ldr	r1, [r4, #0]
 8007c6a:	1a6d      	subs	r5, r5, r1
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7ff ffa6 	bl	8007bc0 <sbrk_aligned>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d03a      	beq.n	8007cee <_malloc_r+0xea>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	442b      	add	r3, r5
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	bb62      	cbnz	r2, 8007ce0 <_malloc_r+0xdc>
 8007c86:	f8c8 7000 	str.w	r7, [r8]
 8007c8a:	e00f      	b.n	8007cac <_malloc_r+0xa8>
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	1b52      	subs	r2, r2, r5
 8007c90:	d420      	bmi.n	8007cd4 <_malloc_r+0xd0>
 8007c92:	2a0b      	cmp	r2, #11
 8007c94:	d917      	bls.n	8007cc6 <_malloc_r+0xc2>
 8007c96:	1961      	adds	r1, r4, r5
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	6025      	str	r5, [r4, #0]
 8007c9c:	bf18      	it	ne
 8007c9e:	6059      	strne	r1, [r3, #4]
 8007ca0:	6863      	ldr	r3, [r4, #4]
 8007ca2:	bf08      	it	eq
 8007ca4:	f8c8 1000 	streq.w	r1, [r8]
 8007ca8:	5162      	str	r2, [r4, r5]
 8007caa:	604b      	str	r3, [r1, #4]
 8007cac:	4630      	mov	r0, r6
 8007cae:	f000 f82f 	bl	8007d10 <__malloc_unlock>
 8007cb2:	f104 000b 	add.w	r0, r4, #11
 8007cb6:	1d23      	adds	r3, r4, #4
 8007cb8:	f020 0007 	bic.w	r0, r0, #7
 8007cbc:	1ac2      	subs	r2, r0, r3
 8007cbe:	bf1c      	itt	ne
 8007cc0:	1a1b      	subne	r3, r3, r0
 8007cc2:	50a3      	strne	r3, [r4, r2]
 8007cc4:	e7af      	b.n	8007c26 <_malloc_r+0x22>
 8007cc6:	6862      	ldr	r2, [r4, #4]
 8007cc8:	42a3      	cmp	r3, r4
 8007cca:	bf0c      	ite	eq
 8007ccc:	f8c8 2000 	streq.w	r2, [r8]
 8007cd0:	605a      	strne	r2, [r3, #4]
 8007cd2:	e7eb      	b.n	8007cac <_malloc_r+0xa8>
 8007cd4:	4623      	mov	r3, r4
 8007cd6:	6864      	ldr	r4, [r4, #4]
 8007cd8:	e7ae      	b.n	8007c38 <_malloc_r+0x34>
 8007cda:	463c      	mov	r4, r7
 8007cdc:	687f      	ldr	r7, [r7, #4]
 8007cde:	e7b6      	b.n	8007c4e <_malloc_r+0x4a>
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	d1fb      	bne.n	8007ce0 <_malloc_r+0xdc>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	6053      	str	r3, [r2, #4]
 8007cec:	e7de      	b.n	8007cac <_malloc_r+0xa8>
 8007cee:	230c      	movs	r3, #12
 8007cf0:	6033      	str	r3, [r6, #0]
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 f80c 	bl	8007d10 <__malloc_unlock>
 8007cf8:	e794      	b.n	8007c24 <_malloc_r+0x20>
 8007cfa:	6005      	str	r5, [r0, #0]
 8007cfc:	e7d6      	b.n	8007cac <_malloc_r+0xa8>
 8007cfe:	bf00      	nop
 8007d00:	20001844 	.word	0x20001844

08007d04 <__malloc_lock>:
 8007d04:	4801      	ldr	r0, [pc, #4]	@ (8007d0c <__malloc_lock+0x8>)
 8007d06:	f7ff bf00 	b.w	8007b0a <__retarget_lock_acquire_recursive>
 8007d0a:	bf00      	nop
 8007d0c:	2000183c 	.word	0x2000183c

08007d10 <__malloc_unlock>:
 8007d10:	4801      	ldr	r0, [pc, #4]	@ (8007d18 <__malloc_unlock+0x8>)
 8007d12:	f7ff befb 	b.w	8007b0c <__retarget_lock_release_recursive>
 8007d16:	bf00      	nop
 8007d18:	2000183c 	.word	0x2000183c

08007d1c <print_e>:
 8007d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	461e      	mov	r6, r3
 8007d22:	ab04      	add	r3, sp, #16
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	ab03      	add	r3, sp, #12
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	ab05      	add	r3, sp, #20
 8007d2e:	2102      	movs	r1, #2
 8007d30:	4615      	mov	r5, r2
 8007d32:	3201      	adds	r2, #1
 8007d34:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007d36:	f000 fd73 	bl	8008820 <_dtoa_r>
 8007d3a:	9b05      	ldr	r3, [sp, #20]
 8007d3c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8007d40:	4293      	cmp	r3, r2
 8007d42:	4601      	mov	r1, r0
 8007d44:	d104      	bne.n	8007d50 <print_e+0x34>
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 fcda 	bl	8008700 <strcpy>
 8007d4c:	b007      	add	sp, #28
 8007d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d50:	7802      	ldrb	r2, [r0, #0]
 8007d52:	f804 2b01 	strb.w	r2, [r4], #1
 8007d56:	2d00      	cmp	r5, #0
 8007d58:	bfc8      	it	gt
 8007d5a:	2701      	movgt	r7, #1
 8007d5c:	222e      	movs	r2, #46	@ 0x2e
 8007d5e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d62:	b108      	cbz	r0, 8007d68 <print_e+0x4c>
 8007d64:	2d00      	cmp	r5, #0
 8007d66:	dc29      	bgt.n	8007dbc <print_e+0xa0>
 8007d68:	2e67      	cmp	r6, #103	@ 0x67
 8007d6a:	d038      	beq.n	8007dde <print_e+0xc2>
 8007d6c:	2e47      	cmp	r6, #71	@ 0x47
 8007d6e:	d038      	beq.n	8007de2 <print_e+0xc6>
 8007d70:	222e      	movs	r2, #46	@ 0x2e
 8007d72:	2130      	movs	r1, #48	@ 0x30
 8007d74:	2d00      	cmp	r5, #0
 8007d76:	dc2a      	bgt.n	8007dce <print_e+0xb2>
 8007d78:	1e5a      	subs	r2, r3, #1
 8007d7a:	2a00      	cmp	r2, #0
 8007d7c:	bfb8      	it	lt
 8007d7e:	f1c3 0301 	rsblt	r3, r3, #1
 8007d82:	9205      	str	r2, [sp, #20]
 8007d84:	bfaa      	itet	ge
 8007d86:	232b      	movge	r3, #43	@ 0x2b
 8007d88:	9305      	strlt	r3, [sp, #20]
 8007d8a:	7063      	strbge	r3, [r4, #1]
 8007d8c:	9b05      	ldr	r3, [sp, #20]
 8007d8e:	7026      	strb	r6, [r4, #0]
 8007d90:	bfbc      	itt	lt
 8007d92:	222d      	movlt	r2, #45	@ 0x2d
 8007d94:	7062      	strblt	r2, [r4, #1]
 8007d96:	2b63      	cmp	r3, #99	@ 0x63
 8007d98:	dc25      	bgt.n	8007de6 <print_e+0xca>
 8007d9a:	1ca1      	adds	r1, r4, #2
 8007d9c:	9b05      	ldr	r3, [sp, #20]
 8007d9e:	220a      	movs	r2, #10
 8007da0:	fb93 f2f2 	sdiv	r2, r3, r2
 8007da4:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8007da8:	7008      	strb	r0, [r1, #0]
 8007daa:	f06f 0009 	mvn.w	r0, #9
 8007dae:	fb00 3302 	mla	r3, r0, r2, r3
 8007db2:	3330      	adds	r3, #48	@ 0x30
 8007db4:	704b      	strb	r3, [r1, #1]
 8007db6:	2300      	movs	r3, #0
 8007db8:	708b      	strb	r3, [r1, #2]
 8007dba:	e7c7      	b.n	8007d4c <print_e+0x30>
 8007dbc:	b10f      	cbz	r7, 8007dc2 <print_e+0xa6>
 8007dbe:	f804 2b01 	strb.w	r2, [r4], #1
 8007dc2:	7808      	ldrb	r0, [r1, #0]
 8007dc4:	f804 0b01 	strb.w	r0, [r4], #1
 8007dc8:	3d01      	subs	r5, #1
 8007dca:	2700      	movs	r7, #0
 8007dcc:	e7c7      	b.n	8007d5e <print_e+0x42>
 8007dce:	b10f      	cbz	r7, 8007dd4 <print_e+0xb8>
 8007dd0:	f804 2b01 	strb.w	r2, [r4], #1
 8007dd4:	f804 1b01 	strb.w	r1, [r4], #1
 8007dd8:	3d01      	subs	r5, #1
 8007dda:	2700      	movs	r7, #0
 8007ddc:	e7ca      	b.n	8007d74 <print_e+0x58>
 8007dde:	2665      	movs	r6, #101	@ 0x65
 8007de0:	e7ca      	b.n	8007d78 <print_e+0x5c>
 8007de2:	2645      	movs	r6, #69	@ 0x45
 8007de4:	e7c8      	b.n	8007d78 <print_e+0x5c>
 8007de6:	2264      	movs	r2, #100	@ 0x64
 8007de8:	fb93 f2f2 	sdiv	r2, r3, r2
 8007dec:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8007df0:	70a0      	strb	r0, [r4, #2]
 8007df2:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 8007df6:	fb00 3302 	mla	r3, r0, r2, r3
 8007dfa:	1ce1      	adds	r1, r4, #3
 8007dfc:	9305      	str	r3, [sp, #20]
 8007dfe:	e7cd      	b.n	8007d9c <print_e+0x80>

08007e00 <_gcvt>:
 8007e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	ec59 8b10 	vmov	r8, r9, d0
 8007e08:	b086      	sub	sp, #24
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	460c      	mov	r4, r1
 8007e0e:	4616      	mov	r6, r2
 8007e10:	469a      	mov	sl, r3
 8007e12:	2200      	movs	r2, #0
 8007e14:	2300      	movs	r3, #0
 8007e16:	4640      	mov	r0, r8
 8007e18:	4649      	mov	r1, r9
 8007e1a:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8007e1c:	f7f8 fe56 	bl	8000acc <__aeabi_dcmplt>
 8007e20:	b110      	cbz	r0, 8007e28 <_gcvt+0x28>
 8007e22:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8007e26:	4699      	mov	r9, r3
 8007e28:	2200      	movs	r2, #0
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4640      	mov	r0, r8
 8007e2e:	4649      	mov	r1, r9
 8007e30:	f7f8 fe42 	bl	8000ab8 <__aeabi_dcmpeq>
 8007e34:	b138      	cbz	r0, 8007e46 <_gcvt+0x46>
 8007e36:	2330      	movs	r3, #48	@ 0x30
 8007e38:	7033      	strb	r3, [r6, #0]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	7073      	strb	r3, [r6, #1]
 8007e3e:	4630      	mov	r0, r6
 8007e40:	b006      	add	sp, #24
 8007e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e46:	a34e      	add	r3, pc, #312	@ (adr r3, 8007f80 <_gcvt+0x180>)
 8007e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	4649      	mov	r1, r9
 8007e50:	f7f8 fe46 	bl	8000ae0 <__aeabi_dcmple>
 8007e54:	b148      	cbz	r0, 8007e6a <_gcvt+0x6a>
 8007e56:	ec49 8b10 	vmov	d0, r8, r9
 8007e5a:	9700      	str	r7, [sp, #0]
 8007e5c:	4653      	mov	r3, sl
 8007e5e:	1e62      	subs	r2, r4, #1
 8007e60:	4631      	mov	r1, r6
 8007e62:	4628      	mov	r0, r5
 8007e64:	f7ff ff5a 	bl	8007d1c <print_e>
 8007e68:	e7e9      	b.n	8007e3e <_gcvt+0x3e>
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f001 fe26 	bl	8009abc <_mprec_log10>
 8007e70:	4642      	mov	r2, r8
 8007e72:	ec51 0b10 	vmov	r0, r1, d0
 8007e76:	464b      	mov	r3, r9
 8007e78:	f7f8 fe32 	bl	8000ae0 <__aeabi_dcmple>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	d1ea      	bne.n	8007e56 <_gcvt+0x56>
 8007e80:	ab05      	add	r3, sp, #20
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	ab04      	add	r3, sp, #16
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	4622      	mov	r2, r4
 8007e8a:	ab03      	add	r3, sp, #12
 8007e8c:	2102      	movs	r1, #2
 8007e8e:	ec49 8b10 	vmov	d0, r8, r9
 8007e92:	4628      	mov	r0, r5
 8007e94:	f000 fcc4 	bl	8008820 <_dtoa_r>
 8007e98:	9a03      	ldr	r2, [sp, #12]
 8007e9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	4601      	mov	r1, r0
 8007ea2:	d00e      	beq.n	8007ec2 <_gcvt+0xc2>
 8007ea4:	4633      	mov	r3, r6
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007eac:	9d03      	ldr	r5, [sp, #12]
 8007eae:	b10a      	cbz	r2, 8007eb4 <_gcvt+0xb4>
 8007eb0:	2d00      	cmp	r5, #0
 8007eb2:	dc0a      	bgt.n	8007eca <_gcvt+0xca>
 8007eb4:	1931      	adds	r1, r6, r4
 8007eb6:	1ac9      	subs	r1, r1, r3
 8007eb8:	462c      	mov	r4, r5
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8007ec0:	e00c      	b.n	8007edc <_gcvt+0xdc>
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f000 fc1c 	bl	8008700 <strcpy>
 8007ec8:	e7b9      	b.n	8007e3e <_gcvt+0x3e>
 8007eca:	3d01      	subs	r5, #1
 8007ecc:	f803 2b01 	strb.w	r2, [r3], #1
 8007ed0:	9503      	str	r5, [sp, #12]
 8007ed2:	e7e8      	b.n	8007ea6 <_gcvt+0xa6>
 8007ed4:	f803 cb01 	strb.w	ip, [r3], #1
 8007ed8:	3901      	subs	r1, #1
 8007eda:	2201      	movs	r2, #1
 8007edc:	2c00      	cmp	r4, #0
 8007ede:	4625      	mov	r5, r4
 8007ee0:	dc2e      	bgt.n	8007f40 <_gcvt+0x140>
 8007ee2:	b102      	cbz	r2, 8007ee6 <_gcvt+0xe6>
 8007ee4:	9403      	str	r4, [sp, #12]
 8007ee6:	b90f      	cbnz	r7, 8007eec <_gcvt+0xec>
 8007ee8:	7802      	ldrb	r2, [r0, #0]
 8007eea:	b332      	cbz	r2, 8007f3a <_gcvt+0x13a>
 8007eec:	42b3      	cmp	r3, r6
 8007eee:	bf04      	itt	eq
 8007ef0:	2230      	moveq	r2, #48	@ 0x30
 8007ef2:	f803 2b01 	strbeq.w	r2, [r3], #1
 8007ef6:	222e      	movs	r2, #46	@ 0x2e
 8007ef8:	701a      	strb	r2, [r3, #0]
 8007efa:	9a03      	ldr	r2, [sp, #12]
 8007efc:	461c      	mov	r4, r3
 8007efe:	f04f 0c00 	mov.w	ip, #0
 8007f02:	1ad5      	subs	r5, r2, r3
 8007f04:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 8007f08:	42e5      	cmn	r5, r4
 8007f0a:	d421      	bmi.n	8007f50 <_gcvt+0x150>
 8007f0c:	2a00      	cmp	r2, #0
 8007f0e:	f1c2 0400 	rsb	r4, r2, #0
 8007f12:	bfd4      	ite	le
 8007f14:	4625      	movle	r5, r4
 8007f16:	2500      	movgt	r5, #0
 8007f18:	3501      	adds	r5, #1
 8007f1a:	442b      	add	r3, r5
 8007f1c:	f1bc 0f00 	cmp.w	ip, #0
 8007f20:	d004      	beq.n	8007f2c <_gcvt+0x12c>
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	bfc8      	it	gt
 8007f26:	2400      	movgt	r4, #0
 8007f28:	4422      	add	r2, r4
 8007f2a:	9203      	str	r2, [sp, #12]
 8007f2c:	1e42      	subs	r2, r0, #1
 8007f2e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8007f32:	b108      	cbz	r0, 8007f38 <_gcvt+0x138>
 8007f34:	2900      	cmp	r1, #0
 8007f36:	dc10      	bgt.n	8007f5a <_gcvt+0x15a>
 8007f38:	b9e7      	cbnz	r7, 8007f74 <_gcvt+0x174>
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	701a      	strb	r2, [r3, #0]
 8007f3e:	e77e      	b.n	8007e3e <_gcvt+0x3e>
 8007f40:	2900      	cmp	r1, #0
 8007f42:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8007f46:	dcc5      	bgt.n	8007ed4 <_gcvt+0xd4>
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	d0cc      	beq.n	8007ee6 <_gcvt+0xe6>
 8007f4c:	9503      	str	r5, [sp, #12]
 8007f4e:	e7ca      	b.n	8007ee6 <_gcvt+0xe6>
 8007f50:	f804 ef01 	strb.w	lr, [r4, #1]!
 8007f54:	f04f 0c01 	mov.w	ip, #1
 8007f58:	e7d6      	b.n	8007f08 <_gcvt+0x108>
 8007f5a:	f803 0b01 	strb.w	r0, [r3], #1
 8007f5e:	3901      	subs	r1, #1
 8007f60:	e7e5      	b.n	8007f2e <_gcvt+0x12e>
 8007f62:	f802 5b01 	strb.w	r5, [r2], #1
 8007f66:	1aa0      	subs	r0, r4, r2
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	dcfa      	bgt.n	8007f62 <_gcvt+0x162>
 8007f6c:	2900      	cmp	r1, #0
 8007f6e:	bfa8      	it	ge
 8007f70:	185b      	addge	r3, r3, r1
 8007f72:	e7e2      	b.n	8007f3a <_gcvt+0x13a>
 8007f74:	461a      	mov	r2, r3
 8007f76:	185c      	adds	r4, r3, r1
 8007f78:	2530      	movs	r5, #48	@ 0x30
 8007f7a:	e7f4      	b.n	8007f66 <_gcvt+0x166>
 8007f7c:	f3af 8000 	nop.w
 8007f80:	eb1c432d 	.word	0xeb1c432d
 8007f84:	3f1a36e2 	.word	0x3f1a36e2

08007f88 <__ssputs_r>:
 8007f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	688e      	ldr	r6, [r1, #8]
 8007f8e:	461f      	mov	r7, r3
 8007f90:	42be      	cmp	r6, r7
 8007f92:	680b      	ldr	r3, [r1, #0]
 8007f94:	4682      	mov	sl, r0
 8007f96:	460c      	mov	r4, r1
 8007f98:	4690      	mov	r8, r2
 8007f9a:	d82d      	bhi.n	8007ff8 <__ssputs_r+0x70>
 8007f9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fa4:	d026      	beq.n	8007ff4 <__ssputs_r+0x6c>
 8007fa6:	6965      	ldr	r5, [r4, #20]
 8007fa8:	6909      	ldr	r1, [r1, #16]
 8007faa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fae:	eba3 0901 	sub.w	r9, r3, r1
 8007fb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fb6:	1c7b      	adds	r3, r7, #1
 8007fb8:	444b      	add	r3, r9
 8007fba:	106d      	asrs	r5, r5, #1
 8007fbc:	429d      	cmp	r5, r3
 8007fbe:	bf38      	it	cc
 8007fc0:	461d      	movcc	r5, r3
 8007fc2:	0553      	lsls	r3, r2, #21
 8007fc4:	d527      	bpl.n	8008016 <__ssputs_r+0x8e>
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7ff fe1c 	bl	8007c04 <_malloc_r>
 8007fcc:	4606      	mov	r6, r0
 8007fce:	b360      	cbz	r0, 800802a <__ssputs_r+0xa2>
 8007fd0:	6921      	ldr	r1, [r4, #16]
 8007fd2:	464a      	mov	r2, r9
 8007fd4:	f7ff fd9b 	bl	8007b0e <memcpy>
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	6126      	str	r6, [r4, #16]
 8007fe6:	6165      	str	r5, [r4, #20]
 8007fe8:	444e      	add	r6, r9
 8007fea:	eba5 0509 	sub.w	r5, r5, r9
 8007fee:	6026      	str	r6, [r4, #0]
 8007ff0:	60a5      	str	r5, [r4, #8]
 8007ff2:	463e      	mov	r6, r7
 8007ff4:	42be      	cmp	r6, r7
 8007ff6:	d900      	bls.n	8007ffa <__ssputs_r+0x72>
 8007ff8:	463e      	mov	r6, r7
 8007ffa:	6820      	ldr	r0, [r4, #0]
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	4641      	mov	r1, r8
 8008000:	f000 fb54 	bl	80086ac <memmove>
 8008004:	68a3      	ldr	r3, [r4, #8]
 8008006:	1b9b      	subs	r3, r3, r6
 8008008:	60a3      	str	r3, [r4, #8]
 800800a:	6823      	ldr	r3, [r4, #0]
 800800c:	4433      	add	r3, r6
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	2000      	movs	r0, #0
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	462a      	mov	r2, r5
 8008018:	f001 fd6e 	bl	8009af8 <_realloc_r>
 800801c:	4606      	mov	r6, r0
 800801e:	2800      	cmp	r0, #0
 8008020:	d1e0      	bne.n	8007fe4 <__ssputs_r+0x5c>
 8008022:	6921      	ldr	r1, [r4, #16]
 8008024:	4650      	mov	r0, sl
 8008026:	f7ff fd81 	bl	8007b2c <_free_r>
 800802a:	230c      	movs	r3, #12
 800802c:	f8ca 3000 	str.w	r3, [sl]
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800803c:	e7e9      	b.n	8008012 <__ssputs_r+0x8a>
	...

08008040 <_svfiprintf_r>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	4698      	mov	r8, r3
 8008046:	898b      	ldrh	r3, [r1, #12]
 8008048:	061b      	lsls	r3, r3, #24
 800804a:	b09d      	sub	sp, #116	@ 0x74
 800804c:	4607      	mov	r7, r0
 800804e:	460d      	mov	r5, r1
 8008050:	4614      	mov	r4, r2
 8008052:	d510      	bpl.n	8008076 <_svfiprintf_r+0x36>
 8008054:	690b      	ldr	r3, [r1, #16]
 8008056:	b973      	cbnz	r3, 8008076 <_svfiprintf_r+0x36>
 8008058:	2140      	movs	r1, #64	@ 0x40
 800805a:	f7ff fdd3 	bl	8007c04 <_malloc_r>
 800805e:	6028      	str	r0, [r5, #0]
 8008060:	6128      	str	r0, [r5, #16]
 8008062:	b930      	cbnz	r0, 8008072 <_svfiprintf_r+0x32>
 8008064:	230c      	movs	r3, #12
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800806c:	b01d      	add	sp, #116	@ 0x74
 800806e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008072:	2340      	movs	r3, #64	@ 0x40
 8008074:	616b      	str	r3, [r5, #20]
 8008076:	2300      	movs	r3, #0
 8008078:	9309      	str	r3, [sp, #36]	@ 0x24
 800807a:	2320      	movs	r3, #32
 800807c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008080:	f8cd 800c 	str.w	r8, [sp, #12]
 8008084:	2330      	movs	r3, #48	@ 0x30
 8008086:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008224 <_svfiprintf_r+0x1e4>
 800808a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800808e:	f04f 0901 	mov.w	r9, #1
 8008092:	4623      	mov	r3, r4
 8008094:	469a      	mov	sl, r3
 8008096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800809a:	b10a      	cbz	r2, 80080a0 <_svfiprintf_r+0x60>
 800809c:	2a25      	cmp	r2, #37	@ 0x25
 800809e:	d1f9      	bne.n	8008094 <_svfiprintf_r+0x54>
 80080a0:	ebba 0b04 	subs.w	fp, sl, r4
 80080a4:	d00b      	beq.n	80080be <_svfiprintf_r+0x7e>
 80080a6:	465b      	mov	r3, fp
 80080a8:	4622      	mov	r2, r4
 80080aa:	4629      	mov	r1, r5
 80080ac:	4638      	mov	r0, r7
 80080ae:	f7ff ff6b 	bl	8007f88 <__ssputs_r>
 80080b2:	3001      	adds	r0, #1
 80080b4:	f000 80a7 	beq.w	8008206 <_svfiprintf_r+0x1c6>
 80080b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080ba:	445a      	add	r2, fp
 80080bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80080be:	f89a 3000 	ldrb.w	r3, [sl]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 809f 	beq.w	8008206 <_svfiprintf_r+0x1c6>
 80080c8:	2300      	movs	r3, #0
 80080ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d2:	f10a 0a01 	add.w	sl, sl, #1
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	9307      	str	r3, [sp, #28]
 80080da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080de:	931a      	str	r3, [sp, #104]	@ 0x68
 80080e0:	4654      	mov	r4, sl
 80080e2:	2205      	movs	r2, #5
 80080e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e8:	484e      	ldr	r0, [pc, #312]	@ (8008224 <_svfiprintf_r+0x1e4>)
 80080ea:	f7f8 f871 	bl	80001d0 <memchr>
 80080ee:	9a04      	ldr	r2, [sp, #16]
 80080f0:	b9d8      	cbnz	r0, 800812a <_svfiprintf_r+0xea>
 80080f2:	06d0      	lsls	r0, r2, #27
 80080f4:	bf44      	itt	mi
 80080f6:	2320      	movmi	r3, #32
 80080f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080fc:	0711      	lsls	r1, r2, #28
 80080fe:	bf44      	itt	mi
 8008100:	232b      	movmi	r3, #43	@ 0x2b
 8008102:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008106:	f89a 3000 	ldrb.w	r3, [sl]
 800810a:	2b2a      	cmp	r3, #42	@ 0x2a
 800810c:	d015      	beq.n	800813a <_svfiprintf_r+0xfa>
 800810e:	9a07      	ldr	r2, [sp, #28]
 8008110:	4654      	mov	r4, sl
 8008112:	2000      	movs	r0, #0
 8008114:	f04f 0c0a 	mov.w	ip, #10
 8008118:	4621      	mov	r1, r4
 800811a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811e:	3b30      	subs	r3, #48	@ 0x30
 8008120:	2b09      	cmp	r3, #9
 8008122:	d94b      	bls.n	80081bc <_svfiprintf_r+0x17c>
 8008124:	b1b0      	cbz	r0, 8008154 <_svfiprintf_r+0x114>
 8008126:	9207      	str	r2, [sp, #28]
 8008128:	e014      	b.n	8008154 <_svfiprintf_r+0x114>
 800812a:	eba0 0308 	sub.w	r3, r0, r8
 800812e:	fa09 f303 	lsl.w	r3, r9, r3
 8008132:	4313      	orrs	r3, r2
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	46a2      	mov	sl, r4
 8008138:	e7d2      	b.n	80080e0 <_svfiprintf_r+0xa0>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	1d19      	adds	r1, r3, #4
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	9103      	str	r1, [sp, #12]
 8008142:	2b00      	cmp	r3, #0
 8008144:	bfbb      	ittet	lt
 8008146:	425b      	neglt	r3, r3
 8008148:	f042 0202 	orrlt.w	r2, r2, #2
 800814c:	9307      	strge	r3, [sp, #28]
 800814e:	9307      	strlt	r3, [sp, #28]
 8008150:	bfb8      	it	lt
 8008152:	9204      	strlt	r2, [sp, #16]
 8008154:	7823      	ldrb	r3, [r4, #0]
 8008156:	2b2e      	cmp	r3, #46	@ 0x2e
 8008158:	d10a      	bne.n	8008170 <_svfiprintf_r+0x130>
 800815a:	7863      	ldrb	r3, [r4, #1]
 800815c:	2b2a      	cmp	r3, #42	@ 0x2a
 800815e:	d132      	bne.n	80081c6 <_svfiprintf_r+0x186>
 8008160:	9b03      	ldr	r3, [sp, #12]
 8008162:	1d1a      	adds	r2, r3, #4
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	9203      	str	r2, [sp, #12]
 8008168:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800816c:	3402      	adds	r4, #2
 800816e:	9305      	str	r3, [sp, #20]
 8008170:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008234 <_svfiprintf_r+0x1f4>
 8008174:	7821      	ldrb	r1, [r4, #0]
 8008176:	2203      	movs	r2, #3
 8008178:	4650      	mov	r0, sl
 800817a:	f7f8 f829 	bl	80001d0 <memchr>
 800817e:	b138      	cbz	r0, 8008190 <_svfiprintf_r+0x150>
 8008180:	9b04      	ldr	r3, [sp, #16]
 8008182:	eba0 000a 	sub.w	r0, r0, sl
 8008186:	2240      	movs	r2, #64	@ 0x40
 8008188:	4082      	lsls	r2, r0
 800818a:	4313      	orrs	r3, r2
 800818c:	3401      	adds	r4, #1
 800818e:	9304      	str	r3, [sp, #16]
 8008190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008194:	4824      	ldr	r0, [pc, #144]	@ (8008228 <_svfiprintf_r+0x1e8>)
 8008196:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800819a:	2206      	movs	r2, #6
 800819c:	f7f8 f818 	bl	80001d0 <memchr>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	d036      	beq.n	8008212 <_svfiprintf_r+0x1d2>
 80081a4:	4b21      	ldr	r3, [pc, #132]	@ (800822c <_svfiprintf_r+0x1ec>)
 80081a6:	bb1b      	cbnz	r3, 80081f0 <_svfiprintf_r+0x1b0>
 80081a8:	9b03      	ldr	r3, [sp, #12]
 80081aa:	3307      	adds	r3, #7
 80081ac:	f023 0307 	bic.w	r3, r3, #7
 80081b0:	3308      	adds	r3, #8
 80081b2:	9303      	str	r3, [sp, #12]
 80081b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b6:	4433      	add	r3, r6
 80081b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ba:	e76a      	b.n	8008092 <_svfiprintf_r+0x52>
 80081bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80081c0:	460c      	mov	r4, r1
 80081c2:	2001      	movs	r0, #1
 80081c4:	e7a8      	b.n	8008118 <_svfiprintf_r+0xd8>
 80081c6:	2300      	movs	r3, #0
 80081c8:	3401      	adds	r4, #1
 80081ca:	9305      	str	r3, [sp, #20]
 80081cc:	4619      	mov	r1, r3
 80081ce:	f04f 0c0a 	mov.w	ip, #10
 80081d2:	4620      	mov	r0, r4
 80081d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081d8:	3a30      	subs	r2, #48	@ 0x30
 80081da:	2a09      	cmp	r2, #9
 80081dc:	d903      	bls.n	80081e6 <_svfiprintf_r+0x1a6>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0c6      	beq.n	8008170 <_svfiprintf_r+0x130>
 80081e2:	9105      	str	r1, [sp, #20]
 80081e4:	e7c4      	b.n	8008170 <_svfiprintf_r+0x130>
 80081e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ea:	4604      	mov	r4, r0
 80081ec:	2301      	movs	r3, #1
 80081ee:	e7f0      	b.n	80081d2 <_svfiprintf_r+0x192>
 80081f0:	ab03      	add	r3, sp, #12
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	462a      	mov	r2, r5
 80081f6:	4b0e      	ldr	r3, [pc, #56]	@ (8008230 <_svfiprintf_r+0x1f0>)
 80081f8:	a904      	add	r1, sp, #16
 80081fa:	4638      	mov	r0, r7
 80081fc:	f3af 8000 	nop.w
 8008200:	1c42      	adds	r2, r0, #1
 8008202:	4606      	mov	r6, r0
 8008204:	d1d6      	bne.n	80081b4 <_svfiprintf_r+0x174>
 8008206:	89ab      	ldrh	r3, [r5, #12]
 8008208:	065b      	lsls	r3, r3, #25
 800820a:	f53f af2d 	bmi.w	8008068 <_svfiprintf_r+0x28>
 800820e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008210:	e72c      	b.n	800806c <_svfiprintf_r+0x2c>
 8008212:	ab03      	add	r3, sp, #12
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	462a      	mov	r2, r5
 8008218:	4b05      	ldr	r3, [pc, #20]	@ (8008230 <_svfiprintf_r+0x1f0>)
 800821a:	a904      	add	r1, sp, #16
 800821c:	4638      	mov	r0, r7
 800821e:	f000 f879 	bl	8008314 <_printf_i>
 8008222:	e7ed      	b.n	8008200 <_svfiprintf_r+0x1c0>
 8008224:	0800a6e4 	.word	0x0800a6e4
 8008228:	0800a6ee 	.word	0x0800a6ee
 800822c:	00000000 	.word	0x00000000
 8008230:	08007f89 	.word	0x08007f89
 8008234:	0800a6ea 	.word	0x0800a6ea

08008238 <_printf_common>:
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	4616      	mov	r6, r2
 800823e:	4698      	mov	r8, r3
 8008240:	688a      	ldr	r2, [r1, #8]
 8008242:	690b      	ldr	r3, [r1, #16]
 8008244:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008248:	4293      	cmp	r3, r2
 800824a:	bfb8      	it	lt
 800824c:	4613      	movlt	r3, r2
 800824e:	6033      	str	r3, [r6, #0]
 8008250:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008254:	4607      	mov	r7, r0
 8008256:	460c      	mov	r4, r1
 8008258:	b10a      	cbz	r2, 800825e <_printf_common+0x26>
 800825a:	3301      	adds	r3, #1
 800825c:	6033      	str	r3, [r6, #0]
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	0699      	lsls	r1, r3, #26
 8008262:	bf42      	ittt	mi
 8008264:	6833      	ldrmi	r3, [r6, #0]
 8008266:	3302      	addmi	r3, #2
 8008268:	6033      	strmi	r3, [r6, #0]
 800826a:	6825      	ldr	r5, [r4, #0]
 800826c:	f015 0506 	ands.w	r5, r5, #6
 8008270:	d106      	bne.n	8008280 <_printf_common+0x48>
 8008272:	f104 0a19 	add.w	sl, r4, #25
 8008276:	68e3      	ldr	r3, [r4, #12]
 8008278:	6832      	ldr	r2, [r6, #0]
 800827a:	1a9b      	subs	r3, r3, r2
 800827c:	42ab      	cmp	r3, r5
 800827e:	dc26      	bgt.n	80082ce <_printf_common+0x96>
 8008280:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008284:	6822      	ldr	r2, [r4, #0]
 8008286:	3b00      	subs	r3, #0
 8008288:	bf18      	it	ne
 800828a:	2301      	movne	r3, #1
 800828c:	0692      	lsls	r2, r2, #26
 800828e:	d42b      	bmi.n	80082e8 <_printf_common+0xb0>
 8008290:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008294:	4641      	mov	r1, r8
 8008296:	4638      	mov	r0, r7
 8008298:	47c8      	blx	r9
 800829a:	3001      	adds	r0, #1
 800829c:	d01e      	beq.n	80082dc <_printf_common+0xa4>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	6922      	ldr	r2, [r4, #16]
 80082a2:	f003 0306 	and.w	r3, r3, #6
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	bf02      	ittt	eq
 80082aa:	68e5      	ldreq	r5, [r4, #12]
 80082ac:	6833      	ldreq	r3, [r6, #0]
 80082ae:	1aed      	subeq	r5, r5, r3
 80082b0:	68a3      	ldr	r3, [r4, #8]
 80082b2:	bf0c      	ite	eq
 80082b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082b8:	2500      	movne	r5, #0
 80082ba:	4293      	cmp	r3, r2
 80082bc:	bfc4      	itt	gt
 80082be:	1a9b      	subgt	r3, r3, r2
 80082c0:	18ed      	addgt	r5, r5, r3
 80082c2:	2600      	movs	r6, #0
 80082c4:	341a      	adds	r4, #26
 80082c6:	42b5      	cmp	r5, r6
 80082c8:	d11a      	bne.n	8008300 <_printf_common+0xc8>
 80082ca:	2000      	movs	r0, #0
 80082cc:	e008      	b.n	80082e0 <_printf_common+0xa8>
 80082ce:	2301      	movs	r3, #1
 80082d0:	4652      	mov	r2, sl
 80082d2:	4641      	mov	r1, r8
 80082d4:	4638      	mov	r0, r7
 80082d6:	47c8      	blx	r9
 80082d8:	3001      	adds	r0, #1
 80082da:	d103      	bne.n	80082e4 <_printf_common+0xac>
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e4:	3501      	adds	r5, #1
 80082e6:	e7c6      	b.n	8008276 <_printf_common+0x3e>
 80082e8:	18e1      	adds	r1, r4, r3
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	2030      	movs	r0, #48	@ 0x30
 80082ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082f2:	4422      	add	r2, r4
 80082f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082fc:	3302      	adds	r3, #2
 80082fe:	e7c7      	b.n	8008290 <_printf_common+0x58>
 8008300:	2301      	movs	r3, #1
 8008302:	4622      	mov	r2, r4
 8008304:	4641      	mov	r1, r8
 8008306:	4638      	mov	r0, r7
 8008308:	47c8      	blx	r9
 800830a:	3001      	adds	r0, #1
 800830c:	d0e6      	beq.n	80082dc <_printf_common+0xa4>
 800830e:	3601      	adds	r6, #1
 8008310:	e7d9      	b.n	80082c6 <_printf_common+0x8e>
	...

08008314 <_printf_i>:
 8008314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	7e0f      	ldrb	r7, [r1, #24]
 800831a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800831c:	2f78      	cmp	r7, #120	@ 0x78
 800831e:	4691      	mov	r9, r2
 8008320:	4680      	mov	r8, r0
 8008322:	460c      	mov	r4, r1
 8008324:	469a      	mov	sl, r3
 8008326:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800832a:	d807      	bhi.n	800833c <_printf_i+0x28>
 800832c:	2f62      	cmp	r7, #98	@ 0x62
 800832e:	d80a      	bhi.n	8008346 <_printf_i+0x32>
 8008330:	2f00      	cmp	r7, #0
 8008332:	f000 80d2 	beq.w	80084da <_printf_i+0x1c6>
 8008336:	2f58      	cmp	r7, #88	@ 0x58
 8008338:	f000 80b9 	beq.w	80084ae <_printf_i+0x19a>
 800833c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008340:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008344:	e03a      	b.n	80083bc <_printf_i+0xa8>
 8008346:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800834a:	2b15      	cmp	r3, #21
 800834c:	d8f6      	bhi.n	800833c <_printf_i+0x28>
 800834e:	a101      	add	r1, pc, #4	@ (adr r1, 8008354 <_printf_i+0x40>)
 8008350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008354:	080083ad 	.word	0x080083ad
 8008358:	080083c1 	.word	0x080083c1
 800835c:	0800833d 	.word	0x0800833d
 8008360:	0800833d 	.word	0x0800833d
 8008364:	0800833d 	.word	0x0800833d
 8008368:	0800833d 	.word	0x0800833d
 800836c:	080083c1 	.word	0x080083c1
 8008370:	0800833d 	.word	0x0800833d
 8008374:	0800833d 	.word	0x0800833d
 8008378:	0800833d 	.word	0x0800833d
 800837c:	0800833d 	.word	0x0800833d
 8008380:	080084c1 	.word	0x080084c1
 8008384:	080083eb 	.word	0x080083eb
 8008388:	0800847b 	.word	0x0800847b
 800838c:	0800833d 	.word	0x0800833d
 8008390:	0800833d 	.word	0x0800833d
 8008394:	080084e3 	.word	0x080084e3
 8008398:	0800833d 	.word	0x0800833d
 800839c:	080083eb 	.word	0x080083eb
 80083a0:	0800833d 	.word	0x0800833d
 80083a4:	0800833d 	.word	0x0800833d
 80083a8:	08008483 	.word	0x08008483
 80083ac:	6833      	ldr	r3, [r6, #0]
 80083ae:	1d1a      	adds	r2, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6032      	str	r2, [r6, #0]
 80083b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80083bc:	2301      	movs	r3, #1
 80083be:	e09d      	b.n	80084fc <_printf_i+0x1e8>
 80083c0:	6833      	ldr	r3, [r6, #0]
 80083c2:	6820      	ldr	r0, [r4, #0]
 80083c4:	1d19      	adds	r1, r3, #4
 80083c6:	6031      	str	r1, [r6, #0]
 80083c8:	0606      	lsls	r6, r0, #24
 80083ca:	d501      	bpl.n	80083d0 <_printf_i+0xbc>
 80083cc:	681d      	ldr	r5, [r3, #0]
 80083ce:	e003      	b.n	80083d8 <_printf_i+0xc4>
 80083d0:	0645      	lsls	r5, r0, #25
 80083d2:	d5fb      	bpl.n	80083cc <_printf_i+0xb8>
 80083d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083d8:	2d00      	cmp	r5, #0
 80083da:	da03      	bge.n	80083e4 <_printf_i+0xd0>
 80083dc:	232d      	movs	r3, #45	@ 0x2d
 80083de:	426d      	negs	r5, r5
 80083e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083e4:	4859      	ldr	r0, [pc, #356]	@ (800854c <_printf_i+0x238>)
 80083e6:	230a      	movs	r3, #10
 80083e8:	e011      	b.n	800840e <_printf_i+0xfa>
 80083ea:	6821      	ldr	r1, [r4, #0]
 80083ec:	6833      	ldr	r3, [r6, #0]
 80083ee:	0608      	lsls	r0, r1, #24
 80083f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80083f4:	d402      	bmi.n	80083fc <_printf_i+0xe8>
 80083f6:	0649      	lsls	r1, r1, #25
 80083f8:	bf48      	it	mi
 80083fa:	b2ad      	uxthmi	r5, r5
 80083fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80083fe:	4853      	ldr	r0, [pc, #332]	@ (800854c <_printf_i+0x238>)
 8008400:	6033      	str	r3, [r6, #0]
 8008402:	bf14      	ite	ne
 8008404:	230a      	movne	r3, #10
 8008406:	2308      	moveq	r3, #8
 8008408:	2100      	movs	r1, #0
 800840a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800840e:	6866      	ldr	r6, [r4, #4]
 8008410:	60a6      	str	r6, [r4, #8]
 8008412:	2e00      	cmp	r6, #0
 8008414:	bfa2      	ittt	ge
 8008416:	6821      	ldrge	r1, [r4, #0]
 8008418:	f021 0104 	bicge.w	r1, r1, #4
 800841c:	6021      	strge	r1, [r4, #0]
 800841e:	b90d      	cbnz	r5, 8008424 <_printf_i+0x110>
 8008420:	2e00      	cmp	r6, #0
 8008422:	d04b      	beq.n	80084bc <_printf_i+0x1a8>
 8008424:	4616      	mov	r6, r2
 8008426:	fbb5 f1f3 	udiv	r1, r5, r3
 800842a:	fb03 5711 	mls	r7, r3, r1, r5
 800842e:	5dc7      	ldrb	r7, [r0, r7]
 8008430:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008434:	462f      	mov	r7, r5
 8008436:	42bb      	cmp	r3, r7
 8008438:	460d      	mov	r5, r1
 800843a:	d9f4      	bls.n	8008426 <_printf_i+0x112>
 800843c:	2b08      	cmp	r3, #8
 800843e:	d10b      	bne.n	8008458 <_printf_i+0x144>
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	07df      	lsls	r7, r3, #31
 8008444:	d508      	bpl.n	8008458 <_printf_i+0x144>
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	6861      	ldr	r1, [r4, #4]
 800844a:	4299      	cmp	r1, r3
 800844c:	bfde      	ittt	le
 800844e:	2330      	movle	r3, #48	@ 0x30
 8008450:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008454:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008458:	1b92      	subs	r2, r2, r6
 800845a:	6122      	str	r2, [r4, #16]
 800845c:	f8cd a000 	str.w	sl, [sp]
 8008460:	464b      	mov	r3, r9
 8008462:	aa03      	add	r2, sp, #12
 8008464:	4621      	mov	r1, r4
 8008466:	4640      	mov	r0, r8
 8008468:	f7ff fee6 	bl	8008238 <_printf_common>
 800846c:	3001      	adds	r0, #1
 800846e:	d14a      	bne.n	8008506 <_printf_i+0x1f2>
 8008470:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008474:	b004      	add	sp, #16
 8008476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	f043 0320 	orr.w	r3, r3, #32
 8008480:	6023      	str	r3, [r4, #0]
 8008482:	4833      	ldr	r0, [pc, #204]	@ (8008550 <_printf_i+0x23c>)
 8008484:	2778      	movs	r7, #120	@ 0x78
 8008486:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800848a:	6823      	ldr	r3, [r4, #0]
 800848c:	6831      	ldr	r1, [r6, #0]
 800848e:	061f      	lsls	r7, r3, #24
 8008490:	f851 5b04 	ldr.w	r5, [r1], #4
 8008494:	d402      	bmi.n	800849c <_printf_i+0x188>
 8008496:	065f      	lsls	r7, r3, #25
 8008498:	bf48      	it	mi
 800849a:	b2ad      	uxthmi	r5, r5
 800849c:	6031      	str	r1, [r6, #0]
 800849e:	07d9      	lsls	r1, r3, #31
 80084a0:	bf44      	itt	mi
 80084a2:	f043 0320 	orrmi.w	r3, r3, #32
 80084a6:	6023      	strmi	r3, [r4, #0]
 80084a8:	b11d      	cbz	r5, 80084b2 <_printf_i+0x19e>
 80084aa:	2310      	movs	r3, #16
 80084ac:	e7ac      	b.n	8008408 <_printf_i+0xf4>
 80084ae:	4827      	ldr	r0, [pc, #156]	@ (800854c <_printf_i+0x238>)
 80084b0:	e7e9      	b.n	8008486 <_printf_i+0x172>
 80084b2:	6823      	ldr	r3, [r4, #0]
 80084b4:	f023 0320 	bic.w	r3, r3, #32
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	e7f6      	b.n	80084aa <_printf_i+0x196>
 80084bc:	4616      	mov	r6, r2
 80084be:	e7bd      	b.n	800843c <_printf_i+0x128>
 80084c0:	6833      	ldr	r3, [r6, #0]
 80084c2:	6825      	ldr	r5, [r4, #0]
 80084c4:	6961      	ldr	r1, [r4, #20]
 80084c6:	1d18      	adds	r0, r3, #4
 80084c8:	6030      	str	r0, [r6, #0]
 80084ca:	062e      	lsls	r6, r5, #24
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	d501      	bpl.n	80084d4 <_printf_i+0x1c0>
 80084d0:	6019      	str	r1, [r3, #0]
 80084d2:	e002      	b.n	80084da <_printf_i+0x1c6>
 80084d4:	0668      	lsls	r0, r5, #25
 80084d6:	d5fb      	bpl.n	80084d0 <_printf_i+0x1bc>
 80084d8:	8019      	strh	r1, [r3, #0]
 80084da:	2300      	movs	r3, #0
 80084dc:	6123      	str	r3, [r4, #16]
 80084de:	4616      	mov	r6, r2
 80084e0:	e7bc      	b.n	800845c <_printf_i+0x148>
 80084e2:	6833      	ldr	r3, [r6, #0]
 80084e4:	1d1a      	adds	r2, r3, #4
 80084e6:	6032      	str	r2, [r6, #0]
 80084e8:	681e      	ldr	r6, [r3, #0]
 80084ea:	6862      	ldr	r2, [r4, #4]
 80084ec:	2100      	movs	r1, #0
 80084ee:	4630      	mov	r0, r6
 80084f0:	f7f7 fe6e 	bl	80001d0 <memchr>
 80084f4:	b108      	cbz	r0, 80084fa <_printf_i+0x1e6>
 80084f6:	1b80      	subs	r0, r0, r6
 80084f8:	6060      	str	r0, [r4, #4]
 80084fa:	6863      	ldr	r3, [r4, #4]
 80084fc:	6123      	str	r3, [r4, #16]
 80084fe:	2300      	movs	r3, #0
 8008500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008504:	e7aa      	b.n	800845c <_printf_i+0x148>
 8008506:	6923      	ldr	r3, [r4, #16]
 8008508:	4632      	mov	r2, r6
 800850a:	4649      	mov	r1, r9
 800850c:	4640      	mov	r0, r8
 800850e:	47d0      	blx	sl
 8008510:	3001      	adds	r0, #1
 8008512:	d0ad      	beq.n	8008470 <_printf_i+0x15c>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	079b      	lsls	r3, r3, #30
 8008518:	d413      	bmi.n	8008542 <_printf_i+0x22e>
 800851a:	68e0      	ldr	r0, [r4, #12]
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	4298      	cmp	r0, r3
 8008520:	bfb8      	it	lt
 8008522:	4618      	movlt	r0, r3
 8008524:	e7a6      	b.n	8008474 <_printf_i+0x160>
 8008526:	2301      	movs	r3, #1
 8008528:	4632      	mov	r2, r6
 800852a:	4649      	mov	r1, r9
 800852c:	4640      	mov	r0, r8
 800852e:	47d0      	blx	sl
 8008530:	3001      	adds	r0, #1
 8008532:	d09d      	beq.n	8008470 <_printf_i+0x15c>
 8008534:	3501      	adds	r5, #1
 8008536:	68e3      	ldr	r3, [r4, #12]
 8008538:	9903      	ldr	r1, [sp, #12]
 800853a:	1a5b      	subs	r3, r3, r1
 800853c:	42ab      	cmp	r3, r5
 800853e:	dcf2      	bgt.n	8008526 <_printf_i+0x212>
 8008540:	e7eb      	b.n	800851a <_printf_i+0x206>
 8008542:	2500      	movs	r5, #0
 8008544:	f104 0619 	add.w	r6, r4, #25
 8008548:	e7f5      	b.n	8008536 <_printf_i+0x222>
 800854a:	bf00      	nop
 800854c:	0800a6f5 	.word	0x0800a6f5
 8008550:	0800a706 	.word	0x0800a706

08008554 <__sflush_r>:
 8008554:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	0716      	lsls	r6, r2, #28
 800855e:	4605      	mov	r5, r0
 8008560:	460c      	mov	r4, r1
 8008562:	d454      	bmi.n	800860e <__sflush_r+0xba>
 8008564:	684b      	ldr	r3, [r1, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	dc02      	bgt.n	8008570 <__sflush_r+0x1c>
 800856a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800856c:	2b00      	cmp	r3, #0
 800856e:	dd48      	ble.n	8008602 <__sflush_r+0xae>
 8008570:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008572:	2e00      	cmp	r6, #0
 8008574:	d045      	beq.n	8008602 <__sflush_r+0xae>
 8008576:	2300      	movs	r3, #0
 8008578:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800857c:	682f      	ldr	r7, [r5, #0]
 800857e:	6a21      	ldr	r1, [r4, #32]
 8008580:	602b      	str	r3, [r5, #0]
 8008582:	d030      	beq.n	80085e6 <__sflush_r+0x92>
 8008584:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	0759      	lsls	r1, r3, #29
 800858a:	d505      	bpl.n	8008598 <__sflush_r+0x44>
 800858c:	6863      	ldr	r3, [r4, #4]
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008592:	b10b      	cbz	r3, 8008598 <__sflush_r+0x44>
 8008594:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008596:	1ad2      	subs	r2, r2, r3
 8008598:	2300      	movs	r3, #0
 800859a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800859c:	6a21      	ldr	r1, [r4, #32]
 800859e:	4628      	mov	r0, r5
 80085a0:	47b0      	blx	r6
 80085a2:	1c43      	adds	r3, r0, #1
 80085a4:	89a3      	ldrh	r3, [r4, #12]
 80085a6:	d106      	bne.n	80085b6 <__sflush_r+0x62>
 80085a8:	6829      	ldr	r1, [r5, #0]
 80085aa:	291d      	cmp	r1, #29
 80085ac:	d82b      	bhi.n	8008606 <__sflush_r+0xb2>
 80085ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008658 <__sflush_r+0x104>)
 80085b0:	410a      	asrs	r2, r1
 80085b2:	07d6      	lsls	r6, r2, #31
 80085b4:	d427      	bmi.n	8008606 <__sflush_r+0xb2>
 80085b6:	2200      	movs	r2, #0
 80085b8:	6062      	str	r2, [r4, #4]
 80085ba:	04d9      	lsls	r1, r3, #19
 80085bc:	6922      	ldr	r2, [r4, #16]
 80085be:	6022      	str	r2, [r4, #0]
 80085c0:	d504      	bpl.n	80085cc <__sflush_r+0x78>
 80085c2:	1c42      	adds	r2, r0, #1
 80085c4:	d101      	bne.n	80085ca <__sflush_r+0x76>
 80085c6:	682b      	ldr	r3, [r5, #0]
 80085c8:	b903      	cbnz	r3, 80085cc <__sflush_r+0x78>
 80085ca:	6560      	str	r0, [r4, #84]	@ 0x54
 80085cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085ce:	602f      	str	r7, [r5, #0]
 80085d0:	b1b9      	cbz	r1, 8008602 <__sflush_r+0xae>
 80085d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085d6:	4299      	cmp	r1, r3
 80085d8:	d002      	beq.n	80085e0 <__sflush_r+0x8c>
 80085da:	4628      	mov	r0, r5
 80085dc:	f7ff faa6 	bl	8007b2c <_free_r>
 80085e0:	2300      	movs	r3, #0
 80085e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80085e4:	e00d      	b.n	8008602 <__sflush_r+0xae>
 80085e6:	2301      	movs	r3, #1
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b0      	blx	r6
 80085ec:	4602      	mov	r2, r0
 80085ee:	1c50      	adds	r0, r2, #1
 80085f0:	d1c9      	bne.n	8008586 <__sflush_r+0x32>
 80085f2:	682b      	ldr	r3, [r5, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0c6      	beq.n	8008586 <__sflush_r+0x32>
 80085f8:	2b1d      	cmp	r3, #29
 80085fa:	d001      	beq.n	8008600 <__sflush_r+0xac>
 80085fc:	2b16      	cmp	r3, #22
 80085fe:	d11e      	bne.n	800863e <__sflush_r+0xea>
 8008600:	602f      	str	r7, [r5, #0]
 8008602:	2000      	movs	r0, #0
 8008604:	e022      	b.n	800864c <__sflush_r+0xf8>
 8008606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800860a:	b21b      	sxth	r3, r3
 800860c:	e01b      	b.n	8008646 <__sflush_r+0xf2>
 800860e:	690f      	ldr	r7, [r1, #16]
 8008610:	2f00      	cmp	r7, #0
 8008612:	d0f6      	beq.n	8008602 <__sflush_r+0xae>
 8008614:	0793      	lsls	r3, r2, #30
 8008616:	680e      	ldr	r6, [r1, #0]
 8008618:	bf08      	it	eq
 800861a:	694b      	ldreq	r3, [r1, #20]
 800861c:	600f      	str	r7, [r1, #0]
 800861e:	bf18      	it	ne
 8008620:	2300      	movne	r3, #0
 8008622:	eba6 0807 	sub.w	r8, r6, r7
 8008626:	608b      	str	r3, [r1, #8]
 8008628:	f1b8 0f00 	cmp.w	r8, #0
 800862c:	dde9      	ble.n	8008602 <__sflush_r+0xae>
 800862e:	6a21      	ldr	r1, [r4, #32]
 8008630:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008632:	4643      	mov	r3, r8
 8008634:	463a      	mov	r2, r7
 8008636:	4628      	mov	r0, r5
 8008638:	47b0      	blx	r6
 800863a:	2800      	cmp	r0, #0
 800863c:	dc08      	bgt.n	8008650 <__sflush_r+0xfc>
 800863e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008642:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008646:	81a3      	strh	r3, [r4, #12]
 8008648:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800864c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008650:	4407      	add	r7, r0
 8008652:	eba8 0800 	sub.w	r8, r8, r0
 8008656:	e7e7      	b.n	8008628 <__sflush_r+0xd4>
 8008658:	dfbffffe 	.word	0xdfbffffe

0800865c <_fflush_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	690b      	ldr	r3, [r1, #16]
 8008660:	4605      	mov	r5, r0
 8008662:	460c      	mov	r4, r1
 8008664:	b913      	cbnz	r3, 800866c <_fflush_r+0x10>
 8008666:	2500      	movs	r5, #0
 8008668:	4628      	mov	r0, r5
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	b118      	cbz	r0, 8008676 <_fflush_r+0x1a>
 800866e:	6a03      	ldr	r3, [r0, #32]
 8008670:	b90b      	cbnz	r3, 8008676 <_fflush_r+0x1a>
 8008672:	f7ff f937 	bl	80078e4 <__sinit>
 8008676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0f3      	beq.n	8008666 <_fflush_r+0xa>
 800867e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008680:	07d0      	lsls	r0, r2, #31
 8008682:	d404      	bmi.n	800868e <_fflush_r+0x32>
 8008684:	0599      	lsls	r1, r3, #22
 8008686:	d402      	bmi.n	800868e <_fflush_r+0x32>
 8008688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800868a:	f7ff fa3e 	bl	8007b0a <__retarget_lock_acquire_recursive>
 800868e:	4628      	mov	r0, r5
 8008690:	4621      	mov	r1, r4
 8008692:	f7ff ff5f 	bl	8008554 <__sflush_r>
 8008696:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008698:	07da      	lsls	r2, r3, #31
 800869a:	4605      	mov	r5, r0
 800869c:	d4e4      	bmi.n	8008668 <_fflush_r+0xc>
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	059b      	lsls	r3, r3, #22
 80086a2:	d4e1      	bmi.n	8008668 <_fflush_r+0xc>
 80086a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086a6:	f7ff fa31 	bl	8007b0c <__retarget_lock_release_recursive>
 80086aa:	e7dd      	b.n	8008668 <_fflush_r+0xc>

080086ac <memmove>:
 80086ac:	4288      	cmp	r0, r1
 80086ae:	b510      	push	{r4, lr}
 80086b0:	eb01 0402 	add.w	r4, r1, r2
 80086b4:	d902      	bls.n	80086bc <memmove+0x10>
 80086b6:	4284      	cmp	r4, r0
 80086b8:	4623      	mov	r3, r4
 80086ba:	d807      	bhi.n	80086cc <memmove+0x20>
 80086bc:	1e43      	subs	r3, r0, #1
 80086be:	42a1      	cmp	r1, r4
 80086c0:	d008      	beq.n	80086d4 <memmove+0x28>
 80086c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086ca:	e7f8      	b.n	80086be <memmove+0x12>
 80086cc:	4402      	add	r2, r0
 80086ce:	4601      	mov	r1, r0
 80086d0:	428a      	cmp	r2, r1
 80086d2:	d100      	bne.n	80086d6 <memmove+0x2a>
 80086d4:	bd10      	pop	{r4, pc}
 80086d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086de:	e7f7      	b.n	80086d0 <memmove+0x24>

080086e0 <_sbrk_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d06      	ldr	r5, [pc, #24]	@ (80086fc <_sbrk_r+0x1c>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f7fa fbd8 	bl	8002ea0 <_sbrk>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_sbrk_r+0x1a>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_sbrk_r+0x1a>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20001838 	.word	0x20001838

08008700 <strcpy>:
 8008700:	4603      	mov	r3, r0
 8008702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008706:	f803 2b01 	strb.w	r2, [r3], #1
 800870a:	2a00      	cmp	r2, #0
 800870c:	d1f9      	bne.n	8008702 <strcpy+0x2>
 800870e:	4770      	bx	lr

08008710 <quorem>:
 8008710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008714:	6903      	ldr	r3, [r0, #16]
 8008716:	690c      	ldr	r4, [r1, #16]
 8008718:	42a3      	cmp	r3, r4
 800871a:	4607      	mov	r7, r0
 800871c:	db7e      	blt.n	800881c <quorem+0x10c>
 800871e:	3c01      	subs	r4, #1
 8008720:	f101 0814 	add.w	r8, r1, #20
 8008724:	00a3      	lsls	r3, r4, #2
 8008726:	f100 0514 	add.w	r5, r0, #20
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800873a:	3301      	adds	r3, #1
 800873c:	429a      	cmp	r2, r3
 800873e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008742:	fbb2 f6f3 	udiv	r6, r2, r3
 8008746:	d32e      	bcc.n	80087a6 <quorem+0x96>
 8008748:	f04f 0a00 	mov.w	sl, #0
 800874c:	46c4      	mov	ip, r8
 800874e:	46ae      	mov	lr, r5
 8008750:	46d3      	mov	fp, sl
 8008752:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008756:	b298      	uxth	r0, r3
 8008758:	fb06 a000 	mla	r0, r6, r0, sl
 800875c:	0c02      	lsrs	r2, r0, #16
 800875e:	0c1b      	lsrs	r3, r3, #16
 8008760:	fb06 2303 	mla	r3, r6, r3, r2
 8008764:	f8de 2000 	ldr.w	r2, [lr]
 8008768:	b280      	uxth	r0, r0
 800876a:	b292      	uxth	r2, r2
 800876c:	1a12      	subs	r2, r2, r0
 800876e:	445a      	add	r2, fp
 8008770:	f8de 0000 	ldr.w	r0, [lr]
 8008774:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008778:	b29b      	uxth	r3, r3
 800877a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800877e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008782:	b292      	uxth	r2, r2
 8008784:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008788:	45e1      	cmp	r9, ip
 800878a:	f84e 2b04 	str.w	r2, [lr], #4
 800878e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008792:	d2de      	bcs.n	8008752 <quorem+0x42>
 8008794:	9b00      	ldr	r3, [sp, #0]
 8008796:	58eb      	ldr	r3, [r5, r3]
 8008798:	b92b      	cbnz	r3, 80087a6 <quorem+0x96>
 800879a:	9b01      	ldr	r3, [sp, #4]
 800879c:	3b04      	subs	r3, #4
 800879e:	429d      	cmp	r5, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	d32f      	bcc.n	8008804 <quorem+0xf4>
 80087a4:	613c      	str	r4, [r7, #16]
 80087a6:	4638      	mov	r0, r7
 80087a8:	f001 f880 	bl	80098ac <__mcmp>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	db25      	blt.n	80087fc <quorem+0xec>
 80087b0:	4629      	mov	r1, r5
 80087b2:	2000      	movs	r0, #0
 80087b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80087b8:	f8d1 c000 	ldr.w	ip, [r1]
 80087bc:	fa1f fe82 	uxth.w	lr, r2
 80087c0:	fa1f f38c 	uxth.w	r3, ip
 80087c4:	eba3 030e 	sub.w	r3, r3, lr
 80087c8:	4403      	add	r3, r0
 80087ca:	0c12      	lsrs	r2, r2, #16
 80087cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087da:	45c1      	cmp	r9, r8
 80087dc:	f841 3b04 	str.w	r3, [r1], #4
 80087e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087e4:	d2e6      	bcs.n	80087b4 <quorem+0xa4>
 80087e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087ee:	b922      	cbnz	r2, 80087fa <quorem+0xea>
 80087f0:	3b04      	subs	r3, #4
 80087f2:	429d      	cmp	r5, r3
 80087f4:	461a      	mov	r2, r3
 80087f6:	d30b      	bcc.n	8008810 <quorem+0x100>
 80087f8:	613c      	str	r4, [r7, #16]
 80087fa:	3601      	adds	r6, #1
 80087fc:	4630      	mov	r0, r6
 80087fe:	b003      	add	sp, #12
 8008800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008804:	6812      	ldr	r2, [r2, #0]
 8008806:	3b04      	subs	r3, #4
 8008808:	2a00      	cmp	r2, #0
 800880a:	d1cb      	bne.n	80087a4 <quorem+0x94>
 800880c:	3c01      	subs	r4, #1
 800880e:	e7c6      	b.n	800879e <quorem+0x8e>
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	3b04      	subs	r3, #4
 8008814:	2a00      	cmp	r2, #0
 8008816:	d1ef      	bne.n	80087f8 <quorem+0xe8>
 8008818:	3c01      	subs	r4, #1
 800881a:	e7ea      	b.n	80087f2 <quorem+0xe2>
 800881c:	2000      	movs	r0, #0
 800881e:	e7ee      	b.n	80087fe <quorem+0xee>

08008820 <_dtoa_r>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	69c7      	ldr	r7, [r0, #28]
 8008826:	b099      	sub	sp, #100	@ 0x64
 8008828:	ed8d 0b02 	vstr	d0, [sp, #8]
 800882c:	ec55 4b10 	vmov	r4, r5, d0
 8008830:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008832:	9109      	str	r1, [sp, #36]	@ 0x24
 8008834:	4683      	mov	fp, r0
 8008836:	920e      	str	r2, [sp, #56]	@ 0x38
 8008838:	9313      	str	r3, [sp, #76]	@ 0x4c
 800883a:	b97f      	cbnz	r7, 800885c <_dtoa_r+0x3c>
 800883c:	2010      	movs	r0, #16
 800883e:	f000 fdb3 	bl	80093a8 <malloc>
 8008842:	4602      	mov	r2, r0
 8008844:	f8cb 001c 	str.w	r0, [fp, #28]
 8008848:	b920      	cbnz	r0, 8008854 <_dtoa_r+0x34>
 800884a:	4ba7      	ldr	r3, [pc, #668]	@ (8008ae8 <_dtoa_r+0x2c8>)
 800884c:	21ef      	movs	r1, #239	@ 0xef
 800884e:	48a7      	ldr	r0, [pc, #668]	@ (8008aec <_dtoa_r+0x2cc>)
 8008850:	f001 f980 	bl	8009b54 <__assert_func>
 8008854:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008858:	6007      	str	r7, [r0, #0]
 800885a:	60c7      	str	r7, [r0, #12]
 800885c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008860:	6819      	ldr	r1, [r3, #0]
 8008862:	b159      	cbz	r1, 800887c <_dtoa_r+0x5c>
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	604a      	str	r2, [r1, #4]
 8008868:	2301      	movs	r3, #1
 800886a:	4093      	lsls	r3, r2
 800886c:	608b      	str	r3, [r1, #8]
 800886e:	4658      	mov	r0, fp
 8008870:	f000 fde2 	bl	8009438 <_Bfree>
 8008874:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	1e2b      	subs	r3, r5, #0
 800887e:	bfb9      	ittee	lt
 8008880:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008884:	9303      	strlt	r3, [sp, #12]
 8008886:	2300      	movge	r3, #0
 8008888:	6033      	strge	r3, [r6, #0]
 800888a:	9f03      	ldr	r7, [sp, #12]
 800888c:	4b98      	ldr	r3, [pc, #608]	@ (8008af0 <_dtoa_r+0x2d0>)
 800888e:	bfbc      	itt	lt
 8008890:	2201      	movlt	r2, #1
 8008892:	6032      	strlt	r2, [r6, #0]
 8008894:	43bb      	bics	r3, r7
 8008896:	d112      	bne.n	80088be <_dtoa_r+0x9e>
 8008898:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800889a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088a4:	4323      	orrs	r3, r4
 80088a6:	f000 854d 	beq.w	8009344 <_dtoa_r+0xb24>
 80088aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b04 <_dtoa_r+0x2e4>
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 854f 	beq.w	8009354 <_dtoa_r+0xb34>
 80088b6:	f10a 0303 	add.w	r3, sl, #3
 80088ba:	f000 bd49 	b.w	8009350 <_dtoa_r+0xb30>
 80088be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088c2:	2200      	movs	r2, #0
 80088c4:	ec51 0b17 	vmov	r0, r1, d7
 80088c8:	2300      	movs	r3, #0
 80088ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80088ce:	f7f8 f8f3 	bl	8000ab8 <__aeabi_dcmpeq>
 80088d2:	4680      	mov	r8, r0
 80088d4:	b158      	cbz	r0, 80088ee <_dtoa_r+0xce>
 80088d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088d8:	2301      	movs	r3, #1
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088de:	b113      	cbz	r3, 80088e6 <_dtoa_r+0xc6>
 80088e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088e2:	4b84      	ldr	r3, [pc, #528]	@ (8008af4 <_dtoa_r+0x2d4>)
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b08 <_dtoa_r+0x2e8>
 80088ea:	f000 bd33 	b.w	8009354 <_dtoa_r+0xb34>
 80088ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80088f2:	aa16      	add	r2, sp, #88	@ 0x58
 80088f4:	a917      	add	r1, sp, #92	@ 0x5c
 80088f6:	4658      	mov	r0, fp
 80088f8:	f001 f888 	bl	8009a0c <__d2b>
 80088fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008900:	4681      	mov	r9, r0
 8008902:	2e00      	cmp	r6, #0
 8008904:	d077      	beq.n	80089f6 <_dtoa_r+0x1d6>
 8008906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008908:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800890c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008914:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008918:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800891c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008920:	4619      	mov	r1, r3
 8008922:	2200      	movs	r2, #0
 8008924:	4b74      	ldr	r3, [pc, #464]	@ (8008af8 <_dtoa_r+0x2d8>)
 8008926:	f7f7 fca7 	bl	8000278 <__aeabi_dsub>
 800892a:	a369      	add	r3, pc, #420	@ (adr r3, 8008ad0 <_dtoa_r+0x2b0>)
 800892c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008930:	f7f7 fe5a 	bl	80005e8 <__aeabi_dmul>
 8008934:	a368      	add	r3, pc, #416	@ (adr r3, 8008ad8 <_dtoa_r+0x2b8>)
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	f7f7 fc9f 	bl	800027c <__adddf3>
 800893e:	4604      	mov	r4, r0
 8008940:	4630      	mov	r0, r6
 8008942:	460d      	mov	r5, r1
 8008944:	f7f7 fde6 	bl	8000514 <__aeabi_i2d>
 8008948:	a365      	add	r3, pc, #404	@ (adr r3, 8008ae0 <_dtoa_r+0x2c0>)
 800894a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894e:	f7f7 fe4b 	bl	80005e8 <__aeabi_dmul>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
 8008956:	4620      	mov	r0, r4
 8008958:	4629      	mov	r1, r5
 800895a:	f7f7 fc8f 	bl	800027c <__adddf3>
 800895e:	4604      	mov	r4, r0
 8008960:	460d      	mov	r5, r1
 8008962:	f7f8 f8db 	bl	8000b1c <__aeabi_d2iz>
 8008966:	2200      	movs	r2, #0
 8008968:	4607      	mov	r7, r0
 800896a:	2300      	movs	r3, #0
 800896c:	4620      	mov	r0, r4
 800896e:	4629      	mov	r1, r5
 8008970:	f7f8 f8ac 	bl	8000acc <__aeabi_dcmplt>
 8008974:	b140      	cbz	r0, 8008988 <_dtoa_r+0x168>
 8008976:	4638      	mov	r0, r7
 8008978:	f7f7 fdcc 	bl	8000514 <__aeabi_i2d>
 800897c:	4622      	mov	r2, r4
 800897e:	462b      	mov	r3, r5
 8008980:	f7f8 f89a 	bl	8000ab8 <__aeabi_dcmpeq>
 8008984:	b900      	cbnz	r0, 8008988 <_dtoa_r+0x168>
 8008986:	3f01      	subs	r7, #1
 8008988:	2f16      	cmp	r7, #22
 800898a:	d851      	bhi.n	8008a30 <_dtoa_r+0x210>
 800898c:	4b5b      	ldr	r3, [pc, #364]	@ (8008afc <_dtoa_r+0x2dc>)
 800898e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800899a:	f7f8 f897 	bl	8000acc <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d048      	beq.n	8008a34 <_dtoa_r+0x214>
 80089a2:	3f01      	subs	r7, #1
 80089a4:	2300      	movs	r3, #0
 80089a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80089a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089aa:	1b9b      	subs	r3, r3, r6
 80089ac:	1e5a      	subs	r2, r3, #1
 80089ae:	bf44      	itt	mi
 80089b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80089b4:	2300      	movmi	r3, #0
 80089b6:	9208      	str	r2, [sp, #32]
 80089b8:	bf54      	ite	pl
 80089ba:	f04f 0800 	movpl.w	r8, #0
 80089be:	9308      	strmi	r3, [sp, #32]
 80089c0:	2f00      	cmp	r7, #0
 80089c2:	db39      	blt.n	8008a38 <_dtoa_r+0x218>
 80089c4:	9b08      	ldr	r3, [sp, #32]
 80089c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80089c8:	443b      	add	r3, r7
 80089ca:	9308      	str	r3, [sp, #32]
 80089cc:	2300      	movs	r3, #0
 80089ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80089d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089d2:	2b09      	cmp	r3, #9
 80089d4:	d864      	bhi.n	8008aa0 <_dtoa_r+0x280>
 80089d6:	2b05      	cmp	r3, #5
 80089d8:	bfc4      	itt	gt
 80089da:	3b04      	subgt	r3, #4
 80089dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80089de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e0:	f1a3 0302 	sub.w	r3, r3, #2
 80089e4:	bfcc      	ite	gt
 80089e6:	2400      	movgt	r4, #0
 80089e8:	2401      	movle	r4, #1
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d863      	bhi.n	8008ab6 <_dtoa_r+0x296>
 80089ee:	e8df f003 	tbb	[pc, r3]
 80089f2:	372a      	.short	0x372a
 80089f4:	5535      	.short	0x5535
 80089f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80089fa:	441e      	add	r6, r3
 80089fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a00:	2b20      	cmp	r3, #32
 8008a02:	bfc1      	itttt	gt
 8008a04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a08:	409f      	lslgt	r7, r3
 8008a0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a12:	bfd6      	itet	le
 8008a14:	f1c3 0320 	rsble	r3, r3, #32
 8008a18:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a1c:	fa04 f003 	lslle.w	r0, r4, r3
 8008a20:	f7f7 fd68 	bl	80004f4 <__aeabi_ui2d>
 8008a24:	2201      	movs	r2, #1
 8008a26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a2a:	3e01      	subs	r6, #1
 8008a2c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a2e:	e777      	b.n	8008920 <_dtoa_r+0x100>
 8008a30:	2301      	movs	r3, #1
 8008a32:	e7b8      	b.n	80089a6 <_dtoa_r+0x186>
 8008a34:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a36:	e7b7      	b.n	80089a8 <_dtoa_r+0x188>
 8008a38:	427b      	negs	r3, r7
 8008a3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	eba8 0807 	sub.w	r8, r8, r7
 8008a42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a44:	e7c4      	b.n	80089d0 <_dtoa_r+0x1b0>
 8008a46:	2300      	movs	r3, #0
 8008a48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	dc35      	bgt.n	8008abc <_dtoa_r+0x29c>
 8008a50:	2301      	movs	r3, #1
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	9307      	str	r3, [sp, #28]
 8008a56:	461a      	mov	r2, r3
 8008a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a5a:	e00b      	b.n	8008a74 <_dtoa_r+0x254>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e7f3      	b.n	8008a48 <_dtoa_r+0x228>
 8008a60:	2300      	movs	r3, #0
 8008a62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a66:	18fb      	adds	r3, r7, r3
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	9307      	str	r3, [sp, #28]
 8008a70:	bfb8      	it	lt
 8008a72:	2301      	movlt	r3, #1
 8008a74:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a78:	2100      	movs	r1, #0
 8008a7a:	2204      	movs	r2, #4
 8008a7c:	f102 0514 	add.w	r5, r2, #20
 8008a80:	429d      	cmp	r5, r3
 8008a82:	d91f      	bls.n	8008ac4 <_dtoa_r+0x2a4>
 8008a84:	6041      	str	r1, [r0, #4]
 8008a86:	4658      	mov	r0, fp
 8008a88:	f000 fc96 	bl	80093b8 <_Balloc>
 8008a8c:	4682      	mov	sl, r0
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d13c      	bne.n	8008b0c <_dtoa_r+0x2ec>
 8008a92:	4b1b      	ldr	r3, [pc, #108]	@ (8008b00 <_dtoa_r+0x2e0>)
 8008a94:	4602      	mov	r2, r0
 8008a96:	f240 11af 	movw	r1, #431	@ 0x1af
 8008a9a:	e6d8      	b.n	800884e <_dtoa_r+0x2e>
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e7e0      	b.n	8008a62 <_dtoa_r+0x242>
 8008aa0:	2401      	movs	r4, #1
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008aa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	9307      	str	r3, [sp, #28]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2312      	movs	r3, #18
 8008ab4:	e7d0      	b.n	8008a58 <_dtoa_r+0x238>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008aba:	e7f5      	b.n	8008aa8 <_dtoa_r+0x288>
 8008abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	9307      	str	r3, [sp, #28]
 8008ac2:	e7d7      	b.n	8008a74 <_dtoa_r+0x254>
 8008ac4:	3101      	adds	r1, #1
 8008ac6:	0052      	lsls	r2, r2, #1
 8008ac8:	e7d8      	b.n	8008a7c <_dtoa_r+0x25c>
 8008aca:	bf00      	nop
 8008acc:	f3af 8000 	nop.w
 8008ad0:	636f4361 	.word	0x636f4361
 8008ad4:	3fd287a7 	.word	0x3fd287a7
 8008ad8:	8b60c8b3 	.word	0x8b60c8b3
 8008adc:	3fc68a28 	.word	0x3fc68a28
 8008ae0:	509f79fb 	.word	0x509f79fb
 8008ae4:	3fd34413 	.word	0x3fd34413
 8008ae8:	0800a726 	.word	0x0800a726
 8008aec:	0800a73d 	.word	0x0800a73d
 8008af0:	7ff00000 	.word	0x7ff00000
 8008af4:	0800a725 	.word	0x0800a725
 8008af8:	3ff80000 	.word	0x3ff80000
 8008afc:	0800a838 	.word	0x0800a838
 8008b00:	0800a795 	.word	0x0800a795
 8008b04:	0800a720 	.word	0x0800a720
 8008b08:	0800a724 	.word	0x0800a724
 8008b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b10:	6018      	str	r0, [r3, #0]
 8008b12:	9b07      	ldr	r3, [sp, #28]
 8008b14:	2b0e      	cmp	r3, #14
 8008b16:	f200 80a4 	bhi.w	8008c62 <_dtoa_r+0x442>
 8008b1a:	2c00      	cmp	r4, #0
 8008b1c:	f000 80a1 	beq.w	8008c62 <_dtoa_r+0x442>
 8008b20:	2f00      	cmp	r7, #0
 8008b22:	dd33      	ble.n	8008b8c <_dtoa_r+0x36c>
 8008b24:	4bad      	ldr	r3, [pc, #692]	@ (8008ddc <_dtoa_r+0x5bc>)
 8008b26:	f007 020f 	and.w	r2, r7, #15
 8008b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b2e:	ed93 7b00 	vldr	d7, [r3]
 8008b32:	05f8      	lsls	r0, r7, #23
 8008b34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b3c:	d516      	bpl.n	8008b6c <_dtoa_r+0x34c>
 8008b3e:	4ba8      	ldr	r3, [pc, #672]	@ (8008de0 <_dtoa_r+0x5c0>)
 8008b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b48:	f7f7 fe78 	bl	800083c <__aeabi_ddiv>
 8008b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b50:	f004 040f 	and.w	r4, r4, #15
 8008b54:	2603      	movs	r6, #3
 8008b56:	4da2      	ldr	r5, [pc, #648]	@ (8008de0 <_dtoa_r+0x5c0>)
 8008b58:	b954      	cbnz	r4, 8008b70 <_dtoa_r+0x350>
 8008b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b62:	f7f7 fe6b 	bl	800083c <__aeabi_ddiv>
 8008b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b6a:	e028      	b.n	8008bbe <_dtoa_r+0x39e>
 8008b6c:	2602      	movs	r6, #2
 8008b6e:	e7f2      	b.n	8008b56 <_dtoa_r+0x336>
 8008b70:	07e1      	lsls	r1, r4, #31
 8008b72:	d508      	bpl.n	8008b86 <_dtoa_r+0x366>
 8008b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b7c:	f7f7 fd34 	bl	80005e8 <__aeabi_dmul>
 8008b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b84:	3601      	adds	r6, #1
 8008b86:	1064      	asrs	r4, r4, #1
 8008b88:	3508      	adds	r5, #8
 8008b8a:	e7e5      	b.n	8008b58 <_dtoa_r+0x338>
 8008b8c:	f000 80d2 	beq.w	8008d34 <_dtoa_r+0x514>
 8008b90:	427c      	negs	r4, r7
 8008b92:	4b92      	ldr	r3, [pc, #584]	@ (8008ddc <_dtoa_r+0x5bc>)
 8008b94:	4d92      	ldr	r5, [pc, #584]	@ (8008de0 <_dtoa_r+0x5c0>)
 8008b96:	f004 020f 	and.w	r2, r4, #15
 8008b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ba6:	f7f7 fd1f 	bl	80005e8 <__aeabi_dmul>
 8008baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bae:	1124      	asrs	r4, r4, #4
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	2602      	movs	r6, #2
 8008bb4:	2c00      	cmp	r4, #0
 8008bb6:	f040 80b2 	bne.w	8008d1e <_dtoa_r+0x4fe>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1d3      	bne.n	8008b66 <_dtoa_r+0x346>
 8008bbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008bc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80b7 	beq.w	8008d38 <_dtoa_r+0x518>
 8008bca:	4b86      	ldr	r3, [pc, #536]	@ (8008de4 <_dtoa_r+0x5c4>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	4620      	mov	r0, r4
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	f7f7 ff7b 	bl	8000acc <__aeabi_dcmplt>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f000 80ae 	beq.w	8008d38 <_dtoa_r+0x518>
 8008bdc:	9b07      	ldr	r3, [sp, #28]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f000 80aa 	beq.w	8008d38 <_dtoa_r+0x518>
 8008be4:	9b00      	ldr	r3, [sp, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	dd37      	ble.n	8008c5a <_dtoa_r+0x43a>
 8008bea:	1e7b      	subs	r3, r7, #1
 8008bec:	9304      	str	r3, [sp, #16]
 8008bee:	4620      	mov	r0, r4
 8008bf0:	4b7d      	ldr	r3, [pc, #500]	@ (8008de8 <_dtoa_r+0x5c8>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	f7f7 fcf7 	bl	80005e8 <__aeabi_dmul>
 8008bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bfe:	9c00      	ldr	r4, [sp, #0]
 8008c00:	3601      	adds	r6, #1
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7f7 fc86 	bl	8000514 <__aeabi_i2d>
 8008c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c0c:	f7f7 fcec 	bl	80005e8 <__aeabi_dmul>
 8008c10:	4b76      	ldr	r3, [pc, #472]	@ (8008dec <_dtoa_r+0x5cc>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	f7f7 fb32 	bl	800027c <__adddf3>
 8008c18:	4605      	mov	r5, r0
 8008c1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c1e:	2c00      	cmp	r4, #0
 8008c20:	f040 808d 	bne.w	8008d3e <_dtoa_r+0x51e>
 8008c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c28:	4b71      	ldr	r3, [pc, #452]	@ (8008df0 <_dtoa_r+0x5d0>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f7f7 fb24 	bl	8000278 <__aeabi_dsub>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c38:	462a      	mov	r2, r5
 8008c3a:	4633      	mov	r3, r6
 8008c3c:	f7f7 ff64 	bl	8000b08 <__aeabi_dcmpgt>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	f040 828b 	bne.w	800915c <_dtoa_r+0x93c>
 8008c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c4a:	462a      	mov	r2, r5
 8008c4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c50:	f7f7 ff3c 	bl	8000acc <__aeabi_dcmplt>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f040 8128 	bne.w	8008eaa <_dtoa_r+0x68a>
 8008c5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f2c0 815a 	blt.w	8008f1e <_dtoa_r+0x6fe>
 8008c6a:	2f0e      	cmp	r7, #14
 8008c6c:	f300 8157 	bgt.w	8008f1e <_dtoa_r+0x6fe>
 8008c70:	4b5a      	ldr	r3, [pc, #360]	@ (8008ddc <_dtoa_r+0x5bc>)
 8008c72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c76:	ed93 7b00 	vldr	d7, [r3]
 8008c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	ed8d 7b00 	vstr	d7, [sp]
 8008c82:	da03      	bge.n	8008c8c <_dtoa_r+0x46c>
 8008c84:	9b07      	ldr	r3, [sp, #28]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f340 8101 	ble.w	8008e8e <_dtoa_r+0x66e>
 8008c8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c90:	4656      	mov	r6, sl
 8008c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c96:	4620      	mov	r0, r4
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f7 fdcf 	bl	800083c <__aeabi_ddiv>
 8008c9e:	f7f7 ff3d 	bl	8000b1c <__aeabi_d2iz>
 8008ca2:	4680      	mov	r8, r0
 8008ca4:	f7f7 fc36 	bl	8000514 <__aeabi_i2d>
 8008ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cac:	f7f7 fc9c 	bl	80005e8 <__aeabi_dmul>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008cbc:	f7f7 fadc 	bl	8000278 <__aeabi_dsub>
 8008cc0:	f806 4b01 	strb.w	r4, [r6], #1
 8008cc4:	9d07      	ldr	r5, [sp, #28]
 8008cc6:	eba6 040a 	sub.w	r4, r6, sl
 8008cca:	42a5      	cmp	r5, r4
 8008ccc:	4602      	mov	r2, r0
 8008cce:	460b      	mov	r3, r1
 8008cd0:	f040 8117 	bne.w	8008f02 <_dtoa_r+0x6e2>
 8008cd4:	f7f7 fad2 	bl	800027c <__adddf3>
 8008cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cdc:	4604      	mov	r4, r0
 8008cde:	460d      	mov	r5, r1
 8008ce0:	f7f7 ff12 	bl	8000b08 <__aeabi_dcmpgt>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f040 80f9 	bne.w	8008edc <_dtoa_r+0x6bc>
 8008cea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cee:	4620      	mov	r0, r4
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	f7f7 fee1 	bl	8000ab8 <__aeabi_dcmpeq>
 8008cf6:	b118      	cbz	r0, 8008d00 <_dtoa_r+0x4e0>
 8008cf8:	f018 0f01 	tst.w	r8, #1
 8008cfc:	f040 80ee 	bne.w	8008edc <_dtoa_r+0x6bc>
 8008d00:	4649      	mov	r1, r9
 8008d02:	4658      	mov	r0, fp
 8008d04:	f000 fb98 	bl	8009438 <_Bfree>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	7033      	strb	r3, [r6, #0]
 8008d0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d0e:	3701      	adds	r7, #1
 8008d10:	601f      	str	r7, [r3, #0]
 8008d12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 831d 	beq.w	8009354 <_dtoa_r+0xb34>
 8008d1a:	601e      	str	r6, [r3, #0]
 8008d1c:	e31a      	b.n	8009354 <_dtoa_r+0xb34>
 8008d1e:	07e2      	lsls	r2, r4, #31
 8008d20:	d505      	bpl.n	8008d2e <_dtoa_r+0x50e>
 8008d22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d26:	f7f7 fc5f 	bl	80005e8 <__aeabi_dmul>
 8008d2a:	3601      	adds	r6, #1
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	1064      	asrs	r4, r4, #1
 8008d30:	3508      	adds	r5, #8
 8008d32:	e73f      	b.n	8008bb4 <_dtoa_r+0x394>
 8008d34:	2602      	movs	r6, #2
 8008d36:	e742      	b.n	8008bbe <_dtoa_r+0x39e>
 8008d38:	9c07      	ldr	r4, [sp, #28]
 8008d3a:	9704      	str	r7, [sp, #16]
 8008d3c:	e761      	b.n	8008c02 <_dtoa_r+0x3e2>
 8008d3e:	4b27      	ldr	r3, [pc, #156]	@ (8008ddc <_dtoa_r+0x5bc>)
 8008d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d4a:	4454      	add	r4, sl
 8008d4c:	2900      	cmp	r1, #0
 8008d4e:	d053      	beq.n	8008df8 <_dtoa_r+0x5d8>
 8008d50:	4928      	ldr	r1, [pc, #160]	@ (8008df4 <_dtoa_r+0x5d4>)
 8008d52:	2000      	movs	r0, #0
 8008d54:	f7f7 fd72 	bl	800083c <__aeabi_ddiv>
 8008d58:	4633      	mov	r3, r6
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	f7f7 fa8c 	bl	8000278 <__aeabi_dsub>
 8008d60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d64:	4656      	mov	r6, sl
 8008d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d6a:	f7f7 fed7 	bl	8000b1c <__aeabi_d2iz>
 8008d6e:	4605      	mov	r5, r0
 8008d70:	f7f7 fbd0 	bl	8000514 <__aeabi_i2d>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d7c:	f7f7 fa7c 	bl	8000278 <__aeabi_dsub>
 8008d80:	3530      	adds	r5, #48	@ 0x30
 8008d82:	4602      	mov	r2, r0
 8008d84:	460b      	mov	r3, r1
 8008d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d8a:	f806 5b01 	strb.w	r5, [r6], #1
 8008d8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d92:	f7f7 fe9b 	bl	8000acc <__aeabi_dcmplt>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d171      	bne.n	8008e7e <_dtoa_r+0x65e>
 8008d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d9e:	4911      	ldr	r1, [pc, #68]	@ (8008de4 <_dtoa_r+0x5c4>)
 8008da0:	2000      	movs	r0, #0
 8008da2:	f7f7 fa69 	bl	8000278 <__aeabi_dsub>
 8008da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008daa:	f7f7 fe8f 	bl	8000acc <__aeabi_dcmplt>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	f040 8095 	bne.w	8008ede <_dtoa_r+0x6be>
 8008db4:	42a6      	cmp	r6, r4
 8008db6:	f43f af50 	beq.w	8008c5a <_dtoa_r+0x43a>
 8008dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8008de8 <_dtoa_r+0x5c8>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f7f7 fc11 	bl	80005e8 <__aeabi_dmul>
 8008dc6:	4b08      	ldr	r3, [pc, #32]	@ (8008de8 <_dtoa_r+0x5c8>)
 8008dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008dcc:	2200      	movs	r2, #0
 8008dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dd2:	f7f7 fc09 	bl	80005e8 <__aeabi_dmul>
 8008dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008dda:	e7c4      	b.n	8008d66 <_dtoa_r+0x546>
 8008ddc:	0800a838 	.word	0x0800a838
 8008de0:	0800a810 	.word	0x0800a810
 8008de4:	3ff00000 	.word	0x3ff00000
 8008de8:	40240000 	.word	0x40240000
 8008dec:	401c0000 	.word	0x401c0000
 8008df0:	40140000 	.word	0x40140000
 8008df4:	3fe00000 	.word	0x3fe00000
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	f7f7 fbf4 	bl	80005e8 <__aeabi_dmul>
 8008e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e04:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e06:	4656      	mov	r6, sl
 8008e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e0c:	f7f7 fe86 	bl	8000b1c <__aeabi_d2iz>
 8008e10:	4605      	mov	r5, r0
 8008e12:	f7f7 fb7f 	bl	8000514 <__aeabi_i2d>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1e:	f7f7 fa2b 	bl	8000278 <__aeabi_dsub>
 8008e22:	3530      	adds	r5, #48	@ 0x30
 8008e24:	f806 5b01 	strb.w	r5, [r6], #1
 8008e28:	4602      	mov	r2, r0
 8008e2a:	460b      	mov	r3, r1
 8008e2c:	42a6      	cmp	r6, r4
 8008e2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	d124      	bne.n	8008e82 <_dtoa_r+0x662>
 8008e38:	4bac      	ldr	r3, [pc, #688]	@ (80090ec <_dtoa_r+0x8cc>)
 8008e3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e3e:	f7f7 fa1d 	bl	800027c <__adddf3>
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e4a:	f7f7 fe5d 	bl	8000b08 <__aeabi_dcmpgt>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d145      	bne.n	8008ede <_dtoa_r+0x6be>
 8008e52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e56:	49a5      	ldr	r1, [pc, #660]	@ (80090ec <_dtoa_r+0x8cc>)
 8008e58:	2000      	movs	r0, #0
 8008e5a:	f7f7 fa0d 	bl	8000278 <__aeabi_dsub>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e66:	f7f7 fe31 	bl	8000acc <__aeabi_dcmplt>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	f43f aef5 	beq.w	8008c5a <_dtoa_r+0x43a>
 8008e70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008e72:	1e73      	subs	r3, r6, #1
 8008e74:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e7a:	2b30      	cmp	r3, #48	@ 0x30
 8008e7c:	d0f8      	beq.n	8008e70 <_dtoa_r+0x650>
 8008e7e:	9f04      	ldr	r7, [sp, #16]
 8008e80:	e73e      	b.n	8008d00 <_dtoa_r+0x4e0>
 8008e82:	4b9b      	ldr	r3, [pc, #620]	@ (80090f0 <_dtoa_r+0x8d0>)
 8008e84:	f7f7 fbb0 	bl	80005e8 <__aeabi_dmul>
 8008e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e8c:	e7bc      	b.n	8008e08 <_dtoa_r+0x5e8>
 8008e8e:	d10c      	bne.n	8008eaa <_dtoa_r+0x68a>
 8008e90:	4b98      	ldr	r3, [pc, #608]	@ (80090f4 <_dtoa_r+0x8d4>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e98:	f7f7 fba6 	bl	80005e8 <__aeabi_dmul>
 8008e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ea0:	f7f7 fe28 	bl	8000af4 <__aeabi_dcmpge>
 8008ea4:	2800      	cmp	r0, #0
 8008ea6:	f000 8157 	beq.w	8009158 <_dtoa_r+0x938>
 8008eaa:	2400      	movs	r4, #0
 8008eac:	4625      	mov	r5, r4
 8008eae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008eb0:	43db      	mvns	r3, r3
 8008eb2:	9304      	str	r3, [sp, #16]
 8008eb4:	4656      	mov	r6, sl
 8008eb6:	2700      	movs	r7, #0
 8008eb8:	4621      	mov	r1, r4
 8008eba:	4658      	mov	r0, fp
 8008ebc:	f000 fabc 	bl	8009438 <_Bfree>
 8008ec0:	2d00      	cmp	r5, #0
 8008ec2:	d0dc      	beq.n	8008e7e <_dtoa_r+0x65e>
 8008ec4:	b12f      	cbz	r7, 8008ed2 <_dtoa_r+0x6b2>
 8008ec6:	42af      	cmp	r7, r5
 8008ec8:	d003      	beq.n	8008ed2 <_dtoa_r+0x6b2>
 8008eca:	4639      	mov	r1, r7
 8008ecc:	4658      	mov	r0, fp
 8008ece:	f000 fab3 	bl	8009438 <_Bfree>
 8008ed2:	4629      	mov	r1, r5
 8008ed4:	4658      	mov	r0, fp
 8008ed6:	f000 faaf 	bl	8009438 <_Bfree>
 8008eda:	e7d0      	b.n	8008e7e <_dtoa_r+0x65e>
 8008edc:	9704      	str	r7, [sp, #16]
 8008ede:	4633      	mov	r3, r6
 8008ee0:	461e      	mov	r6, r3
 8008ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ee6:	2a39      	cmp	r2, #57	@ 0x39
 8008ee8:	d107      	bne.n	8008efa <_dtoa_r+0x6da>
 8008eea:	459a      	cmp	sl, r3
 8008eec:	d1f8      	bne.n	8008ee0 <_dtoa_r+0x6c0>
 8008eee:	9a04      	ldr	r2, [sp, #16]
 8008ef0:	3201      	adds	r2, #1
 8008ef2:	9204      	str	r2, [sp, #16]
 8008ef4:	2230      	movs	r2, #48	@ 0x30
 8008ef6:	f88a 2000 	strb.w	r2, [sl]
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	3201      	adds	r2, #1
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	e7bd      	b.n	8008e7e <_dtoa_r+0x65e>
 8008f02:	4b7b      	ldr	r3, [pc, #492]	@ (80090f0 <_dtoa_r+0x8d0>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	f7f7 fb6f 	bl	80005e8 <__aeabi_dmul>
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	460d      	mov	r5, r1
 8008f12:	f7f7 fdd1 	bl	8000ab8 <__aeabi_dcmpeq>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	f43f aebb 	beq.w	8008c92 <_dtoa_r+0x472>
 8008f1c:	e6f0      	b.n	8008d00 <_dtoa_r+0x4e0>
 8008f1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f20:	2a00      	cmp	r2, #0
 8008f22:	f000 80db 	beq.w	80090dc <_dtoa_r+0x8bc>
 8008f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f28:	2a01      	cmp	r2, #1
 8008f2a:	f300 80bf 	bgt.w	80090ac <_dtoa_r+0x88c>
 8008f2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f30:	2a00      	cmp	r2, #0
 8008f32:	f000 80b7 	beq.w	80090a4 <_dtoa_r+0x884>
 8008f36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f3c:	4646      	mov	r6, r8
 8008f3e:	9a08      	ldr	r2, [sp, #32]
 8008f40:	2101      	movs	r1, #1
 8008f42:	441a      	add	r2, r3
 8008f44:	4658      	mov	r0, fp
 8008f46:	4498      	add	r8, r3
 8008f48:	9208      	str	r2, [sp, #32]
 8008f4a:	f000 fb29 	bl	80095a0 <__i2b>
 8008f4e:	4605      	mov	r5, r0
 8008f50:	b15e      	cbz	r6, 8008f6a <_dtoa_r+0x74a>
 8008f52:	9b08      	ldr	r3, [sp, #32]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	dd08      	ble.n	8008f6a <_dtoa_r+0x74a>
 8008f58:	42b3      	cmp	r3, r6
 8008f5a:	9a08      	ldr	r2, [sp, #32]
 8008f5c:	bfa8      	it	ge
 8008f5e:	4633      	movge	r3, r6
 8008f60:	eba8 0803 	sub.w	r8, r8, r3
 8008f64:	1af6      	subs	r6, r6, r3
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	9308      	str	r3, [sp, #32]
 8008f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f6c:	b1f3      	cbz	r3, 8008fac <_dtoa_r+0x78c>
 8008f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 80b7 	beq.w	80090e4 <_dtoa_r+0x8c4>
 8008f76:	b18c      	cbz	r4, 8008f9c <_dtoa_r+0x77c>
 8008f78:	4629      	mov	r1, r5
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	4658      	mov	r0, fp
 8008f7e:	f000 fbcf 	bl	8009720 <__pow5mult>
 8008f82:	464a      	mov	r2, r9
 8008f84:	4601      	mov	r1, r0
 8008f86:	4605      	mov	r5, r0
 8008f88:	4658      	mov	r0, fp
 8008f8a:	f000 fb1f 	bl	80095cc <__multiply>
 8008f8e:	4649      	mov	r1, r9
 8008f90:	9004      	str	r0, [sp, #16]
 8008f92:	4658      	mov	r0, fp
 8008f94:	f000 fa50 	bl	8009438 <_Bfree>
 8008f98:	9b04      	ldr	r3, [sp, #16]
 8008f9a:	4699      	mov	r9, r3
 8008f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f9e:	1b1a      	subs	r2, r3, r4
 8008fa0:	d004      	beq.n	8008fac <_dtoa_r+0x78c>
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	4658      	mov	r0, fp
 8008fa6:	f000 fbbb 	bl	8009720 <__pow5mult>
 8008faa:	4681      	mov	r9, r0
 8008fac:	2101      	movs	r1, #1
 8008fae:	4658      	mov	r0, fp
 8008fb0:	f000 faf6 	bl	80095a0 <__i2b>
 8008fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f000 81cf 	beq.w	800935c <_dtoa_r+0xb3c>
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	4601      	mov	r1, r0
 8008fc2:	4658      	mov	r0, fp
 8008fc4:	f000 fbac 	bl	8009720 <__pow5mult>
 8008fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	4604      	mov	r4, r0
 8008fce:	f300 8095 	bgt.w	80090fc <_dtoa_r+0x8dc>
 8008fd2:	9b02      	ldr	r3, [sp, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f040 8087 	bne.w	80090e8 <_dtoa_r+0x8c8>
 8008fda:	9b03      	ldr	r3, [sp, #12]
 8008fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f040 8089 	bne.w	80090f8 <_dtoa_r+0x8d8>
 8008fe6:	9b03      	ldr	r3, [sp, #12]
 8008fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fec:	0d1b      	lsrs	r3, r3, #20
 8008fee:	051b      	lsls	r3, r3, #20
 8008ff0:	b12b      	cbz	r3, 8008ffe <_dtoa_r+0x7de>
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	9308      	str	r3, [sp, #32]
 8008ff8:	f108 0801 	add.w	r8, r8, #1
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 81b0 	beq.w	8009368 <_dtoa_r+0xb48>
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800900e:	6918      	ldr	r0, [r3, #16]
 8009010:	f000 fa7a 	bl	8009508 <__hi0bits>
 8009014:	f1c0 0020 	rsb	r0, r0, #32
 8009018:	9b08      	ldr	r3, [sp, #32]
 800901a:	4418      	add	r0, r3
 800901c:	f010 001f 	ands.w	r0, r0, #31
 8009020:	d077      	beq.n	8009112 <_dtoa_r+0x8f2>
 8009022:	f1c0 0320 	rsb	r3, r0, #32
 8009026:	2b04      	cmp	r3, #4
 8009028:	dd6b      	ble.n	8009102 <_dtoa_r+0x8e2>
 800902a:	9b08      	ldr	r3, [sp, #32]
 800902c:	f1c0 001c 	rsb	r0, r0, #28
 8009030:	4403      	add	r3, r0
 8009032:	4480      	add	r8, r0
 8009034:	4406      	add	r6, r0
 8009036:	9308      	str	r3, [sp, #32]
 8009038:	f1b8 0f00 	cmp.w	r8, #0
 800903c:	dd05      	ble.n	800904a <_dtoa_r+0x82a>
 800903e:	4649      	mov	r1, r9
 8009040:	4642      	mov	r2, r8
 8009042:	4658      	mov	r0, fp
 8009044:	f000 fbc6 	bl	80097d4 <__lshift>
 8009048:	4681      	mov	r9, r0
 800904a:	9b08      	ldr	r3, [sp, #32]
 800904c:	2b00      	cmp	r3, #0
 800904e:	dd05      	ble.n	800905c <_dtoa_r+0x83c>
 8009050:	4621      	mov	r1, r4
 8009052:	461a      	mov	r2, r3
 8009054:	4658      	mov	r0, fp
 8009056:	f000 fbbd 	bl	80097d4 <__lshift>
 800905a:	4604      	mov	r4, r0
 800905c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800905e:	2b00      	cmp	r3, #0
 8009060:	d059      	beq.n	8009116 <_dtoa_r+0x8f6>
 8009062:	4621      	mov	r1, r4
 8009064:	4648      	mov	r0, r9
 8009066:	f000 fc21 	bl	80098ac <__mcmp>
 800906a:	2800      	cmp	r0, #0
 800906c:	da53      	bge.n	8009116 <_dtoa_r+0x8f6>
 800906e:	1e7b      	subs	r3, r7, #1
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	4649      	mov	r1, r9
 8009074:	2300      	movs	r3, #0
 8009076:	220a      	movs	r2, #10
 8009078:	4658      	mov	r0, fp
 800907a:	f000 f9ff 	bl	800947c <__multadd>
 800907e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009080:	4681      	mov	r9, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 8172 	beq.w	800936c <_dtoa_r+0xb4c>
 8009088:	2300      	movs	r3, #0
 800908a:	4629      	mov	r1, r5
 800908c:	220a      	movs	r2, #10
 800908e:	4658      	mov	r0, fp
 8009090:	f000 f9f4 	bl	800947c <__multadd>
 8009094:	9b00      	ldr	r3, [sp, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	4605      	mov	r5, r0
 800909a:	dc67      	bgt.n	800916c <_dtoa_r+0x94c>
 800909c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800909e:	2b02      	cmp	r3, #2
 80090a0:	dc41      	bgt.n	8009126 <_dtoa_r+0x906>
 80090a2:	e063      	b.n	800916c <_dtoa_r+0x94c>
 80090a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090aa:	e746      	b.n	8008f3a <_dtoa_r+0x71a>
 80090ac:	9b07      	ldr	r3, [sp, #28]
 80090ae:	1e5c      	subs	r4, r3, #1
 80090b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090b2:	42a3      	cmp	r3, r4
 80090b4:	bfbf      	itttt	lt
 80090b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80090ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80090bc:	1ae3      	sublt	r3, r4, r3
 80090be:	bfb4      	ite	lt
 80090c0:	18d2      	addlt	r2, r2, r3
 80090c2:	1b1c      	subge	r4, r3, r4
 80090c4:	9b07      	ldr	r3, [sp, #28]
 80090c6:	bfbc      	itt	lt
 80090c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80090ca:	2400      	movlt	r4, #0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	bfb5      	itete	lt
 80090d0:	eba8 0603 	sublt.w	r6, r8, r3
 80090d4:	9b07      	ldrge	r3, [sp, #28]
 80090d6:	2300      	movlt	r3, #0
 80090d8:	4646      	movge	r6, r8
 80090da:	e730      	b.n	8008f3e <_dtoa_r+0x71e>
 80090dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090e0:	4646      	mov	r6, r8
 80090e2:	e735      	b.n	8008f50 <_dtoa_r+0x730>
 80090e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090e6:	e75c      	b.n	8008fa2 <_dtoa_r+0x782>
 80090e8:	2300      	movs	r3, #0
 80090ea:	e788      	b.n	8008ffe <_dtoa_r+0x7de>
 80090ec:	3fe00000 	.word	0x3fe00000
 80090f0:	40240000 	.word	0x40240000
 80090f4:	40140000 	.word	0x40140000
 80090f8:	9b02      	ldr	r3, [sp, #8]
 80090fa:	e780      	b.n	8008ffe <_dtoa_r+0x7de>
 80090fc:	2300      	movs	r3, #0
 80090fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009100:	e782      	b.n	8009008 <_dtoa_r+0x7e8>
 8009102:	d099      	beq.n	8009038 <_dtoa_r+0x818>
 8009104:	9a08      	ldr	r2, [sp, #32]
 8009106:	331c      	adds	r3, #28
 8009108:	441a      	add	r2, r3
 800910a:	4498      	add	r8, r3
 800910c:	441e      	add	r6, r3
 800910e:	9208      	str	r2, [sp, #32]
 8009110:	e792      	b.n	8009038 <_dtoa_r+0x818>
 8009112:	4603      	mov	r3, r0
 8009114:	e7f6      	b.n	8009104 <_dtoa_r+0x8e4>
 8009116:	9b07      	ldr	r3, [sp, #28]
 8009118:	9704      	str	r7, [sp, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	dc20      	bgt.n	8009160 <_dtoa_r+0x940>
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009122:	2b02      	cmp	r3, #2
 8009124:	dd1e      	ble.n	8009164 <_dtoa_r+0x944>
 8009126:	9b00      	ldr	r3, [sp, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	f47f aec0 	bne.w	8008eae <_dtoa_r+0x68e>
 800912e:	4621      	mov	r1, r4
 8009130:	2205      	movs	r2, #5
 8009132:	4658      	mov	r0, fp
 8009134:	f000 f9a2 	bl	800947c <__multadd>
 8009138:	4601      	mov	r1, r0
 800913a:	4604      	mov	r4, r0
 800913c:	4648      	mov	r0, r9
 800913e:	f000 fbb5 	bl	80098ac <__mcmp>
 8009142:	2800      	cmp	r0, #0
 8009144:	f77f aeb3 	ble.w	8008eae <_dtoa_r+0x68e>
 8009148:	4656      	mov	r6, sl
 800914a:	2331      	movs	r3, #49	@ 0x31
 800914c:	f806 3b01 	strb.w	r3, [r6], #1
 8009150:	9b04      	ldr	r3, [sp, #16]
 8009152:	3301      	adds	r3, #1
 8009154:	9304      	str	r3, [sp, #16]
 8009156:	e6ae      	b.n	8008eb6 <_dtoa_r+0x696>
 8009158:	9c07      	ldr	r4, [sp, #28]
 800915a:	9704      	str	r7, [sp, #16]
 800915c:	4625      	mov	r5, r4
 800915e:	e7f3      	b.n	8009148 <_dtoa_r+0x928>
 8009160:	9b07      	ldr	r3, [sp, #28]
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 8104 	beq.w	8009374 <_dtoa_r+0xb54>
 800916c:	2e00      	cmp	r6, #0
 800916e:	dd05      	ble.n	800917c <_dtoa_r+0x95c>
 8009170:	4629      	mov	r1, r5
 8009172:	4632      	mov	r2, r6
 8009174:	4658      	mov	r0, fp
 8009176:	f000 fb2d 	bl	80097d4 <__lshift>
 800917a:	4605      	mov	r5, r0
 800917c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800917e:	2b00      	cmp	r3, #0
 8009180:	d05a      	beq.n	8009238 <_dtoa_r+0xa18>
 8009182:	6869      	ldr	r1, [r5, #4]
 8009184:	4658      	mov	r0, fp
 8009186:	f000 f917 	bl	80093b8 <_Balloc>
 800918a:	4606      	mov	r6, r0
 800918c:	b928      	cbnz	r0, 800919a <_dtoa_r+0x97a>
 800918e:	4b84      	ldr	r3, [pc, #528]	@ (80093a0 <_dtoa_r+0xb80>)
 8009190:	4602      	mov	r2, r0
 8009192:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009196:	f7ff bb5a 	b.w	800884e <_dtoa_r+0x2e>
 800919a:	692a      	ldr	r2, [r5, #16]
 800919c:	3202      	adds	r2, #2
 800919e:	0092      	lsls	r2, r2, #2
 80091a0:	f105 010c 	add.w	r1, r5, #12
 80091a4:	300c      	adds	r0, #12
 80091a6:	f7fe fcb2 	bl	8007b0e <memcpy>
 80091aa:	2201      	movs	r2, #1
 80091ac:	4631      	mov	r1, r6
 80091ae:	4658      	mov	r0, fp
 80091b0:	f000 fb10 	bl	80097d4 <__lshift>
 80091b4:	f10a 0301 	add.w	r3, sl, #1
 80091b8:	9307      	str	r3, [sp, #28]
 80091ba:	9b00      	ldr	r3, [sp, #0]
 80091bc:	4453      	add	r3, sl
 80091be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091c0:	9b02      	ldr	r3, [sp, #8]
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	462f      	mov	r7, r5
 80091c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80091ca:	4605      	mov	r5, r0
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	4621      	mov	r1, r4
 80091d0:	3b01      	subs	r3, #1
 80091d2:	4648      	mov	r0, r9
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	f7ff fa9b 	bl	8008710 <quorem>
 80091da:	4639      	mov	r1, r7
 80091dc:	9002      	str	r0, [sp, #8]
 80091de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091e2:	4648      	mov	r0, r9
 80091e4:	f000 fb62 	bl	80098ac <__mcmp>
 80091e8:	462a      	mov	r2, r5
 80091ea:	9008      	str	r0, [sp, #32]
 80091ec:	4621      	mov	r1, r4
 80091ee:	4658      	mov	r0, fp
 80091f0:	f000 fb78 	bl	80098e4 <__mdiff>
 80091f4:	68c2      	ldr	r2, [r0, #12]
 80091f6:	4606      	mov	r6, r0
 80091f8:	bb02      	cbnz	r2, 800923c <_dtoa_r+0xa1c>
 80091fa:	4601      	mov	r1, r0
 80091fc:	4648      	mov	r0, r9
 80091fe:	f000 fb55 	bl	80098ac <__mcmp>
 8009202:	4602      	mov	r2, r0
 8009204:	4631      	mov	r1, r6
 8009206:	4658      	mov	r0, fp
 8009208:	920e      	str	r2, [sp, #56]	@ 0x38
 800920a:	f000 f915 	bl	8009438 <_Bfree>
 800920e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009212:	9e07      	ldr	r6, [sp, #28]
 8009214:	ea43 0102 	orr.w	r1, r3, r2
 8009218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800921a:	4319      	orrs	r1, r3
 800921c:	d110      	bne.n	8009240 <_dtoa_r+0xa20>
 800921e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009222:	d029      	beq.n	8009278 <_dtoa_r+0xa58>
 8009224:	9b08      	ldr	r3, [sp, #32]
 8009226:	2b00      	cmp	r3, #0
 8009228:	dd02      	ble.n	8009230 <_dtoa_r+0xa10>
 800922a:	9b02      	ldr	r3, [sp, #8]
 800922c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009230:	9b00      	ldr	r3, [sp, #0]
 8009232:	f883 8000 	strb.w	r8, [r3]
 8009236:	e63f      	b.n	8008eb8 <_dtoa_r+0x698>
 8009238:	4628      	mov	r0, r5
 800923a:	e7bb      	b.n	80091b4 <_dtoa_r+0x994>
 800923c:	2201      	movs	r2, #1
 800923e:	e7e1      	b.n	8009204 <_dtoa_r+0x9e4>
 8009240:	9b08      	ldr	r3, [sp, #32]
 8009242:	2b00      	cmp	r3, #0
 8009244:	db04      	blt.n	8009250 <_dtoa_r+0xa30>
 8009246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009248:	430b      	orrs	r3, r1
 800924a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800924c:	430b      	orrs	r3, r1
 800924e:	d120      	bne.n	8009292 <_dtoa_r+0xa72>
 8009250:	2a00      	cmp	r2, #0
 8009252:	dded      	ble.n	8009230 <_dtoa_r+0xa10>
 8009254:	4649      	mov	r1, r9
 8009256:	2201      	movs	r2, #1
 8009258:	4658      	mov	r0, fp
 800925a:	f000 fabb 	bl	80097d4 <__lshift>
 800925e:	4621      	mov	r1, r4
 8009260:	4681      	mov	r9, r0
 8009262:	f000 fb23 	bl	80098ac <__mcmp>
 8009266:	2800      	cmp	r0, #0
 8009268:	dc03      	bgt.n	8009272 <_dtoa_r+0xa52>
 800926a:	d1e1      	bne.n	8009230 <_dtoa_r+0xa10>
 800926c:	f018 0f01 	tst.w	r8, #1
 8009270:	d0de      	beq.n	8009230 <_dtoa_r+0xa10>
 8009272:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009276:	d1d8      	bne.n	800922a <_dtoa_r+0xa0a>
 8009278:	9a00      	ldr	r2, [sp, #0]
 800927a:	2339      	movs	r3, #57	@ 0x39
 800927c:	7013      	strb	r3, [r2, #0]
 800927e:	4633      	mov	r3, r6
 8009280:	461e      	mov	r6, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009288:	2a39      	cmp	r2, #57	@ 0x39
 800928a:	d052      	beq.n	8009332 <_dtoa_r+0xb12>
 800928c:	3201      	adds	r2, #1
 800928e:	701a      	strb	r2, [r3, #0]
 8009290:	e612      	b.n	8008eb8 <_dtoa_r+0x698>
 8009292:	2a00      	cmp	r2, #0
 8009294:	dd07      	ble.n	80092a6 <_dtoa_r+0xa86>
 8009296:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800929a:	d0ed      	beq.n	8009278 <_dtoa_r+0xa58>
 800929c:	9a00      	ldr	r2, [sp, #0]
 800929e:	f108 0301 	add.w	r3, r8, #1
 80092a2:	7013      	strb	r3, [r2, #0]
 80092a4:	e608      	b.n	8008eb8 <_dtoa_r+0x698>
 80092a6:	9b07      	ldr	r3, [sp, #28]
 80092a8:	9a07      	ldr	r2, [sp, #28]
 80092aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d028      	beq.n	8009306 <_dtoa_r+0xae6>
 80092b4:	4649      	mov	r1, r9
 80092b6:	2300      	movs	r3, #0
 80092b8:	220a      	movs	r2, #10
 80092ba:	4658      	mov	r0, fp
 80092bc:	f000 f8de 	bl	800947c <__multadd>
 80092c0:	42af      	cmp	r7, r5
 80092c2:	4681      	mov	r9, r0
 80092c4:	f04f 0300 	mov.w	r3, #0
 80092c8:	f04f 020a 	mov.w	r2, #10
 80092cc:	4639      	mov	r1, r7
 80092ce:	4658      	mov	r0, fp
 80092d0:	d107      	bne.n	80092e2 <_dtoa_r+0xac2>
 80092d2:	f000 f8d3 	bl	800947c <__multadd>
 80092d6:	4607      	mov	r7, r0
 80092d8:	4605      	mov	r5, r0
 80092da:	9b07      	ldr	r3, [sp, #28]
 80092dc:	3301      	adds	r3, #1
 80092de:	9307      	str	r3, [sp, #28]
 80092e0:	e774      	b.n	80091cc <_dtoa_r+0x9ac>
 80092e2:	f000 f8cb 	bl	800947c <__multadd>
 80092e6:	4629      	mov	r1, r5
 80092e8:	4607      	mov	r7, r0
 80092ea:	2300      	movs	r3, #0
 80092ec:	220a      	movs	r2, #10
 80092ee:	4658      	mov	r0, fp
 80092f0:	f000 f8c4 	bl	800947c <__multadd>
 80092f4:	4605      	mov	r5, r0
 80092f6:	e7f0      	b.n	80092da <_dtoa_r+0xaba>
 80092f8:	9b00      	ldr	r3, [sp, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	bfcc      	ite	gt
 80092fe:	461e      	movgt	r6, r3
 8009300:	2601      	movle	r6, #1
 8009302:	4456      	add	r6, sl
 8009304:	2700      	movs	r7, #0
 8009306:	4649      	mov	r1, r9
 8009308:	2201      	movs	r2, #1
 800930a:	4658      	mov	r0, fp
 800930c:	f000 fa62 	bl	80097d4 <__lshift>
 8009310:	4621      	mov	r1, r4
 8009312:	4681      	mov	r9, r0
 8009314:	f000 faca 	bl	80098ac <__mcmp>
 8009318:	2800      	cmp	r0, #0
 800931a:	dcb0      	bgt.n	800927e <_dtoa_r+0xa5e>
 800931c:	d102      	bne.n	8009324 <_dtoa_r+0xb04>
 800931e:	f018 0f01 	tst.w	r8, #1
 8009322:	d1ac      	bne.n	800927e <_dtoa_r+0xa5e>
 8009324:	4633      	mov	r3, r6
 8009326:	461e      	mov	r6, r3
 8009328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800932c:	2a30      	cmp	r2, #48	@ 0x30
 800932e:	d0fa      	beq.n	8009326 <_dtoa_r+0xb06>
 8009330:	e5c2      	b.n	8008eb8 <_dtoa_r+0x698>
 8009332:	459a      	cmp	sl, r3
 8009334:	d1a4      	bne.n	8009280 <_dtoa_r+0xa60>
 8009336:	9b04      	ldr	r3, [sp, #16]
 8009338:	3301      	adds	r3, #1
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	2331      	movs	r3, #49	@ 0x31
 800933e:	f88a 3000 	strb.w	r3, [sl]
 8009342:	e5b9      	b.n	8008eb8 <_dtoa_r+0x698>
 8009344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009346:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093a4 <_dtoa_r+0xb84>
 800934a:	b11b      	cbz	r3, 8009354 <_dtoa_r+0xb34>
 800934c:	f10a 0308 	add.w	r3, sl, #8
 8009350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	4650      	mov	r0, sl
 8009356:	b019      	add	sp, #100	@ 0x64
 8009358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800935e:	2b01      	cmp	r3, #1
 8009360:	f77f ae37 	ble.w	8008fd2 <_dtoa_r+0x7b2>
 8009364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009366:	930a      	str	r3, [sp, #40]	@ 0x28
 8009368:	2001      	movs	r0, #1
 800936a:	e655      	b.n	8009018 <_dtoa_r+0x7f8>
 800936c:	9b00      	ldr	r3, [sp, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f77f aed6 	ble.w	8009120 <_dtoa_r+0x900>
 8009374:	4656      	mov	r6, sl
 8009376:	4621      	mov	r1, r4
 8009378:	4648      	mov	r0, r9
 800937a:	f7ff f9c9 	bl	8008710 <quorem>
 800937e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009382:	f806 8b01 	strb.w	r8, [r6], #1
 8009386:	9b00      	ldr	r3, [sp, #0]
 8009388:	eba6 020a 	sub.w	r2, r6, sl
 800938c:	4293      	cmp	r3, r2
 800938e:	ddb3      	ble.n	80092f8 <_dtoa_r+0xad8>
 8009390:	4649      	mov	r1, r9
 8009392:	2300      	movs	r3, #0
 8009394:	220a      	movs	r2, #10
 8009396:	4658      	mov	r0, fp
 8009398:	f000 f870 	bl	800947c <__multadd>
 800939c:	4681      	mov	r9, r0
 800939e:	e7ea      	b.n	8009376 <_dtoa_r+0xb56>
 80093a0:	0800a795 	.word	0x0800a795
 80093a4:	0800a717 	.word	0x0800a717

080093a8 <malloc>:
 80093a8:	4b02      	ldr	r3, [pc, #8]	@ (80093b4 <malloc+0xc>)
 80093aa:	4601      	mov	r1, r0
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	f7fe bc29 	b.w	8007c04 <_malloc_r>
 80093b2:	bf00      	nop
 80093b4:	20000238 	.word	0x20000238

080093b8 <_Balloc>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	69c6      	ldr	r6, [r0, #28]
 80093bc:	4604      	mov	r4, r0
 80093be:	460d      	mov	r5, r1
 80093c0:	b976      	cbnz	r6, 80093e0 <_Balloc+0x28>
 80093c2:	2010      	movs	r0, #16
 80093c4:	f7ff fff0 	bl	80093a8 <malloc>
 80093c8:	4602      	mov	r2, r0
 80093ca:	61e0      	str	r0, [r4, #28]
 80093cc:	b920      	cbnz	r0, 80093d8 <_Balloc+0x20>
 80093ce:	4b18      	ldr	r3, [pc, #96]	@ (8009430 <_Balloc+0x78>)
 80093d0:	4818      	ldr	r0, [pc, #96]	@ (8009434 <_Balloc+0x7c>)
 80093d2:	216b      	movs	r1, #107	@ 0x6b
 80093d4:	f000 fbbe 	bl	8009b54 <__assert_func>
 80093d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093dc:	6006      	str	r6, [r0, #0]
 80093de:	60c6      	str	r6, [r0, #12]
 80093e0:	69e6      	ldr	r6, [r4, #28]
 80093e2:	68f3      	ldr	r3, [r6, #12]
 80093e4:	b183      	cbz	r3, 8009408 <_Balloc+0x50>
 80093e6:	69e3      	ldr	r3, [r4, #28]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ee:	b9b8      	cbnz	r0, 8009420 <_Balloc+0x68>
 80093f0:	2101      	movs	r1, #1
 80093f2:	fa01 f605 	lsl.w	r6, r1, r5
 80093f6:	1d72      	adds	r2, r6, #5
 80093f8:	0092      	lsls	r2, r2, #2
 80093fa:	4620      	mov	r0, r4
 80093fc:	f000 fbc8 	bl	8009b90 <_calloc_r>
 8009400:	b160      	cbz	r0, 800941c <_Balloc+0x64>
 8009402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009406:	e00e      	b.n	8009426 <_Balloc+0x6e>
 8009408:	2221      	movs	r2, #33	@ 0x21
 800940a:	2104      	movs	r1, #4
 800940c:	4620      	mov	r0, r4
 800940e:	f000 fbbf 	bl	8009b90 <_calloc_r>
 8009412:	69e3      	ldr	r3, [r4, #28]
 8009414:	60f0      	str	r0, [r6, #12]
 8009416:	68db      	ldr	r3, [r3, #12]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e4      	bne.n	80093e6 <_Balloc+0x2e>
 800941c:	2000      	movs	r0, #0
 800941e:	bd70      	pop	{r4, r5, r6, pc}
 8009420:	6802      	ldr	r2, [r0, #0]
 8009422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009426:	2300      	movs	r3, #0
 8009428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800942c:	e7f7      	b.n	800941e <_Balloc+0x66>
 800942e:	bf00      	nop
 8009430:	0800a726 	.word	0x0800a726
 8009434:	0800a7a6 	.word	0x0800a7a6

08009438 <_Bfree>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	69c6      	ldr	r6, [r0, #28]
 800943c:	4605      	mov	r5, r0
 800943e:	460c      	mov	r4, r1
 8009440:	b976      	cbnz	r6, 8009460 <_Bfree+0x28>
 8009442:	2010      	movs	r0, #16
 8009444:	f7ff ffb0 	bl	80093a8 <malloc>
 8009448:	4602      	mov	r2, r0
 800944a:	61e8      	str	r0, [r5, #28]
 800944c:	b920      	cbnz	r0, 8009458 <_Bfree+0x20>
 800944e:	4b09      	ldr	r3, [pc, #36]	@ (8009474 <_Bfree+0x3c>)
 8009450:	4809      	ldr	r0, [pc, #36]	@ (8009478 <_Bfree+0x40>)
 8009452:	218f      	movs	r1, #143	@ 0x8f
 8009454:	f000 fb7e 	bl	8009b54 <__assert_func>
 8009458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800945c:	6006      	str	r6, [r0, #0]
 800945e:	60c6      	str	r6, [r0, #12]
 8009460:	b13c      	cbz	r4, 8009472 <_Bfree+0x3a>
 8009462:	69eb      	ldr	r3, [r5, #28]
 8009464:	6862      	ldr	r2, [r4, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800946c:	6021      	str	r1, [r4, #0]
 800946e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	0800a726 	.word	0x0800a726
 8009478:	0800a7a6 	.word	0x0800a7a6

0800947c <__multadd>:
 800947c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009480:	690d      	ldr	r5, [r1, #16]
 8009482:	4607      	mov	r7, r0
 8009484:	460c      	mov	r4, r1
 8009486:	461e      	mov	r6, r3
 8009488:	f101 0c14 	add.w	ip, r1, #20
 800948c:	2000      	movs	r0, #0
 800948e:	f8dc 3000 	ldr.w	r3, [ip]
 8009492:	b299      	uxth	r1, r3
 8009494:	fb02 6101 	mla	r1, r2, r1, r6
 8009498:	0c1e      	lsrs	r6, r3, #16
 800949a:	0c0b      	lsrs	r3, r1, #16
 800949c:	fb02 3306 	mla	r3, r2, r6, r3
 80094a0:	b289      	uxth	r1, r1
 80094a2:	3001      	adds	r0, #1
 80094a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094a8:	4285      	cmp	r5, r0
 80094aa:	f84c 1b04 	str.w	r1, [ip], #4
 80094ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094b2:	dcec      	bgt.n	800948e <__multadd+0x12>
 80094b4:	b30e      	cbz	r6, 80094fa <__multadd+0x7e>
 80094b6:	68a3      	ldr	r3, [r4, #8]
 80094b8:	42ab      	cmp	r3, r5
 80094ba:	dc19      	bgt.n	80094f0 <__multadd+0x74>
 80094bc:	6861      	ldr	r1, [r4, #4]
 80094be:	4638      	mov	r0, r7
 80094c0:	3101      	adds	r1, #1
 80094c2:	f7ff ff79 	bl	80093b8 <_Balloc>
 80094c6:	4680      	mov	r8, r0
 80094c8:	b928      	cbnz	r0, 80094d6 <__multadd+0x5a>
 80094ca:	4602      	mov	r2, r0
 80094cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009500 <__multadd+0x84>)
 80094ce:	480d      	ldr	r0, [pc, #52]	@ (8009504 <__multadd+0x88>)
 80094d0:	21ba      	movs	r1, #186	@ 0xba
 80094d2:	f000 fb3f 	bl	8009b54 <__assert_func>
 80094d6:	6922      	ldr	r2, [r4, #16]
 80094d8:	3202      	adds	r2, #2
 80094da:	f104 010c 	add.w	r1, r4, #12
 80094de:	0092      	lsls	r2, r2, #2
 80094e0:	300c      	adds	r0, #12
 80094e2:	f7fe fb14 	bl	8007b0e <memcpy>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4638      	mov	r0, r7
 80094ea:	f7ff ffa5 	bl	8009438 <_Bfree>
 80094ee:	4644      	mov	r4, r8
 80094f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094f4:	3501      	adds	r5, #1
 80094f6:	615e      	str	r6, [r3, #20]
 80094f8:	6125      	str	r5, [r4, #16]
 80094fa:	4620      	mov	r0, r4
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009500:	0800a795 	.word	0x0800a795
 8009504:	0800a7a6 	.word	0x0800a7a6

08009508 <__hi0bits>:
 8009508:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800950c:	4603      	mov	r3, r0
 800950e:	bf36      	itet	cc
 8009510:	0403      	lslcc	r3, r0, #16
 8009512:	2000      	movcs	r0, #0
 8009514:	2010      	movcc	r0, #16
 8009516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800951a:	bf3c      	itt	cc
 800951c:	021b      	lslcc	r3, r3, #8
 800951e:	3008      	addcc	r0, #8
 8009520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009524:	bf3c      	itt	cc
 8009526:	011b      	lslcc	r3, r3, #4
 8009528:	3004      	addcc	r0, #4
 800952a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800952e:	bf3c      	itt	cc
 8009530:	009b      	lslcc	r3, r3, #2
 8009532:	3002      	addcc	r0, #2
 8009534:	2b00      	cmp	r3, #0
 8009536:	db05      	blt.n	8009544 <__hi0bits+0x3c>
 8009538:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800953c:	f100 0001 	add.w	r0, r0, #1
 8009540:	bf08      	it	eq
 8009542:	2020      	moveq	r0, #32
 8009544:	4770      	bx	lr

08009546 <__lo0bits>:
 8009546:	6803      	ldr	r3, [r0, #0]
 8009548:	4602      	mov	r2, r0
 800954a:	f013 0007 	ands.w	r0, r3, #7
 800954e:	d00b      	beq.n	8009568 <__lo0bits+0x22>
 8009550:	07d9      	lsls	r1, r3, #31
 8009552:	d421      	bmi.n	8009598 <__lo0bits+0x52>
 8009554:	0798      	lsls	r0, r3, #30
 8009556:	bf49      	itett	mi
 8009558:	085b      	lsrmi	r3, r3, #1
 800955a:	089b      	lsrpl	r3, r3, #2
 800955c:	2001      	movmi	r0, #1
 800955e:	6013      	strmi	r3, [r2, #0]
 8009560:	bf5c      	itt	pl
 8009562:	6013      	strpl	r3, [r2, #0]
 8009564:	2002      	movpl	r0, #2
 8009566:	4770      	bx	lr
 8009568:	b299      	uxth	r1, r3
 800956a:	b909      	cbnz	r1, 8009570 <__lo0bits+0x2a>
 800956c:	0c1b      	lsrs	r3, r3, #16
 800956e:	2010      	movs	r0, #16
 8009570:	b2d9      	uxtb	r1, r3
 8009572:	b909      	cbnz	r1, 8009578 <__lo0bits+0x32>
 8009574:	3008      	adds	r0, #8
 8009576:	0a1b      	lsrs	r3, r3, #8
 8009578:	0719      	lsls	r1, r3, #28
 800957a:	bf04      	itt	eq
 800957c:	091b      	lsreq	r3, r3, #4
 800957e:	3004      	addeq	r0, #4
 8009580:	0799      	lsls	r1, r3, #30
 8009582:	bf04      	itt	eq
 8009584:	089b      	lsreq	r3, r3, #2
 8009586:	3002      	addeq	r0, #2
 8009588:	07d9      	lsls	r1, r3, #31
 800958a:	d403      	bmi.n	8009594 <__lo0bits+0x4e>
 800958c:	085b      	lsrs	r3, r3, #1
 800958e:	f100 0001 	add.w	r0, r0, #1
 8009592:	d003      	beq.n	800959c <__lo0bits+0x56>
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	4770      	bx	lr
 8009598:	2000      	movs	r0, #0
 800959a:	4770      	bx	lr
 800959c:	2020      	movs	r0, #32
 800959e:	4770      	bx	lr

080095a0 <__i2b>:
 80095a0:	b510      	push	{r4, lr}
 80095a2:	460c      	mov	r4, r1
 80095a4:	2101      	movs	r1, #1
 80095a6:	f7ff ff07 	bl	80093b8 <_Balloc>
 80095aa:	4602      	mov	r2, r0
 80095ac:	b928      	cbnz	r0, 80095ba <__i2b+0x1a>
 80095ae:	4b05      	ldr	r3, [pc, #20]	@ (80095c4 <__i2b+0x24>)
 80095b0:	4805      	ldr	r0, [pc, #20]	@ (80095c8 <__i2b+0x28>)
 80095b2:	f240 1145 	movw	r1, #325	@ 0x145
 80095b6:	f000 facd 	bl	8009b54 <__assert_func>
 80095ba:	2301      	movs	r3, #1
 80095bc:	6144      	str	r4, [r0, #20]
 80095be:	6103      	str	r3, [r0, #16]
 80095c0:	bd10      	pop	{r4, pc}
 80095c2:	bf00      	nop
 80095c4:	0800a795 	.word	0x0800a795
 80095c8:	0800a7a6 	.word	0x0800a7a6

080095cc <__multiply>:
 80095cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d0:	4614      	mov	r4, r2
 80095d2:	690a      	ldr	r2, [r1, #16]
 80095d4:	6923      	ldr	r3, [r4, #16]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	bfa8      	it	ge
 80095da:	4623      	movge	r3, r4
 80095dc:	460f      	mov	r7, r1
 80095de:	bfa4      	itt	ge
 80095e0:	460c      	movge	r4, r1
 80095e2:	461f      	movge	r7, r3
 80095e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80095e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80095ec:	68a3      	ldr	r3, [r4, #8]
 80095ee:	6861      	ldr	r1, [r4, #4]
 80095f0:	eb0a 0609 	add.w	r6, sl, r9
 80095f4:	42b3      	cmp	r3, r6
 80095f6:	b085      	sub	sp, #20
 80095f8:	bfb8      	it	lt
 80095fa:	3101      	addlt	r1, #1
 80095fc:	f7ff fedc 	bl	80093b8 <_Balloc>
 8009600:	b930      	cbnz	r0, 8009610 <__multiply+0x44>
 8009602:	4602      	mov	r2, r0
 8009604:	4b44      	ldr	r3, [pc, #272]	@ (8009718 <__multiply+0x14c>)
 8009606:	4845      	ldr	r0, [pc, #276]	@ (800971c <__multiply+0x150>)
 8009608:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800960c:	f000 faa2 	bl	8009b54 <__assert_func>
 8009610:	f100 0514 	add.w	r5, r0, #20
 8009614:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009618:	462b      	mov	r3, r5
 800961a:	2200      	movs	r2, #0
 800961c:	4543      	cmp	r3, r8
 800961e:	d321      	bcc.n	8009664 <__multiply+0x98>
 8009620:	f107 0114 	add.w	r1, r7, #20
 8009624:	f104 0214 	add.w	r2, r4, #20
 8009628:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800962c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009630:	9302      	str	r3, [sp, #8]
 8009632:	1b13      	subs	r3, r2, r4
 8009634:	3b15      	subs	r3, #21
 8009636:	f023 0303 	bic.w	r3, r3, #3
 800963a:	3304      	adds	r3, #4
 800963c:	f104 0715 	add.w	r7, r4, #21
 8009640:	42ba      	cmp	r2, r7
 8009642:	bf38      	it	cc
 8009644:	2304      	movcc	r3, #4
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	9b02      	ldr	r3, [sp, #8]
 800964a:	9103      	str	r1, [sp, #12]
 800964c:	428b      	cmp	r3, r1
 800964e:	d80c      	bhi.n	800966a <__multiply+0x9e>
 8009650:	2e00      	cmp	r6, #0
 8009652:	dd03      	ble.n	800965c <__multiply+0x90>
 8009654:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009658:	2b00      	cmp	r3, #0
 800965a:	d05b      	beq.n	8009714 <__multiply+0x148>
 800965c:	6106      	str	r6, [r0, #16]
 800965e:	b005      	add	sp, #20
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	f843 2b04 	str.w	r2, [r3], #4
 8009668:	e7d8      	b.n	800961c <__multiply+0x50>
 800966a:	f8b1 a000 	ldrh.w	sl, [r1]
 800966e:	f1ba 0f00 	cmp.w	sl, #0
 8009672:	d024      	beq.n	80096be <__multiply+0xf2>
 8009674:	f104 0e14 	add.w	lr, r4, #20
 8009678:	46a9      	mov	r9, r5
 800967a:	f04f 0c00 	mov.w	ip, #0
 800967e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009682:	f8d9 3000 	ldr.w	r3, [r9]
 8009686:	fa1f fb87 	uxth.w	fp, r7
 800968a:	b29b      	uxth	r3, r3
 800968c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009690:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009694:	f8d9 7000 	ldr.w	r7, [r9]
 8009698:	4463      	add	r3, ip
 800969a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800969e:	fb0a c70b 	mla	r7, sl, fp, ip
 80096a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80096ac:	4572      	cmp	r2, lr
 80096ae:	f849 3b04 	str.w	r3, [r9], #4
 80096b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80096b6:	d8e2      	bhi.n	800967e <__multiply+0xb2>
 80096b8:	9b01      	ldr	r3, [sp, #4]
 80096ba:	f845 c003 	str.w	ip, [r5, r3]
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80096c4:	3104      	adds	r1, #4
 80096c6:	f1b9 0f00 	cmp.w	r9, #0
 80096ca:	d021      	beq.n	8009710 <__multiply+0x144>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	f104 0c14 	add.w	ip, r4, #20
 80096d2:	46ae      	mov	lr, r5
 80096d4:	f04f 0a00 	mov.w	sl, #0
 80096d8:	f8bc b000 	ldrh.w	fp, [ip]
 80096dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80096e0:	fb09 770b 	mla	r7, r9, fp, r7
 80096e4:	4457      	add	r7, sl
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80096ec:	f84e 3b04 	str.w	r3, [lr], #4
 80096f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096f8:	f8be 3000 	ldrh.w	r3, [lr]
 80096fc:	fb09 330a 	mla	r3, r9, sl, r3
 8009700:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009704:	4562      	cmp	r2, ip
 8009706:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800970a:	d8e5      	bhi.n	80096d8 <__multiply+0x10c>
 800970c:	9f01      	ldr	r7, [sp, #4]
 800970e:	51eb      	str	r3, [r5, r7]
 8009710:	3504      	adds	r5, #4
 8009712:	e799      	b.n	8009648 <__multiply+0x7c>
 8009714:	3e01      	subs	r6, #1
 8009716:	e79b      	b.n	8009650 <__multiply+0x84>
 8009718:	0800a795 	.word	0x0800a795
 800971c:	0800a7a6 	.word	0x0800a7a6

08009720 <__pow5mult>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	4615      	mov	r5, r2
 8009726:	f012 0203 	ands.w	r2, r2, #3
 800972a:	4607      	mov	r7, r0
 800972c:	460e      	mov	r6, r1
 800972e:	d007      	beq.n	8009740 <__pow5mult+0x20>
 8009730:	4c25      	ldr	r4, [pc, #148]	@ (80097c8 <__pow5mult+0xa8>)
 8009732:	3a01      	subs	r2, #1
 8009734:	2300      	movs	r3, #0
 8009736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800973a:	f7ff fe9f 	bl	800947c <__multadd>
 800973e:	4606      	mov	r6, r0
 8009740:	10ad      	asrs	r5, r5, #2
 8009742:	d03d      	beq.n	80097c0 <__pow5mult+0xa0>
 8009744:	69fc      	ldr	r4, [r7, #28]
 8009746:	b97c      	cbnz	r4, 8009768 <__pow5mult+0x48>
 8009748:	2010      	movs	r0, #16
 800974a:	f7ff fe2d 	bl	80093a8 <malloc>
 800974e:	4602      	mov	r2, r0
 8009750:	61f8      	str	r0, [r7, #28]
 8009752:	b928      	cbnz	r0, 8009760 <__pow5mult+0x40>
 8009754:	4b1d      	ldr	r3, [pc, #116]	@ (80097cc <__pow5mult+0xac>)
 8009756:	481e      	ldr	r0, [pc, #120]	@ (80097d0 <__pow5mult+0xb0>)
 8009758:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800975c:	f000 f9fa 	bl	8009b54 <__assert_func>
 8009760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009764:	6004      	str	r4, [r0, #0]
 8009766:	60c4      	str	r4, [r0, #12]
 8009768:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800976c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009770:	b94c      	cbnz	r4, 8009786 <__pow5mult+0x66>
 8009772:	f240 2171 	movw	r1, #625	@ 0x271
 8009776:	4638      	mov	r0, r7
 8009778:	f7ff ff12 	bl	80095a0 <__i2b>
 800977c:	2300      	movs	r3, #0
 800977e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009782:	4604      	mov	r4, r0
 8009784:	6003      	str	r3, [r0, #0]
 8009786:	f04f 0900 	mov.w	r9, #0
 800978a:	07eb      	lsls	r3, r5, #31
 800978c:	d50a      	bpl.n	80097a4 <__pow5mult+0x84>
 800978e:	4631      	mov	r1, r6
 8009790:	4622      	mov	r2, r4
 8009792:	4638      	mov	r0, r7
 8009794:	f7ff ff1a 	bl	80095cc <__multiply>
 8009798:	4631      	mov	r1, r6
 800979a:	4680      	mov	r8, r0
 800979c:	4638      	mov	r0, r7
 800979e:	f7ff fe4b 	bl	8009438 <_Bfree>
 80097a2:	4646      	mov	r6, r8
 80097a4:	106d      	asrs	r5, r5, #1
 80097a6:	d00b      	beq.n	80097c0 <__pow5mult+0xa0>
 80097a8:	6820      	ldr	r0, [r4, #0]
 80097aa:	b938      	cbnz	r0, 80097bc <__pow5mult+0x9c>
 80097ac:	4622      	mov	r2, r4
 80097ae:	4621      	mov	r1, r4
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff ff0b 	bl	80095cc <__multiply>
 80097b6:	6020      	str	r0, [r4, #0]
 80097b8:	f8c0 9000 	str.w	r9, [r0]
 80097bc:	4604      	mov	r4, r0
 80097be:	e7e4      	b.n	800978a <__pow5mult+0x6a>
 80097c0:	4630      	mov	r0, r6
 80097c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097c6:	bf00      	nop
 80097c8:	0800a800 	.word	0x0800a800
 80097cc:	0800a726 	.word	0x0800a726
 80097d0:	0800a7a6 	.word	0x0800a7a6

080097d4 <__lshift>:
 80097d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d8:	460c      	mov	r4, r1
 80097da:	6849      	ldr	r1, [r1, #4]
 80097dc:	6923      	ldr	r3, [r4, #16]
 80097de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097e2:	68a3      	ldr	r3, [r4, #8]
 80097e4:	4607      	mov	r7, r0
 80097e6:	4691      	mov	r9, r2
 80097e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097ec:	f108 0601 	add.w	r6, r8, #1
 80097f0:	42b3      	cmp	r3, r6
 80097f2:	db0b      	blt.n	800980c <__lshift+0x38>
 80097f4:	4638      	mov	r0, r7
 80097f6:	f7ff fddf 	bl	80093b8 <_Balloc>
 80097fa:	4605      	mov	r5, r0
 80097fc:	b948      	cbnz	r0, 8009812 <__lshift+0x3e>
 80097fe:	4602      	mov	r2, r0
 8009800:	4b28      	ldr	r3, [pc, #160]	@ (80098a4 <__lshift+0xd0>)
 8009802:	4829      	ldr	r0, [pc, #164]	@ (80098a8 <__lshift+0xd4>)
 8009804:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009808:	f000 f9a4 	bl	8009b54 <__assert_func>
 800980c:	3101      	adds	r1, #1
 800980e:	005b      	lsls	r3, r3, #1
 8009810:	e7ee      	b.n	80097f0 <__lshift+0x1c>
 8009812:	2300      	movs	r3, #0
 8009814:	f100 0114 	add.w	r1, r0, #20
 8009818:	f100 0210 	add.w	r2, r0, #16
 800981c:	4618      	mov	r0, r3
 800981e:	4553      	cmp	r3, sl
 8009820:	db33      	blt.n	800988a <__lshift+0xb6>
 8009822:	6920      	ldr	r0, [r4, #16]
 8009824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009828:	f104 0314 	add.w	r3, r4, #20
 800982c:	f019 091f 	ands.w	r9, r9, #31
 8009830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009834:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009838:	d02b      	beq.n	8009892 <__lshift+0xbe>
 800983a:	f1c9 0e20 	rsb	lr, r9, #32
 800983e:	468a      	mov	sl, r1
 8009840:	2200      	movs	r2, #0
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	fa00 f009 	lsl.w	r0, r0, r9
 8009848:	4310      	orrs	r0, r2
 800984a:	f84a 0b04 	str.w	r0, [sl], #4
 800984e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009852:	459c      	cmp	ip, r3
 8009854:	fa22 f20e 	lsr.w	r2, r2, lr
 8009858:	d8f3      	bhi.n	8009842 <__lshift+0x6e>
 800985a:	ebac 0304 	sub.w	r3, ip, r4
 800985e:	3b15      	subs	r3, #21
 8009860:	f023 0303 	bic.w	r3, r3, #3
 8009864:	3304      	adds	r3, #4
 8009866:	f104 0015 	add.w	r0, r4, #21
 800986a:	4584      	cmp	ip, r0
 800986c:	bf38      	it	cc
 800986e:	2304      	movcc	r3, #4
 8009870:	50ca      	str	r2, [r1, r3]
 8009872:	b10a      	cbz	r2, 8009878 <__lshift+0xa4>
 8009874:	f108 0602 	add.w	r6, r8, #2
 8009878:	3e01      	subs	r6, #1
 800987a:	4638      	mov	r0, r7
 800987c:	612e      	str	r6, [r5, #16]
 800987e:	4621      	mov	r1, r4
 8009880:	f7ff fdda 	bl	8009438 <_Bfree>
 8009884:	4628      	mov	r0, r5
 8009886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988a:	f842 0f04 	str.w	r0, [r2, #4]!
 800988e:	3301      	adds	r3, #1
 8009890:	e7c5      	b.n	800981e <__lshift+0x4a>
 8009892:	3904      	subs	r1, #4
 8009894:	f853 2b04 	ldr.w	r2, [r3], #4
 8009898:	f841 2f04 	str.w	r2, [r1, #4]!
 800989c:	459c      	cmp	ip, r3
 800989e:	d8f9      	bhi.n	8009894 <__lshift+0xc0>
 80098a0:	e7ea      	b.n	8009878 <__lshift+0xa4>
 80098a2:	bf00      	nop
 80098a4:	0800a795 	.word	0x0800a795
 80098a8:	0800a7a6 	.word	0x0800a7a6

080098ac <__mcmp>:
 80098ac:	690a      	ldr	r2, [r1, #16]
 80098ae:	4603      	mov	r3, r0
 80098b0:	6900      	ldr	r0, [r0, #16]
 80098b2:	1a80      	subs	r0, r0, r2
 80098b4:	b530      	push	{r4, r5, lr}
 80098b6:	d10e      	bne.n	80098d6 <__mcmp+0x2a>
 80098b8:	3314      	adds	r3, #20
 80098ba:	3114      	adds	r1, #20
 80098bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80098c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80098c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098cc:	4295      	cmp	r5, r2
 80098ce:	d003      	beq.n	80098d8 <__mcmp+0x2c>
 80098d0:	d205      	bcs.n	80098de <__mcmp+0x32>
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098d6:	bd30      	pop	{r4, r5, pc}
 80098d8:	42a3      	cmp	r3, r4
 80098da:	d3f3      	bcc.n	80098c4 <__mcmp+0x18>
 80098dc:	e7fb      	b.n	80098d6 <__mcmp+0x2a>
 80098de:	2001      	movs	r0, #1
 80098e0:	e7f9      	b.n	80098d6 <__mcmp+0x2a>
	...

080098e4 <__mdiff>:
 80098e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e8:	4689      	mov	r9, r1
 80098ea:	4606      	mov	r6, r0
 80098ec:	4611      	mov	r1, r2
 80098ee:	4648      	mov	r0, r9
 80098f0:	4614      	mov	r4, r2
 80098f2:	f7ff ffdb 	bl	80098ac <__mcmp>
 80098f6:	1e05      	subs	r5, r0, #0
 80098f8:	d112      	bne.n	8009920 <__mdiff+0x3c>
 80098fa:	4629      	mov	r1, r5
 80098fc:	4630      	mov	r0, r6
 80098fe:	f7ff fd5b 	bl	80093b8 <_Balloc>
 8009902:	4602      	mov	r2, r0
 8009904:	b928      	cbnz	r0, 8009912 <__mdiff+0x2e>
 8009906:	4b3f      	ldr	r3, [pc, #252]	@ (8009a04 <__mdiff+0x120>)
 8009908:	f240 2137 	movw	r1, #567	@ 0x237
 800990c:	483e      	ldr	r0, [pc, #248]	@ (8009a08 <__mdiff+0x124>)
 800990e:	f000 f921 	bl	8009b54 <__assert_func>
 8009912:	2301      	movs	r3, #1
 8009914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009918:	4610      	mov	r0, r2
 800991a:	b003      	add	sp, #12
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009920:	bfbc      	itt	lt
 8009922:	464b      	movlt	r3, r9
 8009924:	46a1      	movlt	r9, r4
 8009926:	4630      	mov	r0, r6
 8009928:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800992c:	bfba      	itte	lt
 800992e:	461c      	movlt	r4, r3
 8009930:	2501      	movlt	r5, #1
 8009932:	2500      	movge	r5, #0
 8009934:	f7ff fd40 	bl	80093b8 <_Balloc>
 8009938:	4602      	mov	r2, r0
 800993a:	b918      	cbnz	r0, 8009944 <__mdiff+0x60>
 800993c:	4b31      	ldr	r3, [pc, #196]	@ (8009a04 <__mdiff+0x120>)
 800993e:	f240 2145 	movw	r1, #581	@ 0x245
 8009942:	e7e3      	b.n	800990c <__mdiff+0x28>
 8009944:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009948:	6926      	ldr	r6, [r4, #16]
 800994a:	60c5      	str	r5, [r0, #12]
 800994c:	f109 0310 	add.w	r3, r9, #16
 8009950:	f109 0514 	add.w	r5, r9, #20
 8009954:	f104 0e14 	add.w	lr, r4, #20
 8009958:	f100 0b14 	add.w	fp, r0, #20
 800995c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009960:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009964:	9301      	str	r3, [sp, #4]
 8009966:	46d9      	mov	r9, fp
 8009968:	f04f 0c00 	mov.w	ip, #0
 800996c:	9b01      	ldr	r3, [sp, #4]
 800996e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009972:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	fa1f f38a 	uxth.w	r3, sl
 800997c:	4619      	mov	r1, r3
 800997e:	b283      	uxth	r3, r0
 8009980:	1acb      	subs	r3, r1, r3
 8009982:	0c00      	lsrs	r0, r0, #16
 8009984:	4463      	add	r3, ip
 8009986:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800998a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800998e:	b29b      	uxth	r3, r3
 8009990:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009994:	4576      	cmp	r6, lr
 8009996:	f849 3b04 	str.w	r3, [r9], #4
 800999a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800999e:	d8e5      	bhi.n	800996c <__mdiff+0x88>
 80099a0:	1b33      	subs	r3, r6, r4
 80099a2:	3b15      	subs	r3, #21
 80099a4:	f023 0303 	bic.w	r3, r3, #3
 80099a8:	3415      	adds	r4, #21
 80099aa:	3304      	adds	r3, #4
 80099ac:	42a6      	cmp	r6, r4
 80099ae:	bf38      	it	cc
 80099b0:	2304      	movcc	r3, #4
 80099b2:	441d      	add	r5, r3
 80099b4:	445b      	add	r3, fp
 80099b6:	461e      	mov	r6, r3
 80099b8:	462c      	mov	r4, r5
 80099ba:	4544      	cmp	r4, r8
 80099bc:	d30e      	bcc.n	80099dc <__mdiff+0xf8>
 80099be:	f108 0103 	add.w	r1, r8, #3
 80099c2:	1b49      	subs	r1, r1, r5
 80099c4:	f021 0103 	bic.w	r1, r1, #3
 80099c8:	3d03      	subs	r5, #3
 80099ca:	45a8      	cmp	r8, r5
 80099cc:	bf38      	it	cc
 80099ce:	2100      	movcc	r1, #0
 80099d0:	440b      	add	r3, r1
 80099d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099d6:	b191      	cbz	r1, 80099fe <__mdiff+0x11a>
 80099d8:	6117      	str	r7, [r2, #16]
 80099da:	e79d      	b.n	8009918 <__mdiff+0x34>
 80099dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80099e0:	46e6      	mov	lr, ip
 80099e2:	0c08      	lsrs	r0, r1, #16
 80099e4:	fa1c fc81 	uxtah	ip, ip, r1
 80099e8:	4471      	add	r1, lr
 80099ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099ee:	b289      	uxth	r1, r1
 80099f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099f4:	f846 1b04 	str.w	r1, [r6], #4
 80099f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099fc:	e7dd      	b.n	80099ba <__mdiff+0xd6>
 80099fe:	3f01      	subs	r7, #1
 8009a00:	e7e7      	b.n	80099d2 <__mdiff+0xee>
 8009a02:	bf00      	nop
 8009a04:	0800a795 	.word	0x0800a795
 8009a08:	0800a7a6 	.word	0x0800a7a6

08009a0c <__d2b>:
 8009a0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a10:	460f      	mov	r7, r1
 8009a12:	2101      	movs	r1, #1
 8009a14:	ec59 8b10 	vmov	r8, r9, d0
 8009a18:	4616      	mov	r6, r2
 8009a1a:	f7ff fccd 	bl	80093b8 <_Balloc>
 8009a1e:	4604      	mov	r4, r0
 8009a20:	b930      	cbnz	r0, 8009a30 <__d2b+0x24>
 8009a22:	4602      	mov	r2, r0
 8009a24:	4b23      	ldr	r3, [pc, #140]	@ (8009ab4 <__d2b+0xa8>)
 8009a26:	4824      	ldr	r0, [pc, #144]	@ (8009ab8 <__d2b+0xac>)
 8009a28:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a2c:	f000 f892 	bl	8009b54 <__assert_func>
 8009a30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a38:	b10d      	cbz	r5, 8009a3e <__d2b+0x32>
 8009a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	f1b8 0300 	subs.w	r3, r8, #0
 8009a44:	d023      	beq.n	8009a8e <__d2b+0x82>
 8009a46:	4668      	mov	r0, sp
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	f7ff fd7c 	bl	8009546 <__lo0bits>
 8009a4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a52:	b1d0      	cbz	r0, 8009a8a <__d2b+0x7e>
 8009a54:	f1c0 0320 	rsb	r3, r0, #32
 8009a58:	fa02 f303 	lsl.w	r3, r2, r3
 8009a5c:	430b      	orrs	r3, r1
 8009a5e:	40c2      	lsrs	r2, r0
 8009a60:	6163      	str	r3, [r4, #20]
 8009a62:	9201      	str	r2, [sp, #4]
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	61a3      	str	r3, [r4, #24]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	bf0c      	ite	eq
 8009a6c:	2201      	moveq	r2, #1
 8009a6e:	2202      	movne	r2, #2
 8009a70:	6122      	str	r2, [r4, #16]
 8009a72:	b1a5      	cbz	r5, 8009a9e <__d2b+0x92>
 8009a74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a78:	4405      	add	r5, r0
 8009a7a:	603d      	str	r5, [r7, #0]
 8009a7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a80:	6030      	str	r0, [r6, #0]
 8009a82:	4620      	mov	r0, r4
 8009a84:	b003      	add	sp, #12
 8009a86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a8a:	6161      	str	r1, [r4, #20]
 8009a8c:	e7ea      	b.n	8009a64 <__d2b+0x58>
 8009a8e:	a801      	add	r0, sp, #4
 8009a90:	f7ff fd59 	bl	8009546 <__lo0bits>
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	6163      	str	r3, [r4, #20]
 8009a98:	3020      	adds	r0, #32
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	e7e8      	b.n	8009a70 <__d2b+0x64>
 8009a9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009aa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009aa6:	6038      	str	r0, [r7, #0]
 8009aa8:	6918      	ldr	r0, [r3, #16]
 8009aaa:	f7ff fd2d 	bl	8009508 <__hi0bits>
 8009aae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ab2:	e7e5      	b.n	8009a80 <__d2b+0x74>
 8009ab4:	0800a795 	.word	0x0800a795
 8009ab8:	0800a7a6 	.word	0x0800a7a6

08009abc <_mprec_log10>:
 8009abc:	2817      	cmp	r0, #23
 8009abe:	b5d0      	push	{r4, r6, r7, lr}
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	dc07      	bgt.n	8009ad4 <_mprec_log10+0x18>
 8009ac4:	4b09      	ldr	r3, [pc, #36]	@ (8009aec <_mprec_log10+0x30>)
 8009ac6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8009aca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009ace:	ec41 0b10 	vmov	d0, r0, r1
 8009ad2:	bdd0      	pop	{r4, r6, r7, pc}
 8009ad4:	4906      	ldr	r1, [pc, #24]	@ (8009af0 <_mprec_log10+0x34>)
 8009ad6:	4f07      	ldr	r7, [pc, #28]	@ (8009af4 <_mprec_log10+0x38>)
 8009ad8:	2000      	movs	r0, #0
 8009ada:	2600      	movs	r6, #0
 8009adc:	4632      	mov	r2, r6
 8009ade:	463b      	mov	r3, r7
 8009ae0:	f7f6 fd82 	bl	80005e8 <__aeabi_dmul>
 8009ae4:	3c01      	subs	r4, #1
 8009ae6:	d1f9      	bne.n	8009adc <_mprec_log10+0x20>
 8009ae8:	e7f1      	b.n	8009ace <_mprec_log10+0x12>
 8009aea:	bf00      	nop
 8009aec:	0800a838 	.word	0x0800a838
 8009af0:	3ff00000 	.word	0x3ff00000
 8009af4:	40240000 	.word	0x40240000

08009af8 <_realloc_r>:
 8009af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009afc:	4680      	mov	r8, r0
 8009afe:	4615      	mov	r5, r2
 8009b00:	460c      	mov	r4, r1
 8009b02:	b921      	cbnz	r1, 8009b0e <_realloc_r+0x16>
 8009b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b08:	4611      	mov	r1, r2
 8009b0a:	f7fe b87b 	b.w	8007c04 <_malloc_r>
 8009b0e:	b92a      	cbnz	r2, 8009b1c <_realloc_r+0x24>
 8009b10:	f7fe f80c 	bl	8007b2c <_free_r>
 8009b14:	2400      	movs	r4, #0
 8009b16:	4620      	mov	r0, r4
 8009b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b1c:	f000 f84c 	bl	8009bb8 <_malloc_usable_size_r>
 8009b20:	4285      	cmp	r5, r0
 8009b22:	4606      	mov	r6, r0
 8009b24:	d802      	bhi.n	8009b2c <_realloc_r+0x34>
 8009b26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b2a:	d8f4      	bhi.n	8009b16 <_realloc_r+0x1e>
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	4640      	mov	r0, r8
 8009b30:	f7fe f868 	bl	8007c04 <_malloc_r>
 8009b34:	4607      	mov	r7, r0
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d0ec      	beq.n	8009b14 <_realloc_r+0x1c>
 8009b3a:	42b5      	cmp	r5, r6
 8009b3c:	462a      	mov	r2, r5
 8009b3e:	4621      	mov	r1, r4
 8009b40:	bf28      	it	cs
 8009b42:	4632      	movcs	r2, r6
 8009b44:	f7fd ffe3 	bl	8007b0e <memcpy>
 8009b48:	4621      	mov	r1, r4
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	f7fd ffee 	bl	8007b2c <_free_r>
 8009b50:	463c      	mov	r4, r7
 8009b52:	e7e0      	b.n	8009b16 <_realloc_r+0x1e>

08009b54 <__assert_func>:
 8009b54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b56:	4614      	mov	r4, r2
 8009b58:	461a      	mov	r2, r3
 8009b5a:	4b09      	ldr	r3, [pc, #36]	@ (8009b80 <__assert_func+0x2c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4605      	mov	r5, r0
 8009b60:	68d8      	ldr	r0, [r3, #12]
 8009b62:	b954      	cbnz	r4, 8009b7a <__assert_func+0x26>
 8009b64:	4b07      	ldr	r3, [pc, #28]	@ (8009b84 <__assert_func+0x30>)
 8009b66:	461c      	mov	r4, r3
 8009b68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b6c:	9100      	str	r1, [sp, #0]
 8009b6e:	462b      	mov	r3, r5
 8009b70:	4905      	ldr	r1, [pc, #20]	@ (8009b88 <__assert_func+0x34>)
 8009b72:	f000 f829 	bl	8009bc8 <fiprintf>
 8009b76:	f000 f839 	bl	8009bec <abort>
 8009b7a:	4b04      	ldr	r3, [pc, #16]	@ (8009b8c <__assert_func+0x38>)
 8009b7c:	e7f4      	b.n	8009b68 <__assert_func+0x14>
 8009b7e:	bf00      	nop
 8009b80:	20000238 	.word	0x20000238
 8009b84:	0800a93b 	.word	0x0800a93b
 8009b88:	0800a90d 	.word	0x0800a90d
 8009b8c:	0800a900 	.word	0x0800a900

08009b90 <_calloc_r>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	fba1 5402 	umull	r5, r4, r1, r2
 8009b96:	b93c      	cbnz	r4, 8009ba8 <_calloc_r+0x18>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	f7fe f833 	bl	8007c04 <_malloc_r>
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	b928      	cbnz	r0, 8009bae <_calloc_r+0x1e>
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	220c      	movs	r2, #12
 8009baa:	6002      	str	r2, [r0, #0]
 8009bac:	e7f9      	b.n	8009ba2 <_calloc_r+0x12>
 8009bae:	462a      	mov	r2, r5
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	f7fd ff31 	bl	8007a18 <memset>
 8009bb6:	e7f5      	b.n	8009ba4 <_calloc_r+0x14>

08009bb8 <_malloc_usable_size_r>:
 8009bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bbc:	1f18      	subs	r0, r3, #4
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bfbc      	itt	lt
 8009bc2:	580b      	ldrlt	r3, [r1, r0]
 8009bc4:	18c0      	addlt	r0, r0, r3
 8009bc6:	4770      	bx	lr

08009bc8 <fiprintf>:
 8009bc8:	b40e      	push	{r1, r2, r3}
 8009bca:	b503      	push	{r0, r1, lr}
 8009bcc:	4601      	mov	r1, r0
 8009bce:	ab03      	add	r3, sp, #12
 8009bd0:	4805      	ldr	r0, [pc, #20]	@ (8009be8 <fiprintf+0x20>)
 8009bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bd6:	6800      	ldr	r0, [r0, #0]
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	f000 f837 	bl	8009c4c <_vfiprintf_r>
 8009bde:	b002      	add	sp, #8
 8009be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009be4:	b003      	add	sp, #12
 8009be6:	4770      	bx	lr
 8009be8:	20000238 	.word	0x20000238

08009bec <abort>:
 8009bec:	b508      	push	{r3, lr}
 8009bee:	2006      	movs	r0, #6
 8009bf0:	f000 fa00 	bl	8009ff4 <raise>
 8009bf4:	2001      	movs	r0, #1
 8009bf6:	f7f9 f8db 	bl	8002db0 <_exit>

08009bfa <__sfputc_r>:
 8009bfa:	6893      	ldr	r3, [r2, #8]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	b410      	push	{r4}
 8009c02:	6093      	str	r3, [r2, #8]
 8009c04:	da08      	bge.n	8009c18 <__sfputc_r+0x1e>
 8009c06:	6994      	ldr	r4, [r2, #24]
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	db01      	blt.n	8009c10 <__sfputc_r+0x16>
 8009c0c:	290a      	cmp	r1, #10
 8009c0e:	d103      	bne.n	8009c18 <__sfputc_r+0x1e>
 8009c10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c14:	f000 b932 	b.w	8009e7c <__swbuf_r>
 8009c18:	6813      	ldr	r3, [r2, #0]
 8009c1a:	1c58      	adds	r0, r3, #1
 8009c1c:	6010      	str	r0, [r2, #0]
 8009c1e:	7019      	strb	r1, [r3, #0]
 8009c20:	4608      	mov	r0, r1
 8009c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c26:	4770      	bx	lr

08009c28 <__sfputs_r>:
 8009c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	460f      	mov	r7, r1
 8009c2e:	4614      	mov	r4, r2
 8009c30:	18d5      	adds	r5, r2, r3
 8009c32:	42ac      	cmp	r4, r5
 8009c34:	d101      	bne.n	8009c3a <__sfputs_r+0x12>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e007      	b.n	8009c4a <__sfputs_r+0x22>
 8009c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3e:	463a      	mov	r2, r7
 8009c40:	4630      	mov	r0, r6
 8009c42:	f7ff ffda 	bl	8009bfa <__sfputc_r>
 8009c46:	1c43      	adds	r3, r0, #1
 8009c48:	d1f3      	bne.n	8009c32 <__sfputs_r+0xa>
 8009c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c4c <_vfiprintf_r>:
 8009c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	460d      	mov	r5, r1
 8009c52:	b09d      	sub	sp, #116	@ 0x74
 8009c54:	4614      	mov	r4, r2
 8009c56:	4698      	mov	r8, r3
 8009c58:	4606      	mov	r6, r0
 8009c5a:	b118      	cbz	r0, 8009c64 <_vfiprintf_r+0x18>
 8009c5c:	6a03      	ldr	r3, [r0, #32]
 8009c5e:	b90b      	cbnz	r3, 8009c64 <_vfiprintf_r+0x18>
 8009c60:	f7fd fe40 	bl	80078e4 <__sinit>
 8009c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c66:	07d9      	lsls	r1, r3, #31
 8009c68:	d405      	bmi.n	8009c76 <_vfiprintf_r+0x2a>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	059a      	lsls	r2, r3, #22
 8009c6e:	d402      	bmi.n	8009c76 <_vfiprintf_r+0x2a>
 8009c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c72:	f7fd ff4a 	bl	8007b0a <__retarget_lock_acquire_recursive>
 8009c76:	89ab      	ldrh	r3, [r5, #12]
 8009c78:	071b      	lsls	r3, r3, #28
 8009c7a:	d501      	bpl.n	8009c80 <_vfiprintf_r+0x34>
 8009c7c:	692b      	ldr	r3, [r5, #16]
 8009c7e:	b99b      	cbnz	r3, 8009ca8 <_vfiprintf_r+0x5c>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4630      	mov	r0, r6
 8009c84:	f000 f938 	bl	8009ef8 <__swsetup_r>
 8009c88:	b170      	cbz	r0, 8009ca8 <_vfiprintf_r+0x5c>
 8009c8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c8c:	07dc      	lsls	r4, r3, #31
 8009c8e:	d504      	bpl.n	8009c9a <_vfiprintf_r+0x4e>
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c94:	b01d      	add	sp, #116	@ 0x74
 8009c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9a:	89ab      	ldrh	r3, [r5, #12]
 8009c9c:	0598      	lsls	r0, r3, #22
 8009c9e:	d4f7      	bmi.n	8009c90 <_vfiprintf_r+0x44>
 8009ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ca2:	f7fd ff33 	bl	8007b0c <__retarget_lock_release_recursive>
 8009ca6:	e7f3      	b.n	8009c90 <_vfiprintf_r+0x44>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cac:	2320      	movs	r3, #32
 8009cae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cb6:	2330      	movs	r3, #48	@ 0x30
 8009cb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e68 <_vfiprintf_r+0x21c>
 8009cbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cc0:	f04f 0901 	mov.w	r9, #1
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	469a      	mov	sl, r3
 8009cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ccc:	b10a      	cbz	r2, 8009cd2 <_vfiprintf_r+0x86>
 8009cce:	2a25      	cmp	r2, #37	@ 0x25
 8009cd0:	d1f9      	bne.n	8009cc6 <_vfiprintf_r+0x7a>
 8009cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8009cd6:	d00b      	beq.n	8009cf0 <_vfiprintf_r+0xa4>
 8009cd8:	465b      	mov	r3, fp
 8009cda:	4622      	mov	r2, r4
 8009cdc:	4629      	mov	r1, r5
 8009cde:	4630      	mov	r0, r6
 8009ce0:	f7ff ffa2 	bl	8009c28 <__sfputs_r>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f000 80a7 	beq.w	8009e38 <_vfiprintf_r+0x1ec>
 8009cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cec:	445a      	add	r2, fp
 8009cee:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 809f 	beq.w	8009e38 <_vfiprintf_r+0x1ec>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d04:	f10a 0a01 	add.w	sl, sl, #1
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	9307      	str	r3, [sp, #28]
 8009d0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d12:	4654      	mov	r4, sl
 8009d14:	2205      	movs	r2, #5
 8009d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d1a:	4853      	ldr	r0, [pc, #332]	@ (8009e68 <_vfiprintf_r+0x21c>)
 8009d1c:	f7f6 fa58 	bl	80001d0 <memchr>
 8009d20:	9a04      	ldr	r2, [sp, #16]
 8009d22:	b9d8      	cbnz	r0, 8009d5c <_vfiprintf_r+0x110>
 8009d24:	06d1      	lsls	r1, r2, #27
 8009d26:	bf44      	itt	mi
 8009d28:	2320      	movmi	r3, #32
 8009d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d2e:	0713      	lsls	r3, r2, #28
 8009d30:	bf44      	itt	mi
 8009d32:	232b      	movmi	r3, #43	@ 0x2b
 8009d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d38:	f89a 3000 	ldrb.w	r3, [sl]
 8009d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d3e:	d015      	beq.n	8009d6c <_vfiprintf_r+0x120>
 8009d40:	9a07      	ldr	r2, [sp, #28]
 8009d42:	4654      	mov	r4, sl
 8009d44:	2000      	movs	r0, #0
 8009d46:	f04f 0c0a 	mov.w	ip, #10
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d50:	3b30      	subs	r3, #48	@ 0x30
 8009d52:	2b09      	cmp	r3, #9
 8009d54:	d94b      	bls.n	8009dee <_vfiprintf_r+0x1a2>
 8009d56:	b1b0      	cbz	r0, 8009d86 <_vfiprintf_r+0x13a>
 8009d58:	9207      	str	r2, [sp, #28]
 8009d5a:	e014      	b.n	8009d86 <_vfiprintf_r+0x13a>
 8009d5c:	eba0 0308 	sub.w	r3, r0, r8
 8009d60:	fa09 f303 	lsl.w	r3, r9, r3
 8009d64:	4313      	orrs	r3, r2
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	46a2      	mov	sl, r4
 8009d6a:	e7d2      	b.n	8009d12 <_vfiprintf_r+0xc6>
 8009d6c:	9b03      	ldr	r3, [sp, #12]
 8009d6e:	1d19      	adds	r1, r3, #4
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	9103      	str	r1, [sp, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bfbb      	ittet	lt
 8009d78:	425b      	neglt	r3, r3
 8009d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d7e:	9307      	strge	r3, [sp, #28]
 8009d80:	9307      	strlt	r3, [sp, #28]
 8009d82:	bfb8      	it	lt
 8009d84:	9204      	strlt	r2, [sp, #16]
 8009d86:	7823      	ldrb	r3, [r4, #0]
 8009d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d8a:	d10a      	bne.n	8009da2 <_vfiprintf_r+0x156>
 8009d8c:	7863      	ldrb	r3, [r4, #1]
 8009d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d90:	d132      	bne.n	8009df8 <_vfiprintf_r+0x1ac>
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	1d1a      	adds	r2, r3, #4
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	9203      	str	r2, [sp, #12]
 8009d9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d9e:	3402      	adds	r4, #2
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e78 <_vfiprintf_r+0x22c>
 8009da6:	7821      	ldrb	r1, [r4, #0]
 8009da8:	2203      	movs	r2, #3
 8009daa:	4650      	mov	r0, sl
 8009dac:	f7f6 fa10 	bl	80001d0 <memchr>
 8009db0:	b138      	cbz	r0, 8009dc2 <_vfiprintf_r+0x176>
 8009db2:	9b04      	ldr	r3, [sp, #16]
 8009db4:	eba0 000a 	sub.w	r0, r0, sl
 8009db8:	2240      	movs	r2, #64	@ 0x40
 8009dba:	4082      	lsls	r2, r0
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	3401      	adds	r4, #1
 8009dc0:	9304      	str	r3, [sp, #16]
 8009dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc6:	4829      	ldr	r0, [pc, #164]	@ (8009e6c <_vfiprintf_r+0x220>)
 8009dc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dcc:	2206      	movs	r2, #6
 8009dce:	f7f6 f9ff 	bl	80001d0 <memchr>
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d03f      	beq.n	8009e56 <_vfiprintf_r+0x20a>
 8009dd6:	4b26      	ldr	r3, [pc, #152]	@ (8009e70 <_vfiprintf_r+0x224>)
 8009dd8:	bb1b      	cbnz	r3, 8009e22 <_vfiprintf_r+0x1d6>
 8009dda:	9b03      	ldr	r3, [sp, #12]
 8009ddc:	3307      	adds	r3, #7
 8009dde:	f023 0307 	bic.w	r3, r3, #7
 8009de2:	3308      	adds	r3, #8
 8009de4:	9303      	str	r3, [sp, #12]
 8009de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009de8:	443b      	add	r3, r7
 8009dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dec:	e76a      	b.n	8009cc4 <_vfiprintf_r+0x78>
 8009dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8009df2:	460c      	mov	r4, r1
 8009df4:	2001      	movs	r0, #1
 8009df6:	e7a8      	b.n	8009d4a <_vfiprintf_r+0xfe>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	3401      	adds	r4, #1
 8009dfc:	9305      	str	r3, [sp, #20]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	f04f 0c0a 	mov.w	ip, #10
 8009e04:	4620      	mov	r0, r4
 8009e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e0a:	3a30      	subs	r2, #48	@ 0x30
 8009e0c:	2a09      	cmp	r2, #9
 8009e0e:	d903      	bls.n	8009e18 <_vfiprintf_r+0x1cc>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d0c6      	beq.n	8009da2 <_vfiprintf_r+0x156>
 8009e14:	9105      	str	r1, [sp, #20]
 8009e16:	e7c4      	b.n	8009da2 <_vfiprintf_r+0x156>
 8009e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e1c:	4604      	mov	r4, r0
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e7f0      	b.n	8009e04 <_vfiprintf_r+0x1b8>
 8009e22:	ab03      	add	r3, sp, #12
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	462a      	mov	r2, r5
 8009e28:	4b12      	ldr	r3, [pc, #72]	@ (8009e74 <_vfiprintf_r+0x228>)
 8009e2a:	a904      	add	r1, sp, #16
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f3af 8000 	nop.w
 8009e32:	4607      	mov	r7, r0
 8009e34:	1c78      	adds	r0, r7, #1
 8009e36:	d1d6      	bne.n	8009de6 <_vfiprintf_r+0x19a>
 8009e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e3a:	07d9      	lsls	r1, r3, #31
 8009e3c:	d405      	bmi.n	8009e4a <_vfiprintf_r+0x1fe>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	059a      	lsls	r2, r3, #22
 8009e42:	d402      	bmi.n	8009e4a <_vfiprintf_r+0x1fe>
 8009e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e46:	f7fd fe61 	bl	8007b0c <__retarget_lock_release_recursive>
 8009e4a:	89ab      	ldrh	r3, [r5, #12]
 8009e4c:	065b      	lsls	r3, r3, #25
 8009e4e:	f53f af1f 	bmi.w	8009c90 <_vfiprintf_r+0x44>
 8009e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e54:	e71e      	b.n	8009c94 <_vfiprintf_r+0x48>
 8009e56:	ab03      	add	r3, sp, #12
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	462a      	mov	r2, r5
 8009e5c:	4b05      	ldr	r3, [pc, #20]	@ (8009e74 <_vfiprintf_r+0x228>)
 8009e5e:	a904      	add	r1, sp, #16
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7fe fa57 	bl	8008314 <_printf_i>
 8009e66:	e7e4      	b.n	8009e32 <_vfiprintf_r+0x1e6>
 8009e68:	0800a6e4 	.word	0x0800a6e4
 8009e6c:	0800a6ee 	.word	0x0800a6ee
 8009e70:	00000000 	.word	0x00000000
 8009e74:	08009c29 	.word	0x08009c29
 8009e78:	0800a6ea 	.word	0x0800a6ea

08009e7c <__swbuf_r>:
 8009e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7e:	460e      	mov	r6, r1
 8009e80:	4614      	mov	r4, r2
 8009e82:	4605      	mov	r5, r0
 8009e84:	b118      	cbz	r0, 8009e8e <__swbuf_r+0x12>
 8009e86:	6a03      	ldr	r3, [r0, #32]
 8009e88:	b90b      	cbnz	r3, 8009e8e <__swbuf_r+0x12>
 8009e8a:	f7fd fd2b 	bl	80078e4 <__sinit>
 8009e8e:	69a3      	ldr	r3, [r4, #24]
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	89a3      	ldrh	r3, [r4, #12]
 8009e94:	071a      	lsls	r2, r3, #28
 8009e96:	d501      	bpl.n	8009e9c <__swbuf_r+0x20>
 8009e98:	6923      	ldr	r3, [r4, #16]
 8009e9a:	b943      	cbnz	r3, 8009eae <__swbuf_r+0x32>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f000 f82a 	bl	8009ef8 <__swsetup_r>
 8009ea4:	b118      	cbz	r0, 8009eae <__swbuf_r+0x32>
 8009ea6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009eaa:	4638      	mov	r0, r7
 8009eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eae:	6823      	ldr	r3, [r4, #0]
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	1a98      	subs	r0, r3, r2
 8009eb4:	6963      	ldr	r3, [r4, #20]
 8009eb6:	b2f6      	uxtb	r6, r6
 8009eb8:	4283      	cmp	r3, r0
 8009eba:	4637      	mov	r7, r6
 8009ebc:	dc05      	bgt.n	8009eca <__swbuf_r+0x4e>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f7fe fbcb 	bl	800865c <_fflush_r>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d1ed      	bne.n	8009ea6 <__swbuf_r+0x2a>
 8009eca:	68a3      	ldr	r3, [r4, #8]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	60a3      	str	r3, [r4, #8]
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	1c5a      	adds	r2, r3, #1
 8009ed4:	6022      	str	r2, [r4, #0]
 8009ed6:	701e      	strb	r6, [r3, #0]
 8009ed8:	6962      	ldr	r2, [r4, #20]
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d004      	beq.n	8009eea <__swbuf_r+0x6e>
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	07db      	lsls	r3, r3, #31
 8009ee4:	d5e1      	bpl.n	8009eaa <__swbuf_r+0x2e>
 8009ee6:	2e0a      	cmp	r6, #10
 8009ee8:	d1df      	bne.n	8009eaa <__swbuf_r+0x2e>
 8009eea:	4621      	mov	r1, r4
 8009eec:	4628      	mov	r0, r5
 8009eee:	f7fe fbb5 	bl	800865c <_fflush_r>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d0d9      	beq.n	8009eaa <__swbuf_r+0x2e>
 8009ef6:	e7d6      	b.n	8009ea6 <__swbuf_r+0x2a>

08009ef8 <__swsetup_r>:
 8009ef8:	b538      	push	{r3, r4, r5, lr}
 8009efa:	4b29      	ldr	r3, [pc, #164]	@ (8009fa0 <__swsetup_r+0xa8>)
 8009efc:	4605      	mov	r5, r0
 8009efe:	6818      	ldr	r0, [r3, #0]
 8009f00:	460c      	mov	r4, r1
 8009f02:	b118      	cbz	r0, 8009f0c <__swsetup_r+0x14>
 8009f04:	6a03      	ldr	r3, [r0, #32]
 8009f06:	b90b      	cbnz	r3, 8009f0c <__swsetup_r+0x14>
 8009f08:	f7fd fcec 	bl	80078e4 <__sinit>
 8009f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f10:	0719      	lsls	r1, r3, #28
 8009f12:	d422      	bmi.n	8009f5a <__swsetup_r+0x62>
 8009f14:	06da      	lsls	r2, r3, #27
 8009f16:	d407      	bmi.n	8009f28 <__swsetup_r+0x30>
 8009f18:	2209      	movs	r2, #9
 8009f1a:	602a      	str	r2, [r5, #0]
 8009f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f26:	e033      	b.n	8009f90 <__swsetup_r+0x98>
 8009f28:	0758      	lsls	r0, r3, #29
 8009f2a:	d512      	bpl.n	8009f52 <__swsetup_r+0x5a>
 8009f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f2e:	b141      	cbz	r1, 8009f42 <__swsetup_r+0x4a>
 8009f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f34:	4299      	cmp	r1, r3
 8009f36:	d002      	beq.n	8009f3e <__swsetup_r+0x46>
 8009f38:	4628      	mov	r0, r5
 8009f3a:	f7fd fdf7 	bl	8007b2c <_free_r>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	6063      	str	r3, [r4, #4]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f043 0308 	orr.w	r3, r3, #8
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	b94b      	cbnz	r3, 8009f72 <__swsetup_r+0x7a>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f68:	d003      	beq.n	8009f72 <__swsetup_r+0x7a>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f000 f883 	bl	800a078 <__smakebuf_r>
 8009f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f76:	f013 0201 	ands.w	r2, r3, #1
 8009f7a:	d00a      	beq.n	8009f92 <__swsetup_r+0x9a>
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	60a2      	str	r2, [r4, #8]
 8009f80:	6962      	ldr	r2, [r4, #20]
 8009f82:	4252      	negs	r2, r2
 8009f84:	61a2      	str	r2, [r4, #24]
 8009f86:	6922      	ldr	r2, [r4, #16]
 8009f88:	b942      	cbnz	r2, 8009f9c <__swsetup_r+0xa4>
 8009f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f8e:	d1c5      	bne.n	8009f1c <__swsetup_r+0x24>
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
 8009f92:	0799      	lsls	r1, r3, #30
 8009f94:	bf58      	it	pl
 8009f96:	6962      	ldrpl	r2, [r4, #20]
 8009f98:	60a2      	str	r2, [r4, #8]
 8009f9a:	e7f4      	b.n	8009f86 <__swsetup_r+0x8e>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	e7f7      	b.n	8009f90 <__swsetup_r+0x98>
 8009fa0:	20000238 	.word	0x20000238

08009fa4 <_raise_r>:
 8009fa4:	291f      	cmp	r1, #31
 8009fa6:	b538      	push	{r3, r4, r5, lr}
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	d904      	bls.n	8009fb8 <_raise_r+0x14>
 8009fae:	2316      	movs	r3, #22
 8009fb0:	6003      	str	r3, [r0, #0]
 8009fb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fba:	b112      	cbz	r2, 8009fc2 <_raise_r+0x1e>
 8009fbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fc0:	b94b      	cbnz	r3, 8009fd6 <_raise_r+0x32>
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f000 f830 	bl	800a028 <_getpid_r>
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4601      	mov	r1, r0
 8009fcc:	4628      	mov	r0, r5
 8009fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fd2:	f000 b817 	b.w	800a004 <_kill_r>
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d00a      	beq.n	8009ff0 <_raise_r+0x4c>
 8009fda:	1c59      	adds	r1, r3, #1
 8009fdc:	d103      	bne.n	8009fe6 <_raise_r+0x42>
 8009fde:	2316      	movs	r3, #22
 8009fe0:	6003      	str	r3, [r0, #0]
 8009fe2:	2001      	movs	r0, #1
 8009fe4:	e7e7      	b.n	8009fb6 <_raise_r+0x12>
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fec:	4620      	mov	r0, r4
 8009fee:	4798      	blx	r3
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	e7e0      	b.n	8009fb6 <_raise_r+0x12>

08009ff4 <raise>:
 8009ff4:	4b02      	ldr	r3, [pc, #8]	@ (800a000 <raise+0xc>)
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	f7ff bfd3 	b.w	8009fa4 <_raise_r>
 8009ffe:	bf00      	nop
 800a000:	20000238 	.word	0x20000238

0800a004 <_kill_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	@ (800a024 <_kill_r+0x20>)
 800a008:	2300      	movs	r3, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	4611      	mov	r1, r2
 800a010:	602b      	str	r3, [r5, #0]
 800a012:	f7f8 febd 	bl	8002d90 <_kill>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	d102      	bne.n	800a020 <_kill_r+0x1c>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	b103      	cbz	r3, 800a020 <_kill_r+0x1c>
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	bd38      	pop	{r3, r4, r5, pc}
 800a022:	bf00      	nop
 800a024:	20001838 	.word	0x20001838

0800a028 <_getpid_r>:
 800a028:	f7f8 beaa 	b.w	8002d80 <_getpid>

0800a02c <__swhatbuf_r>:
 800a02c:	b570      	push	{r4, r5, r6, lr}
 800a02e:	460c      	mov	r4, r1
 800a030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a034:	2900      	cmp	r1, #0
 800a036:	b096      	sub	sp, #88	@ 0x58
 800a038:	4615      	mov	r5, r2
 800a03a:	461e      	mov	r6, r3
 800a03c:	da0d      	bge.n	800a05a <__swhatbuf_r+0x2e>
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a044:	f04f 0100 	mov.w	r1, #0
 800a048:	bf14      	ite	ne
 800a04a:	2340      	movne	r3, #64	@ 0x40
 800a04c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a050:	2000      	movs	r0, #0
 800a052:	6031      	str	r1, [r6, #0]
 800a054:	602b      	str	r3, [r5, #0]
 800a056:	b016      	add	sp, #88	@ 0x58
 800a058:	bd70      	pop	{r4, r5, r6, pc}
 800a05a:	466a      	mov	r2, sp
 800a05c:	f000 f848 	bl	800a0f0 <_fstat_r>
 800a060:	2800      	cmp	r0, #0
 800a062:	dbec      	blt.n	800a03e <__swhatbuf_r+0x12>
 800a064:	9901      	ldr	r1, [sp, #4]
 800a066:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a06a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a06e:	4259      	negs	r1, r3
 800a070:	4159      	adcs	r1, r3
 800a072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a076:	e7eb      	b.n	800a050 <__swhatbuf_r+0x24>

0800a078 <__smakebuf_r>:
 800a078:	898b      	ldrh	r3, [r1, #12]
 800a07a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a07c:	079d      	lsls	r5, r3, #30
 800a07e:	4606      	mov	r6, r0
 800a080:	460c      	mov	r4, r1
 800a082:	d507      	bpl.n	800a094 <__smakebuf_r+0x1c>
 800a084:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	6123      	str	r3, [r4, #16]
 800a08c:	2301      	movs	r3, #1
 800a08e:	6163      	str	r3, [r4, #20]
 800a090:	b003      	add	sp, #12
 800a092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a094:	ab01      	add	r3, sp, #4
 800a096:	466a      	mov	r2, sp
 800a098:	f7ff ffc8 	bl	800a02c <__swhatbuf_r>
 800a09c:	9f00      	ldr	r7, [sp, #0]
 800a09e:	4605      	mov	r5, r0
 800a0a0:	4639      	mov	r1, r7
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7fd fdae 	bl	8007c04 <_malloc_r>
 800a0a8:	b948      	cbnz	r0, 800a0be <__smakebuf_r+0x46>
 800a0aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ae:	059a      	lsls	r2, r3, #22
 800a0b0:	d4ee      	bmi.n	800a090 <__smakebuf_r+0x18>
 800a0b2:	f023 0303 	bic.w	r3, r3, #3
 800a0b6:	f043 0302 	orr.w	r3, r3, #2
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	e7e2      	b.n	800a084 <__smakebuf_r+0xc>
 800a0be:	89a3      	ldrh	r3, [r4, #12]
 800a0c0:	6020      	str	r0, [r4, #0]
 800a0c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	9b01      	ldr	r3, [sp, #4]
 800a0ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0ce:	b15b      	cbz	r3, 800a0e8 <__smakebuf_r+0x70>
 800a0d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f000 f81d 	bl	800a114 <_isatty_r>
 800a0da:	b128      	cbz	r0, 800a0e8 <__smakebuf_r+0x70>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	f023 0303 	bic.w	r3, r3, #3
 800a0e2:	f043 0301 	orr.w	r3, r3, #1
 800a0e6:	81a3      	strh	r3, [r4, #12]
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	431d      	orrs	r5, r3
 800a0ec:	81a5      	strh	r5, [r4, #12]
 800a0ee:	e7cf      	b.n	800a090 <__smakebuf_r+0x18>

0800a0f0 <_fstat_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	@ (800a110 <_fstat_r+0x20>)
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	f7f8 fea7 	bl	8002e50 <_fstat>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d102      	bne.n	800a10c <_fstat_r+0x1c>
 800a106:	682b      	ldr	r3, [r5, #0]
 800a108:	b103      	cbz	r3, 800a10c <_fstat_r+0x1c>
 800a10a:	6023      	str	r3, [r4, #0]
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
 800a10e:	bf00      	nop
 800a110:	20001838 	.word	0x20001838

0800a114 <_isatty_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d06      	ldr	r5, [pc, #24]	@ (800a130 <_isatty_r+0x1c>)
 800a118:	2300      	movs	r3, #0
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	f7f8 fea6 	bl	8002e70 <_isatty>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_isatty_r+0x1a>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_isatty_r+0x1a>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	20001838 	.word	0x20001838

0800a134 <_init>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr

0800a140 <_fini>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	bf00      	nop
 800a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a146:	bc08      	pop	{r3}
 800a148:	469e      	mov	lr, r3
 800a14a:	4770      	bx	lr
